<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一个非前端开发者的CSS布局学习笔记</title>
      <link href="/posts/54/"/>
      <url>/posts/54/</url>
      
        <content type="html"><![CDATA[<p>在 Web 前端开发中，CSS 布局是非常重要的知识技能。本篇文章主要是记录我在学习 CSS 布局知识时的学习笔记，阅读之前需要你了解部分的 CSS 和 HTML 知识。</p><h3 id="几个重要的-CSS-布局相关属性"><a href="#几个重要的-CSS-布局相关属性" class="headerlink" title="几个重要的 CSS 布局相关属性"></a>几个重要的 CSS 布局相关属性</h3><h4 id="display-属性"><a href="#display-属性" class="headerlink" title="display 属性"></a>display 属性</h4><p><code>display</code>是 CSS 中非常重要的用来控制布局的属性， HTML 中每个元素都有一个默认的<code>display</code>属性，大多数元素该属性的默认值为<code>block</code>或<code>inline</code>，<code>block</code>元素被称为块级元素，<code>inline</code>元素通常被称为行内元素。<code>display</code>属性值通常有如下几种取值：</p><ul><li><code>block</code>：块级元素。它会新开始一行，HTML 中大多数元素都默认为该值，如：<code>div</code>、<code>p</code>、<code>form</code>等元素。</li><li><code>inline</code>：行内元素。它不会新开始一行，行内元素可以在段落中而不打乱段落布局。<code>span</code>、<code>a</code>等元素默认为该值。</li><li><code>inline-block</code>：它是 <code>block</code> 和 <code>inline</code> 的结合体。</li><li><code>flex</code>：新的布局方式。</li><li><code>none</code>：设置为该值的元素会被隐藏。</li></ul><h4 id="margin-属性"><a href="#margin-属性" class="headerlink" title="margin 属性"></a>margin 属性</h4><p><code>margin</code>属性用于指定本元素距离周围元素的距离，在布局时，会经常用到。</p><h4 id="max-width-属性"><a href="#max-width-属性" class="headerlink" title="max-width 属性"></a>max-width 属性</h4><p><code>max-width</code>用于指定当前元素最大宽度，当父容器宽度变小时，元素宽度会减小，但是当父容器宽度变大时，该元素最大宽度为指定宽度。</p><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p>CSS 元素由内容、内边距、边框、外边距组成，我们平时设置元素的 <code>width</code> 和 <code>height</code> 等相关属性时，默认情况下，设置的都只是内容的大小，内边距，边框、外边距都可能会增大元素的实际大小。具体内容可能参考这篇文章：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model" target="_blank" rel="noopener">CSS 基础框盒模型介绍</a>。</p><p>如下所示，两个<code>div</code>元素都设置了同样的宽度，但是设置了外边距和边框的<code>div</code>元素明显实际宽度更大一些。</p><p><img src="/posts/54/box-model.png" alt=""></p><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #box-model .simple &#123;</span></span><br><span class="line"><span class="undefined">        width: 500px;</span></span><br><span class="line"><span class="undefined">        margin: 20px auto;</span></span><br><span class="line"><span class="undefined">        border: 2px solid green;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #box-model .fancy &#123;</span></span><br><span class="line"><span class="undefined">        width: 500px;</span></span><br><span class="line"><span class="undefined">        margin: 20px auto;</span></span><br><span class="line"><span class="undefined">        padding: 50px;</span></span><br><span class="line"><span class="undefined">        border: 10px solid green;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"simple"</span>&gt;</span></span><br><span class="line">    I'm use box-sizing, My width is 500px.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fancy"</span>&gt;</span></span><br><span class="line">    I'm use box-sizing, My width is 500px.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="box-sizing-属性"><a href="#box-sizing-属性" class="headerlink" title="box-sizing 属性"></a>box-sizing 属性</h4><p>当把一个元素的 <code>box-sizing</code> 属性设置为 <code>border-box</code> 时，内边距和边框不会再增加元素的实际大小。</p><p>如下所示，两个<code>div</code>元素都设置了同样的宽度，但是设置了内边距和边框的<code>div</code>元素实际宽度没有变大。</p><p><img src="/posts/54/box-sizing.png" alt=""></p><p>代码示例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #box-sizing .simple &#123;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">        width: 500px;</span></span><br><span class="line"><span class="undefined">        margin: 20px auto;</span></span><br><span class="line"><span class="undefined">        border: 2px solid green;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #box-sizing .fancy &#123;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">        width: 500px;</span></span><br><span class="line"><span class="undefined">        margin: 20px auto;</span></span><br><span class="line"><span class="undefined">        padding: 50px;</span></span><br><span class="line"><span class="undefined">        border: 10px solid green;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"simple"</span>&gt;</span></span><br><span class="line">I'm use box-sizing, My width is 500px.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fancy"</span>&gt;</span></span><br><span class="line">I'm use box-sizing, My width is 500px.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-position-布局"><a href="#使用-position-布局" class="headerlink" title="使用  position 布局"></a>使用  position 布局</h3><h4 id="position-属性"><a href="#position-属性" class="headerlink" title="position 属性"></a>position 属性</h4><p><code>position</code> 属性是 CSS 布局中常用的属性，可以有如下的取值：</p><ul><li><code>static</code>：默认值，当一个元素被设置为 <code>static</code> 时，表示元素不能被 <code>positioned</code> 。</li><li><code>relative</code>：与 <code>static</code> 基本一致，区别在于可以被 <code>positioned</code> 。</li><li><code>fixed</code>：固定定位，元素会相对于整个视窗定位，即使页面发生滚动，它还是会停留在相同的位置。</li><li><code>absolute</code>：绝对定位，与 <code>fixed</code> 相似，但它的定位是相对于最近的可以被 <code>positioned</code> 的祖先元素。</li></ul><h4 id="position-布局示例"><a href="#position-布局示例" class="headerlink" title="position 布局示例"></a>position 布局示例</h4><p>使用 <code>position</code> 完成如下所示的布局：</p><p><img src="/posts/54/position-layout.png" alt=""></p><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #position-layout &#123;</span></span><br><span class="line"><span class="undefined">        width: 90%;</span></span><br><span class="line"><span class="undefined">        margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">        border: 2px solid green;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #position-layout .nav &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        top: 0px;</span></span><br><span class="line"><span class="undefined">        left: 0px;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        padding-left: 20px;</span></span><br><span class="line"><span class="undefined">        border: 2px solid red;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #position-layout section &#123;</span></span><br><span class="line"><span class="undefined">        margin-left: 200px;</span></span><br><span class="line"><span class="undefined">        border: 2px solid orange;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"position-layout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        This is a long section.This is a long section.This is a long</span><br><span class="line">        section.This is a long section.This is a long section.This is a long</span><br><span class="line">        section.This is a long section.This is a long section.This is a long</span><br><span class="line">        section.This is a long section.This is a long section.This is a long</span><br><span class="line">        section.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        This is a long section too.This is a long section too.This is a long</span><br><span class="line">        section too.This is a long section too.This is a long section too.This</span><br><span class="line">        is a long section too.This is a long section too.This is a long section</span><br><span class="line">        too.This is a long section too.This is a long section too.This is a long</span><br><span class="line">        section too.This is a long section too.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-float-布局"><a href="#使用-float-布局" class="headerlink" title="使用 float 布局"></a>使用 float 布局</h3><h4 id="float-属性"><a href="#float-属性" class="headerlink" title="float 属性"></a>float 属性</h4><p>为了防止影响后续元素，在使用 <code>float</code> 时注意使用 <code>clear</code> 清除浮动。</p><p><code>float</code> 可以用于实现如下所示的文字环绕图片效果：</p><p><img src="/posts/54/float.png" alt=""></p><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #float &#123;</span></span><br><span class="line"><span class="undefined">        overflow: auto;</span></span><br><span class="line"><span class="undefined">        border: 2px solid orange;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #float img &#123;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="undefined">        margin: 0 1em 1em 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #float:after &#123;</span></span><br><span class="line"><span class="undefined">        content: '.';</span></span><br><span class="line"><span class="undefined">        display: block;</span></span><br><span class="line"><span class="undefined">        height: 0;</span></span><br><span class="line"><span class="undefined">        clear: both;</span></span><br><span class="line"><span class="undefined">        visibility: hidden;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"float"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">         <span class="attr">src</span>=<span class="string">"https://cn.bing.com/th?id=OHR.RhinosOxpecker_ZH-CN6392794613_1920x1080.jpg"</span></span></span><br><span class="line"><span class="tag">         /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        犀牛（学名：Dicerorhinus）是哺乳类犀科的总称，有4属5种。是世界上最大的奇蹄目动物，</span><br><span class="line">        犀类动物腿短、体肥笨拙，体长2.2-4.5米，肩高1.2-2米，体重2000-5000千克。前后肢均三趾；</span><br><span class="line">        皮厚粗糙，并于肩腰等处成褶皱排列，毛被稀少而硬，甚或大部无毛；耳呈卵圆形，头大而长，颈短粗，长唇延长伸出；</span><br><span class="line">        头部有实心的独角或双角（有的雌性无角），起源于真皮，角脱落仍能复生；无犬齿；尾细短，身体呈黄褐、褐、黑或灰色。</span><br><span class="line">        栖息于低地或海拔2000多米的高地。夜间活动，独居或结成小群。生活区域从不脱离水源。食性因种类而异，</span><br><span class="line">        以草类为主，或以树叶、嫩枝、野果、地衣等为食物。母兽妊娠期18-19个月。寿命30-50年。</span><br><span class="line">        因犀牛角的装饰和药用价值而被大量捕捉，除白犀外均为濒危物种。分布于亚洲南部、东南亚和非洲撒哈拉以南地区</span><br><span class="line">        9月22日是“世界犀牛日”（World Rhino</span><br><span class="line">        Day）。2010年，“世界犀牛日”由南非世界自然基金会创办（WWF-South</span><br><span class="line">        Africa），现已为全世界广泛接受。该活动旨在关注全球稀有动物。</span><br><span class="line">        在渐新世出现了有史以来最大陆生哺乳动物——巨犀，它体格健壮和高大，体长约8米，身高5米。不过虽然巨犀和犀牛同属奇蹄目，但并不属于犀牛科。</span><br><span class="line">        中新世的后期，出现了独角犀牛的祖先。独角犀牛仅存爪哇犀牛和印度犀牛，均分布在亚洲。在中新世以后出现的犀牛体型与现代犀牛相接近。</span><br><span class="line">        其中有下唇比上唇略大些的大唇犀，下颌有两颗大牙向前伸出，生活在沼泽地带，以水中的植物为食。</span><br><span class="line">        上新世后期（约300万年前），双角犀牛出现。双角犀牛有苏门达腊犀、白犀牛和黑犀牛。第四纪时期人类已经出现，早期的犀牛以板齿犀、披毛犀为代表。</span><br><span class="line">        板齿犀个体巨大，5米长，身披厚甲，在额部生有大角，约2米长，牙齿的齿冠高，呈方柱状，草地上生活，</span><br><span class="line">        更新世时期在中国华北的及欧洲等地曾有板齿犀生活；披毛犀和猛犸象外形相似，巨大的身体及长着粗毛的厚皮可以抵御寒冷，长鼻上有一对巨角，</span><br><span class="line">        前面一支最长可达1米，生活在寒冷地带。这两种犀类先后在不同的时期都已经灭绝了。</span><br><span class="line">        在犀类的后代中，现仅残存有犀牛科的4属5种，主要分布在亚洲和非洲，其中分布在亚洲的犀牛已经濒临绝种。</span><br><span class="line">        主要是因为犀牛角作为药材，其实犀牛角跟指甲是一样的构造，随数量减少现在也不容易买到真正的犀牛角，</span><br><span class="line">        市场还得以购买是因为现在商贩懂得以牛角替代来获利，甚至用相似成分的猫狗爪磨成假货变换充数。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="float-布局示例"><a href="#float-布局示例" class="headerlink" title="float 布局示例"></a>float 布局示例</h4><p>使用 <code>float</code> 完成如下所示的布局：</p><p><img src="/posts/54/float-layout.png" alt=""></p><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #float-layout &#123;</span></span><br><span class="line"><span class="undefined">        width: 90%;</span></span><br><span class="line"><span class="undefined">        margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        border: 2px solid green;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #float-layout .nav &#123;</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        padding-left: 20px;</span></span><br><span class="line"><span class="undefined">        border: 2px solid red;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #float-layout section &#123;</span></span><br><span class="line"><span class="undefined">        margin-left: 200px;</span></span><br><span class="line"><span class="undefined">        border: 2px solid orange;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #float-layout:after &#123;</span></span><br><span class="line"><span class="undefined">        content: '.';</span></span><br><span class="line"><span class="undefined">        display: block;</span></span><br><span class="line"><span class="undefined">        height: 0;</span></span><br><span class="line"><span class="undefined">        clear: both;</span></span><br><span class="line"><span class="undefined">        visibility: hidden;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"float-layout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        This is a long section.This is a long section.This is a long</span><br><span class="line">        section.This is a long section.This is a long section.This is a long</span><br><span class="line">        section.This is a long section.This is a long section.This is a long</span><br><span class="line">        section.This is a long section.This is a long section.This is a long</span><br><span class="line">        section.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        This is a long section too.This is a long section too.This is a long</span><br><span class="line">        section too.This is a long section too.This is a long section too.This</span><br><span class="line">        is a long section too.This is a long section too.This is a long section</span><br><span class="line">        too.This is a long section too.This is a long section too.This is a long</span><br><span class="line">        section too.This is a long section too.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-inline-block-布局"><a href="#使用-inline-block-布局" class="headerlink" title="使用 inline-block 布局"></a>使用 inline-block 布局</h3><h4 id="使用-inline-block-的注意事项"><a href="#使用-inline-block-的注意事项" class="headerlink" title="使用 inline-block 的注意事项"></a>使用 inline-block 的注意事项</h4><ul><li><code>vertical-align</code> 属性会影响到 <code>inline-block</code> 元素，可能需要把它的值设置为 <code>top</code> 。</li><li>需要设置每一列的宽度</li><li>如果源代码中 <code>inline-block</code> 元素之间有空格或者换行，那么列之间会产生空隙。如果同行的元素使用了百分比宽度且加起来和100%宽度，但是由于代码的换行，导致列之间有空隙，无法排列在同一行的现象。</li></ul><h4 id="inline-block-布局示例"><a href="#inline-block-布局示例" class="headerlink" title="inline-block 布局示例"></a>inline-block 布局示例</h4><p>使用 <code>inline-block</code> 完成如下所示的布局：</p><p><img src="/posts/54/inline-block-layout.png" alt=""></p><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #inline-block-layout &#123;</span></span><br><span class="line"><span class="undefined">        width: 90%;</span></span><br><span class="line"><span class="undefined">        margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        border: 2px solid green;</span></span><br><span class="line"><span class="undefined">        font-size: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #inline-block-layout .nav &#123;</span></span><br><span class="line"><span class="undefined">        display: inline-block;</span></span><br><span class="line"><span class="undefined">        vertical-align: top;</span></span><br><span class="line"><span class="undefined">        width: 25%;</span></span><br><span class="line"><span class="undefined">        padding-left: 20px;</span></span><br><span class="line"><span class="undefined">        border: 2px solid red;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">        font-size: 16px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #inline-block-layout .column &#123;</span></span><br><span class="line"><span class="undefined">        display: inline-block;</span></span><br><span class="line"><span class="undefined">        vertical-align: top;</span></span><br><span class="line"><span class="undefined">        width: 75%;</span></span><br><span class="line"><span class="undefined">        border: 2px solid red;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">        font-size: 16px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #inline-block-layout .column section &#123;</span></span><br><span class="line"><span class="undefined">        border: 2px solid orange;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"inline-block-layout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">            This is a long section.This is a long section.This is a long</span><br><span class="line">            section.This is a long section.This is a long section.This is a long</span><br><span class="line">            section.This is a long section.This is a long section.This is a long</span><br><span class="line">            section.This is a long section.This is a long section.This is a long</span><br><span class="line">            section.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">            This is a long section too.This is a long section too.This is a long</span><br><span class="line">            section too.This is a long section too.This is a long section too.This</span><br><span class="line">            is a long section too.This is a long section too.This is a long</span><br><span class="line">            section too.This is a long section too.This is a long section too.This</span><br><span class="line">            is a long section too.This is a long section too.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-flexbox-布局"><a href="#使用-flexbox-布局" class="headerlink" title="使用 flexbox 布局"></a>使用 flexbox 布局</h3><p><code>flextbox</code> 是一种新的布局方式，可能会有一些旧的浏览器无法支持 <code>flexbox</code> 布局。使用<code>flexbox</code>布局可以轻松实现复杂的布局，可以非常容易的实现垂直居中和水平居中，使用起来极为方便。</p><h4 id="flexbox-简单布局示例"><a href="#flexbox-简单布局示例" class="headerlink" title="flexbox 简单布局示例"></a>flexbox 简单布局示例</h4><p>使用 <code>flexbox</code> 完成如下所示的布局：</p><p><img src="/posts/54/flexbox-layout.png" alt=""></p><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #flexbox-layout &#123;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        width: 90%;</span></span><br><span class="line"><span class="undefined">        margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        border: 2px solid green;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #flexbox-layout .nav &#123;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        padding-left: 20px;</span></span><br><span class="line"><span class="undefined">        border: 2px solid red;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #flexbox-layout .column &#123;</span></span><br><span class="line"><span class="undefined">        flex: 1;</span></span><br><span class="line"><span class="undefined">        border: 2px solid red;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #flexbox-layout .column section &#123;</span></span><br><span class="line"><span class="undefined">        border: 2px solid orange;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"flexbox-layout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">            This is a long section.This is a long section.This is a long</span><br><span class="line">            section.This is a long section.This is a long section.This is a long</span><br><span class="line">            section.This is a long section.This is a long section.This is a long</span><br><span class="line">            section.This is a long section.This is a long section.This is a long</span><br><span class="line">            section.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">            This is a long section too.This is a long section too.This is a long</span><br><span class="line">            section too.This is a long section too.This is a long section too.This</span><br><span class="line">            is a long section too.This is a long section too.This is a long</span><br><span class="line">            section too.This is a long section too.This is a long section too.This</span><br><span class="line">            is a long section too.This is a long section too.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="flexbox-复杂布局示例"><a href="#flexbox-复杂布局示例" class="headerlink" title="flexbox 复杂布局示例"></a>flexbox 复杂布局示例</h4><p>实现如下所示四列布局方式，左边两列固定宽度，右边两列分别占剩下的空间1/3和2/3。</p><p><img src="/posts/54/flexbox-complex-layout.png" alt=""></p><p>示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #flexbox-complex-layout &#123;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        width: 90%;</span></span><br><span class="line"><span class="undefined">        margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        border: 2px solid green;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #flexbox-complex-layout .nav &#123;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        min-width: 100px;</span></span><br><span class="line"><span class="undefined">        border: 2px solid red;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #flexbox-complex-layout .carousel &#123;</span></span><br><span class="line"><span class="undefined">        flex: none;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        border: 2px solid red;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #flexbox-complex-layout .column1 &#123;</span></span><br><span class="line"><span class="undefined">        flex: 1;</span></span><br><span class="line"><span class="undefined">        border: 2px solid red;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #flexbox-complex-layout .column2 &#123;</span></span><br><span class="line"><span class="undefined">        flex: 2;</span></span><br><span class="line"><span class="undefined">        border: 2px solid red;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"flexbox-complex-layout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">        I have 200px width when the space is enough, otherwise my width is</span><br><span class="line">        100px.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel"</span>&gt;</span></span><br><span class="line">        I have 200px width whenever the space is enough or not.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column1"</span>&gt;</span></span><br><span class="line">        I have one third width of the left space.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column2"</span>&gt;</span></span><br><span class="line">        I have two third width of the left space.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="flexbox-水平与垂直居中示例"><a href="#flexbox-水平与垂直居中示例" class="headerlink" title="flexbox 水平与垂直居中示例"></a>flexbox 水平与垂直居中示例</h4><p>实现如下所示的水平与垂直方向上的居中。</p><p><img src="/posts/54/flexbox-center.png" alt=""></p><p>示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #flexbox-easy-center &#123;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        width: 90%;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">        margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        align-items: center;</span></span><br><span class="line"><span class="undefined">        justify-content: center;</span></span><br><span class="line"><span class="undefined">        border: 2px solid green;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #flexbox-easy-center section &#123;</span></span><br><span class="line"><span class="undefined">        border: 2px solid green;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"flexbox-easy-center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        I'm in the middle of the container.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="媒体查询与响应式"><a href="#媒体查询与响应式" class="headerlink" title="媒体查询与响应式"></a>媒体查询与响应式</h3><p>布局随着不同大小的视窗动态调整布局，这就被称为响应式布局，响应式布局可以通过媒体查询来实现。</p><p>如下图表示，当视窗的宽度大于<code>600px</code>时，采用两栏式布局，当宽度小于<code>600px</code>时，采用单栏式布局，菜单也切换为横向菜单。</p><p><img src="/posts/54/./media-query-1.png" alt=""></p><p><img src="/posts/54/./media-query-2.png" alt=""></p><p>示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #media-query &#123;</span></span><br><span class="line"><span class="undefined">        width: 90%;</span></span><br><span class="line"><span class="undefined">        margin: 0 auto;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">        border: 2px solid green;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #media-query .nav &#123;</span></span><br><span class="line"><span class="undefined">        padding-left: 20px;</span></span><br><span class="line"><span class="undefined">        border: 2px solid red;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    #media-query section &#123;</span></span><br><span class="line"><span class="undefined">        border: 2px solid orange;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    @media screen and (min-width: 600px) &#123;</span></span><br><span class="line"><span class="undefined">        #media-query .nav &#123;</span></span><br><span class="line"><span class="undefined">            position: absolute;</span></span><br><span class="line"><span class="undefined">            top: 0px;</span></span><br><span class="line"><span class="undefined">            left: 0px;</span></span><br><span class="line"><span class="undefined">            width: 25%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        #media-query section &#123;</span></span><br><span class="line"><span class="undefined">            margin-left: 25%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    @media screen and (max-width: 599px) &#123;</span></span><br><span class="line"><span class="undefined">        #media-query .nav li &#123;</span></span><br><span class="line"><span class="undefined">            display: inline;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"media-query"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>menuItem3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        This is a long section.This is a long section.This is a long</span><br><span class="line">        section.This is a long section.This is a long section.This is a long</span><br><span class="line">        section.This is a long section.This is a long section.This is a long</span><br><span class="line">        section.This is a long section.This is a long section.This is a long</span><br><span class="line">        section.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        This is a long section too.This is a long section too.This is a long</span><br><span class="line">        section too.This is a long section too.This is a long section too.This</span><br><span class="line">        is a long section too.This is a long section too.This is a long section</span><br><span class="line">        too.This is a long section too.This is a long section too.This is a long</span><br><span class="line">        section too.This is a long section too.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://zh.learnlayout.com/" target="_blank" rel="noopener">https://zh.learnlayout.com/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你听说过测试驱动开发吗？</title>
      <link href="/posts/53/"/>
      <url>/posts/53/</url>
      
        <content type="html"><![CDATA[<h3 id="TDD-是什么"><a href="#TDD-是什么" class="headerlink" title="TDD 是什么"></a>TDD 是什么</h3><p>根据维基百科的定义，测试驱动开发（Test-driven development 简称为 TDD）是一种软件开发过程，这种软件开发过程依赖于对一个非常短的开发循环周期的重复执行。先把需求转换成非常具体的测试用例，然后对软件进行编码便测试用例通过，最后对软件进行改进重构，消除代码的重复，保持代码整洁。没有经过测试验证过的功能，不为会为其编写代码。</p><p> TDD 是一种编程技巧，最早由 Kent Beck 提出。TDD 源于极限编程中的测试先行开发原则。TDD 的主要目标是让代码整洁简单无 Bug。</p><p>由上面可知，TDD 是由多个非常短的开发循环周期组成，一个 TDD 开发循环包括如下的3个步骤：</p><ol><li>编写测试，让测试运行失败，此时处于红色状态。</li><li>编写生产代码，让测试通过，此时处于绿色状态。</li><li>重构代码，消除重复，此时处于重构状态。</li></ol><p>上面的3个步骤就是人们常说的红、绿、重构，这就是一个完整的 TDD 开发循环。</p><p>世界著名的软件大师 Kent Beck、Martin Fowler、Robert C. Martin 均表示支持 TDD 开发模式，他们甚至和 David Heinemeier Hansson 就 TDD 是否已经不再适合现有编程环境有过讨论：<a href="https://martinfowler.com/articles/is-tdd-dead/" target="_blank" rel="noopener">Is TDD Dead?</a></p><a id="more"></a><h3 id="TDD-的优点"><a href="#TDD-的优点" class="headerlink" title="TDD 的优点"></a>TDD 的优点</h3><p>TDD 的优点有很多，下面列出几点我认为比较重要的优点：</p><ul><li>开发人员更了解业务，更懂得任务分解：由于测试用例需要从用户或者使用者的角度来进行描述，这就要求我们开发人员要更加充分的了解业务，只有更充分的了解业务，才能写好测试用例，而且由于，测试应该尽量小，这也就会促使我们把开发任务分解的更小，只有把任务分解的更小，我们才能达到 TDD 理想的小步快跑的状态。</li><li>代码测试覆盖率高，bug 少：由于先写测试，然后才能写生产代码，只有所有测试通过我们才能提交代码，这就会使得我们的代码测试覆盖率非常的高，代码测试覆盖率高能表明我们的代码是经过充分测试的，这样生产中会碰到的 bug 就会相对少许多。</li><li>更自信的重构：由于我们的代码测试覆盖率高，每个需求都有对应的测试，这就会让我们可以更大胆进行重构，因为有充分的测试代码，当我们重构时，如果破坏了原有功能的时候，测试就会马上失败，让我们可以在上生产前修复这些问题，这些我重构代码也会非常的自信。</li><li>代码整洁易扩展：由于 TDD 开发循环中，我们在不断重构代码，消除代码的坏味道，这会让我们得到更加整洁的代码，为了让软件更加容易测试，这会让我们更深入的思考软件的架构，让软件更加的灵活易扩展。</li><li>不会出现生产无用的代码：由于我们先把需求写转换成测试用例，并且我们只为通过测试来编写最少的代码，这样我们几乎不会编写出生产无用的代码，我们所有的代码都是为相应的需要来服务的。</li></ul><h3 id="TDD-开发循环"><a href="#TDD-开发循环" class="headerlink" title="TDD 开发循环"></a>TDD 开发循环</h3><p>一个完整的 TDD 开发循环如下图所示：</p><p><img src="/posts/53/./你听说过测试驱动开发吗？/TDD-flow.png" alt=""></p><ol><li>编写测试，测试应该尽量小，运行测试让测试失败，编译不通过也是一种失败，如果测试没有失败，这表明这个测试没有任何意义，因为这个测试既没有帮助我们实现需求，也没有帮助我们修复 bug 完善代码。这可能是如下的原因导致的：<ul><li>我们在上一次 TDD 循环中，生产代码编写的太多，已经把这次的测试需要测试的功能已经实现了。</li><li>我们在之前的测试中忽略了这一次测试中应该测试的部分。</li></ul></li><li>编写最少的代码让测试通过。为了尽量脱离测试无法通过的状态中，此步骤中可以使用特殊的方法，比如使用伪实现直接返回常量结果值，然后在重构阶段逐渐替换常量为真正的实现。</li><li>重构代码，减少代码中重复，清除代码中的坏味道。清除生产代码与测试间的重复设计。</li><li>重复上述步骤。</li></ol><h3 id="TDD-开发原则"><a href="#TDD-开发原则" class="headerlink" title="TDD 开发原则"></a>TDD 开发原则</h3><p><strong>TDD 三定律</strong></p><ol><li>在编写不能通过的单元测试前，不可编写生产代码。这是 TDD 开发最重要的原则，是的 TDD 得以实行的重要指导原则，这条原则包含两层含义：<ul><li>测试先行，在编写生产代码之前要先编写测试。</li><li>只有在编写的测试失败的情况下，才能进行生产代码的编写。</li></ul></li><li>只可编写刚好无法通过的单元测试，不能编译也算是不通过。这条原则指导我们在编写测试时，也应该把测试尽量的拆分的小一些，不要指望一个测试就能完整的测试一整个功能。</li><li>只可编写刚好足以通过当前失败测试的生产代码。这条原则告诉我们要编写尽量少的代码，尽量早的脱离测试失败的状态中，这里的尽量少的代码不是表示你使用语法糖也尽量使用少的代码行数，处理更多的事情，这里尽量少的代码的意思是，只需要编写能通过测试的代码即可，不需要处理所有情况，比如异常情况等。这可以通过后面的测试来驱动我们来写这些处理异常情况的代码。</li></ol><p><strong>TDD 开发策略</strong></p><ol><li>伪实现，直接返回常量，并在重构阶段使用变量逐渐替换常量。</li><li>明显实现，由于代码逻辑简单，可以直接写出代码实现。</li><li>三角法，通过添加测试使用其失败，逐渐驱动我们朝目标前进。</li></ol><p>根据错误的情况，伪实现和明显实现可以交替进行，当开发进行顺畅时，可以使用明显实现，当开发过程中经常碰到错误时，可以使用伪实现，慢慢找回自信，然后再使用明显实现进行开发。当完全没有实现思路时， 可以使用三角法来驱动我们开发，逐渐理清思路。</p><h3 id="TDD-难点"><a href="#TDD-难点" class="headerlink" title="TDD 难点"></a>TDD 难点</h3><ul><li>任务分解到底需要多细？我们需要把功能分解成多小的任务才合适呢？然后把测试分解多小才什么呢？这是一个比较难的问题，你分解的目的的是实现软件的高内聚、低耦合，这同样也是一句正确的费话，没有人能确切给出答案，一切真需要你自己去体会，去练习，去不断的尝试，去学习，去积累经验。</li><li>到底要测试什么？如果我们测试写的不好，很容易造成，测试需要跟着生产代码被频繁的修改，这样测试不仅没有给我们的代码带来好处，反而给我们的重构带来很多的额外的负担。关于要测试什么，同样也有一句正确的费话，测试行为，不要测试实现。简单来说你应该测试所有公开给别人使用的接口，类，函数等，而内部私有的你可以选择性的测试，具体的关于应该如何写测试，可以观看如下视频：<ul><li><a href="https://dave.cheney.net/2019/04/03/absolute-unit-test" target="_blank" rel="noopener">https://dave.cheney.net/2019/04/03/absolute-unit-test</a></li><li><a href="https://www.youtube.com/watch?v=EZ05e7EMOLM" target="_blank" rel="noopener">https://www.youtube.com/watch?v=EZ05e7EMOLM</a></li></ul></li></ul><h3 id="TDD-开发示例"><a href="#TDD-开发示例" class="headerlink" title="TDD 开发示例"></a>TDD 开发示例</h3><p>我们使用 Go 语言来开发一个简单的 http 服务来演示 TDD 开发模式。服务支持如下的两种功能：</p><ul><li><code>GET /users/{name}</code> 会返回用户的使用 POST 方法 调用 API 的次数。</li><li><code>POST /users/{name}</code> 会记录用户的一次 API 调用，把之前的 API 调用次数加1。</li></ul><h4 id="任务分解"><a href="#任务分解" class="headerlink" title="任务分解"></a>任务分解</h4><ul><li>实现 GET 请求<ul><li>验证响应码</li><li>验证返回 API 调用次数</li><li>验证不存在的用户</li></ul></li><li>实现 POST 请求<ul><li>验证响应码</li><li>验证是否调用记录函数</li></ul></li><li>集成测试</li></ul><h4 id="实现-GET-请求"><a href="#实现-GET-请求" class="headerlink" title="实现 GET 请求"></a>实现 GET 请求</h4><h5 id="先写测试"><a href="#先写测试" class="headerlink" title="先写测试"></a>先写测试</h5><p><strong>测试获取 will 的 API 调用次数，并验证响应码</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetUsers</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Run(<span class="string">"return will's api call count"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">request, _ := http.NewRequest(http.MethodGet, <span class="string">"/users/will"</span>, <span class="literal">nil</span>)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">UserServer(response, request)</span><br><span class="line">got := response.Code</span><br><span class="line">want := http.StatusOK</span><br><span class="line"><span class="keyword">if</span> got != want &#123;</span><br><span class="line">t.Errorf(<span class="string">"got %d, want %d"</span>, got, want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试你会得到如下所示的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\user_test.go:13:3: undefined: UserServer</span><br></pre></td></tr></table></figure><p>现在让我们添加对<code>UserServer</code>函数的定义</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserServer</span><span class="params">()</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>再次运行测试你会得到如下的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.\user_test.go:13:13: too many arguments in call to UserServer</span><br><span class="line">        have (*httptest.ResponseRecorder, *http.Request)</span><br><span class="line">        want ()</span><br></pre></td></tr></table></figure><p>现在让我们给函数添加相应的参数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserServer</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>再次运行测试，测试通过了。</p><h5 id="先写测试-1"><a href="#先写测试-1" class="headerlink" title="先写测试"></a>先写测试</h5><p><strong>测试响应数据</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetUsers</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Run(<span class="string">"return will's api call count"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">request, _ := http.NewRequest(http.MethodGet, <span class="string">"/users/will"</span>, <span class="literal">nil</span>)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">UserServer(response, request)</span><br><span class="line">got := response.Code</span><br><span class="line">want := http.StatusOK</span><br><span class="line"><span class="keyword">if</span> got != want &#123;</span><br><span class="line">t.Errorf(<span class="string">"got %d, want %d"</span>, got, want)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gotCount := response.Body.String()</span><br><span class="line">wantCount := <span class="string">"6"</span></span><br><span class="line"><span class="keyword">if</span> gotCount != wantCount &#123;</span><br><span class="line">t.Errorf(<span class="string">"got % q, want % q"</span>, gotCount, wantCount)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，你会得到如下的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_test.go:23: got &quot;&quot;, want &quot;6&quot;</span><br></pre></td></tr></table></figure><p>现在编写最少的代码，让测试通过</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserServer</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprint(w, <span class="string">"6"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在测试通过，但是你肯定会想骂人了，你这是写的啥，直接给写死了返回值，真的是在写代码吗？说好的不要写死呢？先别着急，由于我们没有存储数据的地方，现在返回一个固定值让测试通过，也不能说不是一个好办法，后面我们会来解决这个问题的。</p><h5 id="完成主程序结构"><a href="#完成主程序结构" class="headerlink" title="完成主程序结构"></a>完成主程序结构</h5><p>我们尽量早的把经过验证的生产代码，放到主程序中，这样我们可以尽快的得到一个可运行的软件，而且后续的程序结构的改动，可以及时发现。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">handler := http.HandlerFunc(UserServer)</span><br><span class="line"><span class="keyword">if</span> err := http.ListenAndServe(<span class="string">":5000"</span>, handler); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"could not listen on port 5000 %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="先写测试-2"><a href="#先写测试-2" class="headerlink" title="先写测试"></a>先写测试</h5><p><strong>现在让我们再尝试获取 mgxian 的 API 调用数据</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">t.Run(<span class="string">"return mgxian's api call count"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">request, _ := http.NewRequest(http.MethodGet, <span class="string">"/users/mgxian"</span>, <span class="literal">nil</span>)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">UserServer(response, request)</span><br><span class="line">got := response.Code</span><br><span class="line">want := http.StatusOK</span><br><span class="line"><span class="keyword">if</span> got != want &#123;</span><br><span class="line">t.Errorf(<span class="string">"got %d, want %d"</span>, got, want)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gotCount := response.Body.String()</span><br><span class="line">wantCount := <span class="string">"8"</span></span><br><span class="line"><span class="keyword">if</span> gotCount != wantCount &#123;</span><br><span class="line">t.Errorf(<span class="string">"got % q, want % q"</span>, gotCount, wantCount)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现在运行测试，你会得到如下的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_test.go:40: got &quot;6&quot;, want &quot;8&quot;</span><br></pre></td></tr></table></figure><p>现在让我们来修复这个错误，为了能让我们能根据 user 不同来响应不同的内容，我们需要从 URL 中获取到 username ，测试驱动着我们完成接下来的工作。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserServer</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/users/"</span>):]</span><br><span class="line"><span class="keyword">if</span> user == <span class="string">"will"</span> &#123;</span><br><span class="line">fmt.Fprint(w, <span class="string">"6"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> user == <span class="string">"mgxian"</span> &#123;</span><br><span class="line">fmt.Fprint(w, <span class="string">"8"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试通过，现在让我们进入重构阶段，根据 user 来响应不同内容的逻辑我们可以放在一个单独的函数中去。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UserServer</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/users/"</span>):]</span><br><span class="line">apiCallCount := GetUserAPICallCount(user)</span><br><span class="line">fmt.Fprint(w, apiCallCount)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUserAPICallCount</span><span class="params">(user <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> user == <span class="string">"will"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"6"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> user == <span class="string">"mgxian"</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"8"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重构之后，运行测试，测试通过，我们观察到我们的测试程序有部分代码是重复的，我们也可以进行重构，不仅生产代码需要重构，测试代码也需要重构。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetUsers</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">t.Run(<span class="string">"return will's api call count"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">user := <span class="string">"will"</span></span><br><span class="line">request := newGetUserAPICallCountRequest(user)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">UserServer(response, request)</span><br><span class="line"></span><br><span class="line">assertStatus(t, response.Code, http.StatusOK)</span><br><span class="line">assertCount(t, response.Body.String(), <span class="string">"6"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">t.Run(<span class="string">"return mgxian's api call count"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">user := <span class="string">"mgxian"</span></span><br><span class="line">request := newGetUserAPICallCountRequest(user)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">UserServer(response, request)</span><br><span class="line"></span><br><span class="line">assertStatus(t, response.Code, http.StatusOK)</span><br><span class="line">assertCount(t, response.Body.String(), <span class="string">"8"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newGetUserAPICallCountRequest</span><span class="params">(user <span class="keyword">string</span>)</span> *<span class="title">http</span>.<span class="title">Request</span></span> &#123;</span><br><span class="line">request, _ := http.NewRequest(http.MethodGet, fmt.Sprintf(<span class="string">"/users/%s"</span>, user), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">return</span> request</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">assertStatus</span><span class="params">(t *testing.T, got, want <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">t.Helper()</span><br><span class="line"><span class="keyword">if</span> got != want &#123;</span><br><span class="line">t.Errorf(<span class="string">"wrong status code got %d, want %d"</span>, got, want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">assertCount</span><span class="params">(t *testing.T, got, want <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">t.Helper()</span><br><span class="line"><span class="keyword">if</span> got != want &#123;</span><br><span class="line">t.Errorf(<span class="string">"got % q, want % q"</span>, got, want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，测试通过，测试代码重构完成。现在让我们进一步的思考，我们的 UserServer 相当于 MVC 模式中的 Controller ，GetUserAPICallCount 相当于 Model ，因此在我应该在让他们之前通过 Interface UserStore 来交流，隔离关注点。为能让 UserServer 使用 UserStore 我们应该把 UserServer 定义 struct 类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> UserStore <span class="keyword">interface</span> &#123;</span><br><span class="line">GetUserAPICallCount(user <span class="keyword">string</span>) <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserServer <span class="keyword">struct</span> &#123;</span><br><span class="line">store UserStore</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserServer)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/users/"</span>):]</span><br><span class="line">apiCallCount := u.store.GetUserAPICallCount(user)</span><br><span class="line">fmt.Fprint(w, apiCallCount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试你会得到如下的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main.go:9:30: type UserServer is not an expression</span><br></pre></td></tr></table></figure><p>修改 main 函数新创建的 UserServer</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">server := &amp;UserServer&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err := http.ListenAndServe(<span class="string">":5000"</span>, server); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"could not listen on port 5000 %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改测试使用新创建的 UserServer</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetUsers</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">server := &amp;UserServer&#123;&#125;</span><br><span class="line">t.Run(<span class="string">"return will's api call count"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">user := <span class="string">"will"</span></span><br><span class="line">request := newGetUserAPICallCountRequest(user)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">server.ServeHTTP(response, request)</span><br><span class="line"></span><br><span class="line">assertStatus(t, response.Code, http.StatusOK)</span><br><span class="line">assertCount(t, response.Body.String(), <span class="string">"6"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">t.Run(<span class="string">"return mgxian's api call count"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">user := <span class="string">"mgxian"</span></span><br><span class="line">request := newGetUserAPICallCountRequest(user)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">server.ServeHTTP(response, request)</span><br><span class="line"></span><br><span class="line">assertStatus(t, response.Code, http.StatusOK)</span><br><span class="line">assertCount(t, response.Body.String(), <span class="string">"8"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行测试你会得到如下的错误，这是由于我们并没有传递 UserStore 给 UserServer 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">panic: runtime error: invalid memory address or nil pointer dereference [recovered]</span><br><span class="line">        panic: runtime error: invalid memory address or nil pointer dereference</span><br><span class="line">[signal 0xc0000005 code=0x0 addr=0x18 pc=0x66575f]</span><br></pre></td></tr></table></figure><p>编写一个 stub 类型的 mock 来模拟测试</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> StubUserStore <span class="keyword">struct</span> &#123;</span><br><span class="line">apiCallCounts <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *StubUserStore)</span> <span class="title">GetUserAPICallCount</span><span class="params">(user <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> s.apiCallCounts[user]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改测试使用我们 mock 出来的 StubUserStore</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetUsers</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">store := StubUserStore&#123;</span><br><span class="line">apiCallCounts: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="string">"will"</span>:   <span class="number">6</span>,</span><br><span class="line"><span class="string">"mgxian"</span>: <span class="number">8</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">server := &amp;UserServer&#123;&amp;store&#125;</span><br><span class="line">t.Run(<span class="string">"return will's api call count"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">user := <span class="string">"will"</span></span><br><span class="line">request := newGetUserAPICallCountRequest(user)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">server.ServeHTTP(response, request)</span><br><span class="line"></span><br><span class="line">assertStatus(t, response.Code, http.StatusOK)</span><br><span class="line">assertCount(t, response.Body.String(), <span class="string">"6"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">t.Run(<span class="string">"return mgxian's api call count"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">user := <span class="string">"mgxian"</span></span><br><span class="line">request := newGetUserAPICallCountRequest(user)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">server.ServeHTTP(response, request)</span><br><span class="line"></span><br><span class="line">assertStatus(t, response.Code, http.StatusOK)</span><br><span class="line">assertCount(t, response.Body.String(), <span class="string">"8"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行测试，测试全部通过。</p><p>为了使我们的主程序能正常运行，我们需要实现一个假的 UserStore</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> InMemoryUserStore <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *InMemoryUserStore)</span> <span class="title">GetUserAPICallCount</span><span class="params">(user <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">666</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">store := InMemoryUserStore&#123;&#125;</span><br><span class="line">server := &amp;UserServer&#123;&amp;store&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := http.ListenAndServe(<span class="string">":5000"</span>, server); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"could not listen on port 5000 %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="先写测试-3"><a href="#先写测试-3" class="headerlink" title="先写测试"></a>先写测试</h5><p><strong>测试一个不存在的用户</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">t.Run(<span class="string">"return 404 on unknown user"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">user := <span class="string">"unknown"</span></span><br><span class="line">request := newGetUserAPICallCountRequest(user)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">server.ServeHTTP(response, request)</span><br><span class="line"></span><br><span class="line">assertStatus(t, response.Code, http.StatusNotFound)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行测试得到如下的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_test.go:52: wrong status code got 200, want 404</span><br></pre></td></tr></table></figure><p>编写最少的代码通过测试</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserServer)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/users/"</span>):]</span><br><span class="line">apiCallCount := u.store.GetUserAPICallCount(user)</span><br><span class="line"><span class="keyword">if</span> apiCallCount == <span class="number">0</span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusNotFound)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprint(w, apiCallCount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，测试通过。</p><h4 id="实现-POST-请求"><a href="#实现-POST-请求" class="headerlink" title="实现 POST 请求"></a>实现 POST 请求</h4><h5 id="先写测试-4"><a href="#先写测试-4" class="headerlink" title="先写测试"></a>先写测试</h5><p><strong>测试记录 API 调用次数，验证响应码</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStoreAPICalls</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">store := StubUserStore&#123;</span><br><span class="line"><span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">server := &amp;UserServer&#123;&amp;store&#125;</span><br><span class="line"></span><br><span class="line">t.Run(<span class="string">"return accepted on POST"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">request, _ := http.NewRequest(http.MethodPost, <span class="string">"/users/will"</span>, <span class="literal">nil</span>)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line"></span><br><span class="line">server.ServeHTTP(response, request)</span><br><span class="line">assertStatus(t, response.Code, http.StatusAccepted)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，你会得到如下的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_test.go:67: wrong status code got 404, want 202</span><br></pre></td></tr></table></figure><p>编写最少的代码让失败的测试通过</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserServer)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">method := r.Method</span><br><span class="line"><span class="keyword">if</span> method == http.MethodPost &#123;</span><br><span class="line">w.WriteHeader(http.StatusAccepted)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">user := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/users/"</span>):]</span><br><span class="line">apiCallCount := u.store.GetUserAPICallCount(user)</span><br><span class="line"><span class="keyword">if</span> apiCallCount == <span class="number">0</span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusNotFound)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprint(w, apiCallCount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试通过，对代码进行重构，我们把处理 post 和 get  请求的业务逻辑封装到单独的函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserServer)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> r.Method &#123;</span><br><span class="line"><span class="keyword">case</span> http.MethodGet:</span><br><span class="line">u.showAPICallCount(w, r)</span><br><span class="line"><span class="keyword">case</span> http.MethodPost:</span><br><span class="line">u.processAPICall(w, r)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserServer)</span> <span class="title">showAPICallCount</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/users/"</span>):]</span><br><span class="line">apiCallCount := u.store.GetUserAPICallCount(user)</span><br><span class="line"><span class="keyword">if</span> apiCallCount == <span class="number">0</span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusNotFound)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprint(w, apiCallCount)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserServer)</span> <span class="title">processAPICall</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusAccepted)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试通过，继续进行后续功能开发。</p><h5 id="先写测试-5"><a href="#先写测试-5" class="headerlink" title="先写测试"></a>先写测试</h5><p><strong>验证当使用 POST 方法时，UserStore 是否被调用记录 API 请求</strong></p><p>给我们之前实现的 StubUserStore 添加 RecordAPICall 函数，记录并验证函数的调用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> StubUserStore <span class="keyword">struct</span> &#123;</span><br><span class="line">apiCallCounts <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></span><br><span class="line">apiCalls      []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *StubUserStore)</span> <span class="title">GetUserAPICallCount</span><span class="params">(user <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> s.apiCallCounts[user]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *StubUserStore)</span> <span class="title">RecordAPICall</span><span class="params">(user <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">s.apiCalls = <span class="built_in">append</span>(s.apiCalls, user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加测试验证调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStoreAPICalls</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">store := StubUserStore&#123;</span><br><span class="line"><span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">server := &amp;UserServer&#123;&amp;store&#125;</span><br><span class="line"></span><br><span class="line">t.Run(<span class="string">"record api call when POST"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">request, _ := http.NewRequest(http.MethodPost, <span class="string">"/users/will"</span>, <span class="literal">nil</span>)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line"></span><br><span class="line">server.ServeHTTP(response, request)</span><br><span class="line">assertStatus(t, response.Code, http.StatusAccepted)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(store.apiCalls) != <span class="number">1</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"got %d calls to RecordAPICall want %d"</span>, <span class="built_in">len</span>(store.apiCalls), <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，你会得到如下的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_test.go:63:17: too few values in StubUserStore literal</span><br></pre></td></tr></table></figure><p>修改代码，让测试可以运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">func TestStoreAPICalls(t *testing.T) &#123;</span><br><span class="line">store := StubUserStore&#123;</span><br><span class="line">map[string]int&#123;&#125;,</span><br><span class="line">nil,</span><br><span class="line">&#125;</span><br><span class="line">server := &amp;UserServer&#123;&amp;store&#125;</span><br><span class="line"></span><br><span class="line">t.Run(<span class="string">"record api call when POST"</span>, func(t *testing.T) &#123;</span><br><span class="line">request, _ := http.NewRequest(http.MethodPost, <span class="string">"/users/will"</span>, nil)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line"></span><br><span class="line">server.ServeHTTP(response, request)</span><br><span class="line">assertStatus(t, response.Code, http.StatusAccepted)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(store.apiCalls) != 1 &#123;</span><br><span class="line">t.Errorf(<span class="string">"got %d calls to RecordAPICall want %d"</span>, len(store.apiCalls), 1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，你会得到如下的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_test.go:76: got 0 calls to RecordAPICall want 1</span><br></pre></td></tr></table></figure><p>修改代码，让测试通过</p><p>给 UserStore 添加相应的函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> UserStore <span class="keyword">interface</span> &#123;</span><br><span class="line">GetUserAPICallCount(user <span class="keyword">string</span>) <span class="keyword">int</span></span><br><span class="line">RecordAPICall(user <span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于编译器报错，我需要 InMemoryUserStore 实现相应的函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *InMemoryUserStore)</span> <span class="title">RecordAPICall</span><span class="params">(user <span class="keyword">string</span>)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>编写代码调用 RecordAPICall</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserServer)</span> <span class="title">processAPICall</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">u.store.RecordAPICall(<span class="string">"bob"</span>)</span><br><span class="line">w.WriteHeader(http.StatusAccepted)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，测试通过。</p><h5 id="先写测试-6"><a href="#先写测试-6" class="headerlink" title="先写测试"></a>先写测试</h5><p><strong>验证 API 调用的用户记录</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStoreAPICalls</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">store := StubUserStore&#123;</span><br><span class="line"><span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;&#125;,</span><br><span class="line"><span class="literal">nil</span>,</span><br><span class="line">&#125;</span><br><span class="line">server := &amp;UserServer&#123;&amp;store&#125;</span><br><span class="line"></span><br><span class="line">t.Run(<span class="string">"record api call when POST"</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">user := <span class="string">"will"</span></span><br><span class="line">request, _ := http.NewRequest(http.MethodPost, fmt.Sprintf(<span class="string">"/users/%s"</span>, user), <span class="literal">nil</span>)</span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line"></span><br><span class="line">server.ServeHTTP(response, request)</span><br><span class="line">assertStatus(t, response.Code, http.StatusAccepted)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(store.apiCalls) != <span class="number">1</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"got %d calls to RecordAPICall want %d"</span>, <span class="built_in">len</span>(store.apiCalls), <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> store.apiCalls[<span class="number">0</span>] != user &#123;</span><br><span class="line">t.Errorf(<span class="string">"did not record correct api call user got %q want %q"</span>, store.apiCalls[<span class="number">0</span>], user)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，你会得到如下的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_test.go:81: did not record correct api call user got &quot;bob&quot; want &quot;will&quot;</span><br></pre></td></tr></table></figure><p>修改代码，让测试通过</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserServer)</span> <span class="title">processAPICall</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/users/"</span>):]</span><br><span class="line">u.store.RecordAPICall(user)</span><br><span class="line">w.WriteHeader(http.StatusAccepted)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试通过，对代码进行重构，由于从请求中获取 user 的代码重复，提取到调用方</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserServer)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">user := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/users/"</span>):]</span><br><span class="line"><span class="keyword">switch</span> r.Method &#123;</span><br><span class="line"><span class="keyword">case</span> http.MethodGet:</span><br><span class="line">u.showAPICallCount(w, user)</span><br><span class="line"><span class="keyword">case</span> http.MethodPost:</span><br><span class="line">u.processAPICall(w, user)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserServer)</span> <span class="title">showAPICallCount</span><span class="params">(w http.ResponseWriter, user <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">apiCallCount := u.store.GetUserAPICallCount(user)</span><br><span class="line"><span class="keyword">if</span> apiCallCount == <span class="number">0</span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusNotFound)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprint(w, apiCallCount)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u *UserServer)</span> <span class="title">processAPICall</span><span class="params">(w http.ResponseWriter, user <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">u.store.RecordAPICall(user)</span><br><span class="line">w.WriteHeader(http.StatusAccepted)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，测试通过，重构完成。</p><h4 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h4><p>两个功能已经分别开发完成，我们现在进行集成测试，由于集成测试不容易写，出错后不易查找，并且由于可能会使用真实的组件如数据库，所以可能会运行缓慢。因此集成测试应该尽量少的写。</p><h5 id="先写测试-7"><a href="#先写测试-7" class="headerlink" title="先写测试"></a>先写测试</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRecordAPICallsAndGetThem</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">store := InMemoryUserStore&#123;&#125;</span><br><span class="line">server := UserServer&#123;&amp;store&#125;</span><br><span class="line">user := <span class="string">"will"</span></span><br><span class="line"></span><br><span class="line">request, _ := http.NewRequest(http.MethodPost, fmt.Sprintf(<span class="string">"/users/%s"</span>, user), <span class="literal">nil</span>)</span><br><span class="line">server.ServeHTTP(httptest.NewRecorder(), request)</span><br><span class="line">server.ServeHTTP(httptest.NewRecorder(), request)</span><br><span class="line">server.ServeHTTP(httptest.NewRecorder(), request)</span><br><span class="line"></span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">request = newGetUserAPICallCountRequest(user)</span><br><span class="line">server.ServeHTTP(response, request)</span><br><span class="line"></span><br><span class="line">assertStatus(t, response.Code, http.StatusOK)</span><br><span class="line">assertCount(t, response.Body.String(), <span class="string">"3"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，你会得到如下 的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server_integration_test.go:25: got &quot;666&quot;, want &quot;3&quot;</span><br></pre></td></tr></table></figure><p>为 InMemoryUserStore 编写具体实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> InMemoryUserStore <span class="keyword">struct</span> &#123;</span><br><span class="line">store <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *InMemoryUserStore)</span> <span class="title">GetUserAPICallCount</span><span class="params">(user <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> i.store[user]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *InMemoryUserStore)</span> <span class="title">RecordAPICall</span><span class="params">(user <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">i.store[user]++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewInMemoryUserStore</span><span class="params">()</span> *<span class="title">InMemoryUserStore</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;InMemoryUserStore&#123;</span><br><span class="line">store: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>集成测试使用 InMemoryUserStore </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestRecordAPICallsAndGetThem</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">store := NewInMemoryUserStore()</span><br><span class="line">server := UserServer&#123;store&#125;</span><br><span class="line">user := <span class="string">"will"</span></span><br><span class="line"></span><br><span class="line">request, _ := http.NewRequest(http.MethodPost, fmt.Sprintf(<span class="string">"/users/%s"</span>, user), <span class="literal">nil</span>)</span><br><span class="line">server.ServeHTTP(httptest.NewRecorder(), request)</span><br><span class="line">server.ServeHTTP(httptest.NewRecorder(), request)</span><br><span class="line">server.ServeHTTP(httptest.NewRecorder(), request)</span><br><span class="line"></span><br><span class="line">response := httptest.NewRecorder()</span><br><span class="line">request = newGetUserAPICallCountRequest(user)</span><br><span class="line">server.ServeHTTP(response, request)</span><br><span class="line"></span><br><span class="line">assertStatus(t, response.Code, http.StatusOK)</span><br><span class="line">assertCount(t, response.Body.String(), <span class="string">"3"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行测试，测试通过。</p><h5 id="完善主程序"><a href="#完善主程序" class="headerlink" title="完善主程序"></a>完善主程序</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">store := NewInMemoryUserStore()</span><br><span class="line">server := &amp;UserServer&#123;store&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := http.ListenAndServe(<span class="string">":5000"</span>, server); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"could not listen on port 5000 %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此一个使用内存来记录查询用户 API 调用次数的程序已经完成，后面的步骤你可选择其他数据存储来替换内存存储进行数据的持久后。只需要实现 UserStore 接口即可。</p><h3 id="TDD-总结"><a href="#TDD-总结" class="headerlink" title="TDD 总结"></a>TDD 总结</h3><p>TDD 开发模式减轻人开发人员的心智负担，通过红、绿、重构循环，开发人员每一个阶段都只有一个特定的目标，这使得开发人员关注点只有一个，注意力集中。</p><p>TDD 并非要我们非常严格的遵循 TDD 三定律，我们可以根据特殊情况，做适当的调整，TDD 三定律并不是给你加上了无法破解的枷锁。</p><p>TDD 开发模式能让开发人员更自信，由于我们的任务分解的小，开发循环比较短，我们可以在很短时间内获得测试的反馈，我们几乎随时都有可运行的软件，这给我们开发人员带来很强的安全感，这给了我们自信心。</p><p>TDD 不是银弹，不是所有项目开发都可以使用 TDD 开发模式来进行开发，比如编写测试成本比较大的情况下就不会适合使用 TDD 开发模式，比如 IOS 项目开发中检查APP中的元素的位置及大小比较麻烦，就不太适合使用 TDD 开发模式，但是我们可以尽量减少这种UI部分的业务逻辑，UI只根据数据来做简单直接的展示，使用TDD 来开发UI需要的数据之前的业务逻辑的开发。</p><p>TDD 的关键在于驱动，要让测试驱动我们来进行功能开发，每写一个测试，都驱动我们写更多的生产代码，都向进一步实现我们的功能的方向前进。</p><p>要想流畅的使用 TDD 需要不断的练习，掌握 TDD 的节奏是流畅使用 TDD 关键。</p><p>重构是 TDD 中重要的环节，如果没有重构，你得到的可能只是由一堆零乱代码组合的凑合能工作的软件。只有注重重构才能让我们代码更整洁，更利于后续 TDD 开发模式。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><p><a href="https://book.douban.com/subject/1230036/" target="_blank" rel="noopener">https://book.douban.com/subject/1230036/</a></p></li><li><p><a href="https://quii.gitbook.io/learn-go-with-tests/build-an-application/http-server" target="_blank" rel="noopener">https://quii.gitbook.io/learn-go-with-tests/build-an-application/http-server</a></p></li><li><p><a href="https://juejin.im/post/5c3e73876fb9a049d37f5db1" target="_blank" rel="noopener">https://juejin.im/post/5c3e73876fb9a049d37f5db1</a></p></li><li><p><a href="https://www.guru99.com/test-driven-development.html" target="_blank" rel="noopener">https://www.guru99.com/test-driven-development.html</a></p></li><li><p><a href="https://en.wikipedia.org/wiki/Test-driven_development" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Test-driven_development</a></p></li><li><p><a href="https://blog.testlodge.com/what-is-tdd/" target="_blank" rel="noopener">https://blog.testlodge.com/what-is-tdd/</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tdd </tag>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在测试中更好地使用mock</title>
      <link href="/posts/52/"/>
      <url>/posts/52/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注意：本文大部分内容为翻译 Bob 大叔的文章，原文链接可以在文章底部的参考文档处找到。</p></blockquote><h3 id="什么是-mock"><a href="#什么是-mock" class="headerlink" title="什么是 mock"></a>什么是 mock</h3><p>mock 作为名词时表示 mock 对象，在维基百科的解释中如下：</p><blockquote><p>在面向对象程序设计中，<strong>模拟对象</strong>（英语：mock object，也译作<strong>模仿对象</strong>）是以可控的方式模拟真实对象行为的假的对象。程序员通常创造模拟对象来测试其他对象的行为。</p></blockquote><p>mock 作为动词时表示编写使用 mock 对象。</p><p>mock 多用于测试代码中，对于不容易构造或者不容易获取的对象，使用一个虚拟的对象来方便测试。</p><h3 id="mock-的分类"><a href="#mock-的分类" class="headerlink" title="mock 的分类"></a>mock 的分类</h3><a id="more"></a><p>为了使用示例说明各个mock 种类的区别与联系，文章使用 go 语言作为示例，如下为示例的基础代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Authorizer <span class="keyword">interface</span> &#123;</span><br><span class="line">    authorize(username, password <span class="keyword">string</span>) <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> System <span class="keyword">struct</span> &#123;</span><br><span class="line">    authorizer Authorizer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSystem</span><span class="params">(authorizer Authorizer)</span> *<span class="title">System</span></span> &#123;</span><br><span class="line">    system = <span class="built_in">new</span>(System)</span><br><span class="line">    system.authorizer = authorizer</span><br><span class="line">    <span class="keyword">return</span> system</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *System)</span> <span class="title">loginCount</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">// skip</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *System)</span> <span class="title">login</span><span class="params">(username, password <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> s.authorizer.authorize(username, password) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> errors.New(<span class="string">"username or password is not right"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dummy"><a href="#dummy" class="headerlink" title="dummy"></a>dummy</h4><p>当你不关心传入的参数被如何使用时，你就应该使用 dummy 类型的 mock，一般用于作为其他对象的初始化参数。示例如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DummyAuthorizer <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *DummyAuthorizer)</span> <span class="title">authorize</span><span class="params">(username, password <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="comment">// return nil</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSystem</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    system := NewSystem(<span class="built_in">new</span>(DummyAuthorizer))</span><br><span class="line">    got := system.loginCount()</span><br><span class="line">    want := <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> got != want &#123;</span><br><span class="line">        t.Errorf(<span class="string">"got %d, want %d"</span>, got, want)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的测试示例代码中，DummyAuthorizer 的作为只是为了初始化 System 对象的需要，后续测试中并没有使用该 DummyAuthorizer 对象。</p><blockquote><p>注意：此处的 authorize 方法原文返回了 null ，由于 go 语言不允许为 bool 返回 nil ，因此此处返回了 false</p></blockquote><h4 id="stub"><a href="#stub" class="headerlink" title="stub"></a>stub</h4><p>当你只关心方法的返回结果，并且需要特定返回值的时候，这时候你就可以使用 stub 类型的 mock 。比如我们需要测试系统中某些功能是否能正确处理用户登录和不登录的情况，而登录功能我们已经在其他地方经过测试，而且使用真实的登录功能调用又比较的麻烦，我们就可以直接返回已登录或者未登录状态来进行其他功能的验证。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> AcceptingAuthorizerStub <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(aas *AcceptingAuthorizerStub)</span> <span class="title">authorize</span><span class="params">(username, password <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> RefusingAuthorizerStub <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ras *RefusingAuthorizerStub)</span> <span class="title">authorize</span><span class="params">(username, password <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="spy"><a href="#spy" class="headerlink" title="spy"></a>spy</h4><p>当你不只是只关心方法的返回结果，还需要检查方法是否真正的被调用了，方法的调用次数等，或者需要记录方法调用过程中的信息。这个时候你就应该使用 spy 类型的 mock ，调用结束后你需要自己检查方法是否被调用，检查调用过程中记录的其他信息。但是请注意，这将会使你的测试代码和被测试方法相耦合，测试需要知道被测试方法的内部实现细节。使用时需要谨慎一些，不要过渡使用，过渡使用可能导致测试过于脆弱。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> AcceptingAuthorizerSpy <span class="keyword">struct</span> &#123;</span><br><span class="line">    authorizeWasCalled <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(aas *AcceptingAuthorizerSpy)</span> <span class="title">authorize</span><span class="params">(username, password <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    aas.authorizeWasCalled = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSystem</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    authorizer := <span class="built_in">new</span>(AcceptingAuthorizerSpy)</span><br><span class="line">    system := NewSystem(authorizer)</span><br><span class="line">    got := system.login(<span class="string">"will"</span>, <span class="string">"will"</span>)</span><br><span class="line">    <span class="keyword">if</span> got != <span class="literal">nil</span> &#123;</span><br><span class="line">        t.Errorf(<span class="string">"login failed with error %v"</span>, got)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> authorizer.authorizeWasCalled != <span class="literal">true</span> &#123;</span><br><span class="line">        t.Errorf(<span class="string">"authorize was not called"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mock"><a href="#mock" class="headerlink" title="mock"></a>mock</h4><p>mock 类型的 mock 可以算作是真正的 ”mock“ 。把 spy 类型的 mock 在测试代码中的断言语句移动到 mock 对象中，这使它更关注于测试行为。这种类型的 mock 对方法的返回值并不是那么的感兴趣，它更关心的是哪个方法被使用了什么参数在什么时间被调用了，调用的频率等。这种类型的 mock 使得编写 mock 相关的工具更加的简单，mock 工具可以帮助你在运行时创建 mock 对象。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> AcceptingAuthorizerVerificationMock <span class="keyword">struct</span> &#123;</span><br><span class="line">    authorizeWasCalled <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(aavm *AcceptingAuthorizerVerificationMock)</span> <span class="title">authorize</span><span class="params">(username, password <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    aavm.authorizeWasCalled = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(aavm *AcceptingAuthorizerVerificationMock)</span> <span class="title">verify</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> aavm.authorizeWasCalled</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="fake"><a href="#fake" class="headerlink" title="fake"></a>fake</h4><p>fake 类型的 mock 与其他类型的 mock 最大的区别是它包含了真实的业务逻辑。当以不同的数据调用时，你会得到不同的结果。随着业务逻辑的改变，它可能也会越来越复杂，最终你也需要为这种类型的 mock 编写单元测试，甚至最后它可能成为了一个真实的业务系统。如果不是必须，请不要使用 fake 类型的 mock 。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> AcceptingAuthorizerFake <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(aas *AcceptingAuthorizerFake)</span> <span class="title">authorize</span><span class="params">(username, password <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">"will"</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>mock 是 spy 的一种类型，spy 又是 stub 的一种类型，而 stub 又是 dummy 的一种类型，但是 fake 与其他所有 mock 类型不同，fake 包含了真实的业务逻辑，而其他类型的 mock 都不包含真实的业务逻辑。</p><p>根据 Bob 大叔的实践来看，他使用最多的是 spy 和 stub 类型的 mock ，并且他不会经常使用 mock 工具，很少使用 dummy 类型的 mock ，只有在使用 mock 工具时才会使用 mock 类型的 mock 。现在的编程 IDE 中，只需要你定义好接口，IDE 就可以帮你轻松的实现他们，你只需要简单的修改就可以实现 spy 和 stub 类型的 mock ，因此 Bob 大叔很少使用 mock 工具。</p><h3 id="mock-的使用时机"><a href="#mock-的使用时机" class="headerlink" title="mock 的使用时机"></a>mock 的使用时机</h3><p>mock 对象是一个强大的工具，但是 mock 对象也有两面性，如果使用不正确也可能会带来强大的破坏力。</p><h4 id="完全不使用-mock"><a href="#完全不使用-mock" class="headerlink" title="完全不使用 mock"></a>完全不使用 mock</h4><p>如果我们完全不使用 mock ，直接使用真实的对象进行测试，这会带来什么问题呢？</p><ul><li>测试将会运行缓慢。我们使用真实的数据库，真实的上游服务，由于这些都需要通过网络来进行通信，这会将比程序内部的函数调用慢上几个数量级。当我们修改一行简单的代码，进行测试时，可能需要等待数分钟，数小时，甚至可能要几天才能把测试运行结束。</li><li>代码的测试覆盖率可能会降低很多。一些错误和异常在没有使用 mock 的情况下可能根本无法进行测试，例如网络协议的异常。一些危险的测试用例，比如删除文件、删除数据库表很难进行安全的测试。</li><li>测试变得异常的脆弱。与测试无关的其他问题可能会导致测试失败，例如由于机器负载导致的网络时延问题，数据库表的结构不正确，配置文件被错误修改等问题。</li></ul><p>在完全不使用 mock 对象的情况下，我们的测试会变得缓慢、不完整、脆弱。</p><h4 id="过度使用-mock"><a href="#过度使用-mock" class="headerlink" title="过度使用 mock"></a>过度使用 mock</h4><p>如果过度使用 mock 对象，所有的测试都使用 mock 对象，这会带来什么问题呢？</p><ul><li>测试将会运行缓慢。一些 mock 工具强依赖反射机制，因此会使得测试变慢。</li><li>mock 所有类之间的交互，会导致你必须创建返回其他 mock 类的 mock 类，你可能需要 mock 整个交互链路上所有的类，这将会导致你的测试异常的复杂，并且所有交互链路上的 mock 类可能都耦合在了一起，当其中一个修改时，可能会导致整个测试失败。</li><li>暴露本不需要暴露的接口。由于需要 mock 每一个类之间的交互，就需要为每一个类之间的交互创建接口，这将会导致你需要创建出许多只用于 mock 对象的接口，这是一种过度抽象和可怕的设计损坏。</li></ul><p>过度使用 mock 对象，将会使用测试变得缓慢、脆弱、复杂，并且有可能损坏你的软件设计。</p><h4 id="mock-的使用建议"><a href="#mock-的使用建议" class="headerlink" title="mock 的使用建议"></a>mock 的使用建议</h4><p><strong>在架构的重要边界使用 mock ，不要在边界内部使用 mock</strong></p><p>例如可以在数据库、web服务器等所有第三方服务的边界处使用 mock 。可以参考如下的整洁架构图：</p><p><img src="/posts/52/clean-architecture-1.jpg" alt=""></p><p>可以在最外环的边界处使用 mock 隔离外部依赖，方便测试，这样做可以得到如下的好处：</p><ul><li>测试运行速度快。</li><li>测试不会因为外部依赖的错误而失败。</li><li>更容易的模拟测试外部依赖的所有异常情况。</li><li>横跨边界的有限状态机的每条路径都可以被测试。</li><li>mock 不在需要相互耦合依赖，代码会更整洁。</li></ul><p>另一个比较大的好处是它强迫你思考找出软件的重要边界，并且为它们定义接口，这使得你的软件不会强耦合依赖于边界外的组件。因此你可以独立开发部署边界两边的组件。像这样去分离架构关注点是一个很好的软件设计原则。</p><p><strong>使用你自己的 mock</strong></p><p>mock 工具有它们自己的领域语言，在使用它们之前你必须先学习它。通过前面的 mock 类型介绍，我们已经知道用的最多的 mock 是 stub 和 spy 类型，而由于现在的 IDE 可以很方便的生成这些 mock 代码，我们只需要稍作修改就可以直接使用，所以综合来看，我们一般情况下是不需要使用 mock 工具的。</p><p>由于你自己写 mock 时不会使用反射，这将会让你的测试代码运行速度更快。如果你决定使用 mock 工具，请尽量少的使用它。</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>mock 对象既不能完全不使用，也不能过度使用。我们应该在软件的重要边界处使用 mock ，要尽量少的使用 mock 工具，使用 mock 工具时不要过度依赖它，我们应该尽量使用轻量级的 stub 和 spy 的 mock 类型，并且我们应该自己手写这些简单的 mock 类型。如果你这样做了，你会发现你的测试运行速度更快，更稳定，并且还会有更高的测试覆盖率，你的软件架构设计也会越来越好。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://blog.cleancoder.com/uncle-bob/2014/05/14/TheLittleMocker.html" target="_blank" rel="noopener">https://blog.cleancoder.com/uncle-bob/2014/05/14/TheLittleMocker.html</a></li><li><a href="https://blog.cleancoder.com/uncle-bob/2014/05/10/WhenToMock.html" target="_blank" rel="noopener">https://blog.cleancoder.com/uncle-bob/2014/05/10/WhenToMock.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
            <tag> mock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何简单的给静态博客网站用上HTTPS</title>
      <link href="/posts/51/"/>
      <url>/posts/51/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>谷歌浏览器已经把没有使用HTTPS协议的网站全部标记为不安全，为了让浏览器不把我们的网站标记为不安全，为了让访问者能更安心的浏览我们的网站，我们只能为我们的网站开启HTTPS协议支持，由于 Let’s Encrypt 可以为我们提供免费证书使用，我们就可以免费的为我们的网站申请证书，但是由于证书有效期只有3个月，当证书快过期时，我们需要重新续签。为此有不少工具能帮助我们完成自助的申请证书以及续签。但是这仍然需要不少的配置。这时一个名为 Caddy 的跨开台开源软件出现了，Caddy 能自动帮我们申请证书，当证书快过期时自动续签，只需一次配置，后续基本不需要再做其他配置，非常的方便，完全可以代替 Nginx 与 Apache 。</p><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong>去 Caddy 的 Github 发布页下载对应平台的二进制压缩包</strong></p><p><a href="https://github.com/caddyserver/caddy/releases" target="_blank" rel="noopener">https://github.com/caddyserver/caddy/releases</a></p><p><strong>解压安装</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar xf caddy_v1.0.3_linux_amd64.tar.gz</span><br><span class="line">mv caddy /usr/<span class="built_in">local</span>/bin</span><br><span class="line">caddy -version</span><br></pre></td></tr></table></figure><p><strong>配置 Caddy</strong> </p><p>把如下的配置文件写入名为 <code>Caddyfile</code> 的文件中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mgxian.dev &#123;</span><br><span class="line">    root /data/blog/mgxian</span><br><span class="line">    gzip</span><br><span class="line">    log ./access.log</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">www.mgxian.dev &#123;</span><br><span class="line">    redir https://mgxian.dev&#123;uri&#125;</span><br><span class="line">    log ./access.log</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1-5 为 mgxian.dev 域名的相关配置，指定根目录为 /data/blog/mgxian ，开启 gzip 压缩，并把访问日志记录在当前目录的 access.log 文件中。</p><p>7-10 为 <a href="http://www.mgxian.dev" target="_blank" rel="noopener">www.mgxian.dev</a> 域名的相关配置，表示当访问 <a href="http://www.mgxian.dev" target="_blank" rel="noopener">www.mgxian.dev</a> 域名的相关资源时，将会自动跳转到 mgxian.dev 域名。</p><p><strong>启动 Caddy</strong></p><p>启动 Caddy 之后会自动申请 HTTPS 的证书，并自动开启对 HTTP2 协议的支持，启动过程中可能会提示你输入邮箱接受证书相关的提醒。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">caddy -conf Caddyfile</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ol><li>在配置使用 Caddy 之前请确保 DNS 解析配置正常，请把你需要配置的域名解析到你安装配置 Caddy 机器的外网 IP 上。</li><li>如果需要申请支持通配符的证书，如为 <code>*.mgxian.dev</code> 申请证书，需要使用 DNS Challenge 的方式来申请证书，具体详细文档可参考<a href="https://caddyserver.com/docs/automatic-https#dns-challenge" target="_blank" rel="noopener"> DNS Challenge</a> 。</li><li>Caddy 不仅可以作为一个像 Apache 与 Nginx 一样的 Web Server ，也可以配置为反向代理，代理后端 Apache 与 Nginx 等应用。</li></ol><p><strong>访问测试</strong></p><p>启动完成后，使用 cURL 访问你的网站域名进行测试。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curl -I https://mgxian.dev/</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 64846</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Etag: <span class="string">"pwsec41e1a"</span></span><br><span class="line">Last-Modified: Sun, 25 Aug 2019 09:57:40 GMT</span><br><span class="line">Server: Caddy</span><br><span class="line">Date: Sun, 25 Aug 2019 09:59:27 GMT</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://github.com/caddyserver/caddy" target="_blank" rel="noopener">https://github.com/caddyserver/caddy</a></li><li><a href="https://caddyserver.com/docs" target="_blank" rel="noopener">https://caddyserver.com/docs</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> proxy </tag>
            
            <tag> caddy </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个可供参考的 git commit message 规范</title>
      <link href="/posts/50/"/>
      <url>/posts/50/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mubu.com/doc/24oUKrcwhi" target="_blank" rel="noopener">一个可供参考的 git commit message 规范</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7升级内核</title>
      <link href="/posts/49/"/>
      <url>/posts/49/</url>
      
        <content type="html"><![CDATA[<h3 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装yum源</span></span><br><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看列表</span></span><br><span class="line">yum --disablerepo=* --enablerepo=elrepo-kernel repolist</span><br><span class="line">yum --disablerepo=* --enablerepo=elrepo-kernel list kernel*</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="安装最新版本的kernel"><a href="#安装最新版本的kernel" class="headerlink" title="安装最新版本的kernel"></a>安装最新版本的kernel</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum --enablerepo=elrepo-kernel install kernel-ml-devel kernel-ml -y</span><br></pre></td></tr></table></figure><h3 id="设置为默认内核"><a href="#设置为默认内核" class="headerlink" title="设置为默认内核"></a>设置为默认内核</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置生成新的grub</span></span><br><span class="line">grub2-set-default 0</span><br><span class="line">grub2-mkconfig -o /etc/grub2.cfg</span><br></pre></td></tr></table></figure><h3 id="安装新版本工具包（可省略）"><a href="#安装新版本工具包（可省略）" class="headerlink" title="安装新版本工具包（可省略）"></a>安装新版本工具包（可省略）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 移除旧版本</span></span><br><span class="line">yum remove kernel-tools-libs.x86_64 kernel-tools.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装新版本</span></span><br><span class="line">yum --disablerepo=* --enablerepo=elrepo-kernel install -y kernel-ml-tools.x86_64</span><br></pre></td></tr></table></figure><h3 id="重启查看内核版本"><a href="#重启查看内核版本" class="headerlink" title="重启查看内核版本"></a>重启查看内核版本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启</span></span><br><span class="line">reboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看内核版本</span></span><br><span class="line">uname -sr</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://www.tecmint.com/install-upgrade-kernel-version-in-centos-7/" target="_blank" rel="noopener">https://www.tecmint.com/install-upgrade-kernel-version-in-centos-7/</a></li><li><a href="https://www.centos.bz/2017/08/upgrade-centos-7-6-kernel-to-4-12-4/" target="_blank" rel="noopener">https://www.centos.bz/2017/08/upgrade-centos-7-6-kernel-to-4-12-4/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> centos </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s使用ceph实现动态持久化存储</title>
      <link href="/posts/48/"/>
      <url>/posts/48/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文章介绍如何使用ceph为k8s提供动态申请pv的功能。ceph提供底层存储功能，cephfs方式支持k8s的pv的3种访问模式<code>ReadWriteOnce，ReadOnlyMany ，ReadWriteMany</code> ，RBD支持<code>ReadWriteOnce，ReadOnlyMany</code>两种模式<br><a id="more"></a><br>访问模式只是能力描述，并不是强制执行的，对于没有按pvc声明的方式使用pv，存储提供者应该负责访问时的运行错误。例如如果设置pvc的访问模式为<code>ReadOnlyMany</code> ，pod挂载后依然可写，如果需要真正的不可写，申请pvc是需要指定 <code>readOnly: true</code> 参数</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="部署k8s"><a href="#部署k8s" class="headerlink" title="部署k8s"></a>部署k8s</h4><p><a href="/posts/32/">centos7使用kubeadm安装k8s-1.11版本</a></p><h4 id="部署ceph"><a href="#部署ceph" class="headerlink" title="部署ceph"></a>部署ceph</h4><p><a href="/posts/47/">centos7安装ceph分布式存储集群</a></p><h3 id="在k8s集群中配置使用ceph"><a href="#在k8s集群中配置使用ceph" class="headerlink" title="在k8s集群中配置使用ceph"></a>在k8s集群中配置使用ceph</h3><h4 id="使用Ceph-RBD"><a href="#使用Ceph-RBD" class="headerlink" title="使用Ceph RBD"></a>使用Ceph RBD</h4><h5 id="使用kubeadm安装集群的额外配置"><a href="#使用kubeadm安装集群的额外配置" class="headerlink" title="使用kubeadm安装集群的额外配置"></a>使用kubeadm安装集群的额外配置</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果使用kubeadm部署的集群需要这些额外的步骤</span></span><br><span class="line"><span class="comment"># 由于使用动态存储时 controller-manager 需要使用 rbd 命令创建 image</span></span><br><span class="line"><span class="comment"># 所以 controller-manager 需要使用 rbd 命令</span></span><br><span class="line"><span class="comment"># 由于官方controller-manager镜像里没有rbd命令</span></span><br><span class="line"><span class="comment"># 如果没使用如下方式会报错无法成功创建pvc</span></span><br><span class="line"><span class="comment"># 相关 issue https://github.com/kubernetes/kubernetes/issues/38923</span></span><br><span class="line">cat &gt;external-storage-rbd-provisioner.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: rbd-provisioner</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: rbd-provisioner</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"persistentvolumes"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"delete"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"persistentvolumeclaims"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"update"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">"storage.k8s.io"</span>]</span><br><span class="line">    resources: [<span class="string">"storageclasses"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"events"</span>]</span><br><span class="line">    verbs: [<span class="string">"create"</span>, <span class="string">"update"</span>, <span class="string">"patch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"endpoints"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"update"</span>, <span class="string">"patch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"services"</span>]</span><br><span class="line">    resourceNames: [<span class="string">"kube-dns"</span>]</span><br><span class="line">    verbs: [<span class="string">"list"</span>, <span class="string">"get"</span>]</span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: rbd-provisioner</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: rbd-provisioner</span><br><span class="line">    namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: rbd-provisioner</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: Role</span><br><span class="line">metadata:</span><br><span class="line">  name: rbd-provisioner</span><br><span class="line">  namespace: kube-system</span><br><span class="line">rules:</span><br><span class="line">- apiGroups: [<span class="string">""</span>]</span><br><span class="line">  resources: [<span class="string">"secrets"</span>]</span><br><span class="line">  verbs: [<span class="string">"get"</span>]</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: RoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: rbd-provisioner</span><br><span class="line">  namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: Role</span><br><span class="line">  name: rbd-provisioner</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: rbd-provisioner</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: rbd-provisioner</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: Recreate</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: rbd-provisioner</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: rbd-provisioner</span><br><span class="line">        image: <span class="string">"quay.io/external_storage/rbd-provisioner:v2.1.1-k8s1.11"</span></span><br><span class="line">        env:</span><br><span class="line">        - name: PROVISIONER_NAME</span><br><span class="line">          value: ceph.com/rbd</span><br><span class="line">      serviceAccount: rbd-provisioner</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f external-storage-rbd-provisioner.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态 等待running之后 再进行后续的操作</span></span><br><span class="line">kubectl get pod -n kube-system</span><br></pre></td></tr></table></figure><h5 id="配置-storageclass"><a href="#配置-storageclass" class="headerlink" title="配置 storageclass"></a>配置 storageclass</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在k8s集群中所有节点安装 ceph-common</span></span><br><span class="line"><span class="comment"># 需要使用kubelet使用rdb命令map附加rbd创建的image</span></span><br><span class="line">yum install -y ceph-common</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 osd pool 在ceph的mon或者admin节点</span></span><br><span class="line">ceph osd pool create kube 4096</span><br><span class="line">ceph osd pool ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建k8s访问ceph的用户 在ceph的mon或者admin节点</span></span><br><span class="line">ceph auth get-or-create client.kube mon <span class="string">'allow r'</span> osd <span class="string">'allow class-read object_prefix rbd_children, allow rwx pool=kube'</span> -o ceph.client.kube.keyring</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看key 在ceph的mon或者admin节点</span></span><br><span class="line">ceph auth get-key client.admin</span><br><span class="line">ceph auth get-key client.kube</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 admin secret</span></span><br><span class="line"><span class="comment"># CEPH_ADMIN_SECRET 替换为 client.admin 获取到的key</span></span><br><span class="line"><span class="built_in">export</span> CEPH_ADMIN_SECRET=<span class="string">'AQBBAnRbSiSOFxAAEZXNMzYV6hsceccYLhzdWw=='</span></span><br><span class="line">kubectl create secret generic ceph-secret --<span class="built_in">type</span>=<span class="string">"kubernetes.io/rbd"</span> \</span><br><span class="line">--from-literal=key=<span class="variable">$CEPH_ADMIN_SECRET</span> \</span><br><span class="line">--namespace=kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 default 命名空间创建pvc用于访问ceph的 secret</span></span><br><span class="line"><span class="comment"># CEPH_KUBE_SECRET 替换为 client.kube 获取到的key</span></span><br><span class="line"><span class="built_in">export</span> CEPH_KUBE_SECRET=<span class="string">'AQBZK3VbTN/QOBAAIYi6CRLQcVevW5HM8lunOg=='</span></span><br><span class="line">kubectl create secret generic ceph-user-secret --<span class="built_in">type</span>=<span class="string">"kubernetes.io/rbd"</span> \</span><br><span class="line">--from-literal=key=<span class="variable">$CEPH_KUBE_SECRET</span> \</span><br><span class="line">--namespace=default</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 secret</span></span><br><span class="line">kubectl get secret ceph-user-secret -o yaml</span><br><span class="line">kubectl get secret ceph-secret -n kube-system -o yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 StorageClass</span></span><br><span class="line"><span class="comment"># 如果使用kubeadm创建的集群 provisioner 使用如下方式</span></span><br><span class="line"><span class="comment"># provisioner: ceph.com/rbd</span></span><br><span class="line">cat &gt;storageclass-ceph-rdb.yaml&lt;&lt;EOF</span><br><span class="line">kind: StorageClass</span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: dynamic-ceph-rdb</span><br><span class="line">provisioner: ceph.com/rbd</span><br><span class="line"><span class="comment"># provisioner: kubernetes.io/rbd</span></span><br><span class="line">parameters:</span><br><span class="line">  monitors: 11.11.11.111:6789,11.11.11.112:6789,11.11.11.113:6789</span><br><span class="line">  adminId: admin</span><br><span class="line">  adminSecretName: ceph-secret</span><br><span class="line">  adminSecretNamespace: kube-system</span><br><span class="line">  pool: kube</span><br><span class="line">  userId: kube</span><br><span class="line">  userSecretName: ceph-user-secret</span><br><span class="line">  fsType: ext4</span><br><span class="line">  imageFormat: <span class="string">"2"</span></span><br><span class="line">  imageFeatures: <span class="string">"layering"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl apply -f storageclass-ceph-rdb.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get sc</span><br></pre></td></tr></table></figure><h5 id="测试使用"><a href="#测试使用" class="headerlink" title="测试使用"></a>测试使用</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建pvc测试</span></span><br><span class="line">cat &gt;ceph-rdb-pvc-test.yaml&lt;&lt;EOF</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: ceph-rdb-claim</span><br><span class="line">spec:</span><br><span class="line">  accessModes:     </span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  storageClassName: dynamic-ceph-rdb</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 2Gi</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f ceph-rdb-pvc-test.yaml</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pvc</span><br><span class="line">kubectl get pv</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建 nginx pod 挂载测试</span></span><br><span class="line">cat &gt;nginx-pod.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-pod1</span><br><span class="line">  labels:</span><br><span class="line">    name: nginx-pod1</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-pod1</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    ports:</span><br><span class="line">    - name: web</span><br><span class="line">      containerPort: 80</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: ceph-rdb</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">  volumes:</span><br><span class="line">  - name: ceph-rdb</span><br><span class="line">    persistentVolumeClaim:</span><br><span class="line">      claimName: ceph-rdb-claim</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f nginx-pod.yaml</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改文件内容</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -ti nginx-pod1 -- /bin/sh -c <span class="string">'echo Hello World from Ceph RBD!!! &gt; /usr/share/nginx/html/index.html'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 访问测试</span></span><br><span class="line">POD_ID=$(kubectl get pods -o wide | grep nginx-pod1 | awk <span class="string">'&#123;print $(NF-1)&#125;'</span>)</span><br><span class="line">curl http://<span class="variable">$POD_ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f nginx-pod.yaml</span><br><span class="line">kubectl delete -f ceph-rdb-pvc-test.yaml</span><br></pre></td></tr></table></figure><h4 id="使用-CephFS"><a href="#使用-CephFS" class="headerlink" title="使用 CephFS"></a>使用 CephFS</h4><blockquote><p>linux内核需要4.10+，否则会出现无法正常使用的问题，详细issue信息 <a href="https://github.com/kubernetes-incubator/external-storage/issues/345" target="_blank" rel="noopener">https://github.com/kubernetes-incubator/external-storage/issues/345</a><br>  <a href="/posts/49/">centos7升级内核</a></p></blockquote><h5 id="在ceph集群创建CephFS"><a href="#在ceph集群创建CephFS" class="headerlink" title="在ceph集群创建CephFS"></a>在ceph集群创建CephFS</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如下操作在ceph的mon或者admin节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CephFS需要使用两个Pool来分别存储数据和元数据</span></span><br><span class="line">ceph osd pool create fs_data 128</span><br><span class="line">ceph osd pool create fs_metadata 128</span><br><span class="line">ceph osd lspools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个CephFS</span></span><br><span class="line">ceph fs new cephfs fs_metadata fs_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">ceph fs ls</span><br></pre></td></tr></table></figure><h5 id="部署cephfs-provisioner"><a href="#部署cephfs-provisioner" class="headerlink" title="部署cephfs-provisioner"></a>部署cephfs-provisioner</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方没有cephfs动态卷支持</span></span><br><span class="line"><span class="comment"># 使用社区提供的cephfs-provisioner</span></span><br><span class="line">cat &gt;external-storage-cephfs-provisioner.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: cephfs-provisioner</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">kind: ClusterRole</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: cephfs-provisioner</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"persistentvolumes"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"delete"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"persistentvolumeclaims"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"update"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">"storage.k8s.io"</span>]</span><br><span class="line">    resources: [<span class="string">"storageclasses"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"events"</span>]</span><br><span class="line">    verbs: [<span class="string">"create"</span>, <span class="string">"update"</span>, <span class="string">"patch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"endpoints"</span>]</span><br><span class="line">    verbs: [<span class="string">"get"</span>, <span class="string">"list"</span>, <span class="string">"watch"</span>, <span class="string">"create"</span>, <span class="string">"update"</span>, <span class="string">"patch"</span>]</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"secrets"</span>]</span><br><span class="line">    verbs: [<span class="string">"create"</span>, <span class="string">"get"</span>, <span class="string">"delete"</span>]</span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: cephfs-provisioner</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: cephfs-provisioner</span><br><span class="line">    namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cephfs-provisioner</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: Role</span><br><span class="line">metadata:</span><br><span class="line">  name: cephfs-provisioner</span><br><span class="line">  namespace: kube-system</span><br><span class="line">rules:</span><br><span class="line">  - apiGroups: [<span class="string">""</span>]</span><br><span class="line">    resources: [<span class="string">"secrets"</span>]</span><br><span class="line">    verbs: [<span class="string">"create"</span>, <span class="string">"get"</span>, <span class="string">"delete"</span>]</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: RoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: cephfs-provisioner</span><br><span class="line">  namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: Role</span><br><span class="line">  name: cephfs-provisioner</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: cephfs-provisioner</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: cephfs-provisioner</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: Recreate</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: cephfs-provisioner</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: cephfs-provisioner</span><br><span class="line">        image: <span class="string">"quay.io/external_storage/cephfs-provisioner:v2.0.0-k8s1.11"</span></span><br><span class="line">        env:</span><br><span class="line">        - name: PROVISIONER_NAME</span><br><span class="line">          value: ceph.com/cephfs</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - <span class="string">"/usr/local/bin/cephfs-provisioner"</span></span><br><span class="line">        args:</span><br><span class="line">        - <span class="string">"-id=cephfs-provisioner-1"</span></span><br><span class="line">      serviceAccount: cephfs-provisioner</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f external-storage-cephfs-provisioner.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态 等待running之后 再进行后续的操作</span></span><br><span class="line">kubectl get pod -n kube-system</span><br></pre></td></tr></table></figure><p>#####配置 storageclass</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看key 在ceph的mon或者admin节点</span></span><br><span class="line">ceph auth get-key client.admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 admin secret</span></span><br><span class="line"><span class="comment"># CEPH_ADMIN_SECRET 替换为 client.admin 获取到的key</span></span><br><span class="line"><span class="comment"># 如果在测试 ceph rbd 方式已经添加 可以略过此步骤</span></span><br><span class="line"><span class="built_in">export</span> CEPH_ADMIN_SECRET=<span class="string">'AQBBAnRbSiSOFxAAEZXNMzYV6hsceccYLhzdWw=='</span></span><br><span class="line">kubectl create secret generic ceph-secret --<span class="built_in">type</span>=<span class="string">"kubernetes.io/rbd"</span> \</span><br><span class="line">--from-literal=key=<span class="variable">$CEPH_ADMIN_SECRET</span> \</span><br><span class="line">--namespace=kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 secret</span></span><br><span class="line">kubectl get secret ceph-secret -n kube-system -o yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 StorageClass</span></span><br><span class="line">cat &gt;storageclass-cephfs.yaml&lt;&lt;EOF</span><br><span class="line">kind: StorageClass</span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: dynamic-cephfs</span><br><span class="line">provisioner: ceph.com/cephfs</span><br><span class="line">parameters:</span><br><span class="line">    monitors: 11.11.11.111:6789,11.11.11.112:6789,11.11.11.113:6789</span><br><span class="line">    adminId: admin</span><br><span class="line">    adminSecretName: ceph-secret</span><br><span class="line">    adminSecretNamespace: <span class="string">"kube-system"</span></span><br><span class="line">    claimRoot: /volumes/kubernetes</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl apply -f storageclass-cephfs.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get sc</span><br></pre></td></tr></table></figure><h5 id="测试使用-1"><a href="#测试使用-1" class="headerlink" title="测试使用"></a>测试使用</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建pvc测试</span></span><br><span class="line">cat &gt;cephfs-pvc-test.yaml&lt;&lt;EOF</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: cephfs-claim</span><br><span class="line">spec:</span><br><span class="line">  accessModes:     </span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  storageClassName: dynamic-cephfs</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 2Gi</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f cephfs-pvc-test.yaml</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pvc</span><br><span class="line">kubectl get pv</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建 nginx pod 挂载测试</span></span><br><span class="line">cat &gt;nginx-pod.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-pod1</span><br><span class="line">  labels:</span><br><span class="line">    name: nginx-pod1</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-pod1</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    ports:</span><br><span class="line">    - name: web</span><br><span class="line">      containerPort: 80</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: cephfs</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">  volumes:</span><br><span class="line">  - name: cephfs</span><br><span class="line">    persistentVolumeClaim:</span><br><span class="line">      claimName: cephfs-claim</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f nginx-pod.yaml</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改文件内容</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -ti nginx-pod1 -- /bin/sh -c <span class="string">'echo Hello World from CephFS!!! &gt; /usr/share/nginx/html/index.html'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 访问测试</span></span><br><span class="line">POD_ID=$(kubectl get pods -o wide | grep nginx-pod1 | awk <span class="string">'&#123;print $(NF-1)&#125;'</span>)</span><br><span class="line">curl http://<span class="variable">$POD_ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f nginx-pod.yaml</span><br><span class="line">kubectl delete -f cephfs-pvc-test.yaml</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://kubernetes.io/docs/concepts/storage/storage-classes/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/storage/storage-classes/</a></li><li><a href="https://docs.openshift.com/container-platform/3.5/install_config/storage_examples/ceph_rbd_dynamic_example.html" target="_blank" rel="noopener">https://docs.openshift.com/container-platform/3.5/install_config/storage_examples/ceph_rbd_dynamic_example.html</a></li><li><a href="https://ieevee.com/tech/2018/05/17/k8s-cephfs.html" target="_blank" rel="noopener">https://ieevee.com/tech/2018/05/17/k8s-cephfs.html</a></li><li><a href="https://github.com/kubernetes-incubator/external-storage/tree/master/ceph/rbd" target="_blank" rel="noopener">https://github.com/kubernetes-incubator/external-storage/tree/master/ceph/rbd</a></li><li><a href="https://github.com/kubernetes-incubator/external-storage/blob/master/ceph/rbd/deploy/README.md" target="_blank" rel="noopener">https://github.com/kubernetes-incubator/external-storage/blob/master/ceph/rbd/deploy/README.md</a></li><li><a href="https://github.com/heketi/heketi/blob/master/docs/admin/install-kubernetes.md" target="_blank" rel="noopener">https://github.com/heketi/heketi/blob/master/docs/admin/install-kubernetes.md</a></li><li><a href="https://github.com/gluster/gluster-kubernetes/blob/master/docs/setup-guide.md" target="_blank" rel="noopener">https://github.com/gluster/gluster-kubernetes/blob/master/docs/setup-guide.md</a></li><li><a href="https://github.com/gluster/gluster-kubernetes/blob/master/docs/examples/hello_world/README.md" target="_blank" rel="noopener">https://github.com/gluster/gluster-kubernetes/blob/master/docs/examples/hello_world/README.md</a></li><li><a href="https://jimmysong.io/kubernetes-handbook/practice/using-heketi-gluster-for-persistent-storage.html" target="_blank" rel="noopener">https://jimmysong.io/kubernetes-handbook/practice/using-heketi-gluster-for-persistent-storage.html</a></li><li><a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/storage/persistent-volumes/</a></li><li><a href="https://docs.openshift.com/enterprise/3.1/architecture/additional_concepts/storage.html#pv-access-modes" target="_blank" rel="noopener">https://docs.openshift.com/enterprise/3.1/architecture/additional_concepts/storage.html#pv-access-modes</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> storage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ceph安装配置</title>
      <link href="/posts/47/"/>
      <url>/posts/47/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>ceph是一个开源分布式存储系统，支持PB级别的存储，支持对象存储，块存储和文件存储，高性能，高可用，可扩展。<br><a id="more"></a></p><blockquote><p>部署网络建议架构图</p></blockquote><p><img src="/posts/47/ceph-network.png" alt=""></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><blockquote><p>部署架构图，本次实验部署jewel版本</p></blockquote><p><img src="/posts/47/ceph-deploy-arch.png" alt=""></p><h4 id="实验环境的Vagrantfile"><a href="#实验环境的Vagrantfile" class="headerlink" title="实验环境的Vagrantfile"></a>实验环境的<code>Vagrantfile</code></h4><blockquote><p>lab1节点既作admin节点又作node节点，lab2，lab3只作为node节点，lab4作为作测试使用ceph的节点</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">    (<span class="number">1</span>..<span class="number">4</span>).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      config.vm.define <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span> <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">        node.vm.box = <span class="string">"centos-7.4-docker-17"</span></span><br><span class="line">        node.ssh.insert_key = <span class="literal">false</span></span><br><span class="line">        node.vm.hostname = <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.network <span class="string">"private_network"</span>, <span class="symbol">ip:</span> <span class="string">"11.11.11.11<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provision <span class="string">"shell"</span>,</span><br><span class="line">          <span class="symbol">inline:</span> <span class="string">"echo hello from node <span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> <span class="params">|v|</span></span><br><span class="line">          v.cpus = <span class="number">3</span></span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, <span class="symbol">:id</span>, <span class="string">"--name"</span>, <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span>, <span class="string">"--memory"</span>, <span class="string">"3096"</span>]</span><br><span class="line">          file_to_disk = <span class="string">"lab<span class="subst">#&#123;i&#125;</span>_vdb.vdi"</span></span><br><span class="line">          <span class="keyword">unless</span> File.exist?(file_to_disk)</span><br><span class="line">            <span class="comment"># 50GB</span></span><br><span class="line">            v.customize [<span class="string">'createhd'</span>, <span class="string">'--filename'</span>, file_to_disk, <span class="string">'--size'</span>, <span class="number">50</span> * <span class="number">1024</span>]</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">          v.customize [<span class="string">'storageattach'</span>, <span class="symbol">:id</span>, <span class="string">'--storagectl'</span>, <span class="string">'IDE'</span>, <span class="string">'--port'</span>, <span class="number">1</span>, <span class="string">'--device'</span>, <span class="number">0</span>, <span class="string">'--type'</span>, <span class="string">'hdd'</span>, <span class="string">'--medium'</span>, file_to_disk]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="配置阿里ceph源"><a href="#配置阿里ceph源" class="headerlink" title="配置阿里ceph源"></a>配置阿里ceph源</h4><blockquote><p>在所有节点执行如下操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/etc/yum.repos.d/ceph.repo&lt;&lt;EOF</span><br><span class="line">[ceph]</span><br><span class="line">name=ceph</span><br><span class="line">baseurl=http://mirrors.aliyun.com/ceph/rpm-jewel/el7/x86_64/</span><br><span class="line">gpgcheck=0</span><br><span class="line">priority=1</span><br><span class="line"></span><br><span class="line">[ceph-noarch]</span><br><span class="line">name=cephnoarch</span><br><span class="line">baseurl=http://mirrors.aliyun.com/ceph/rpm-jewel/el7/noarch/</span><br><span class="line">gpgcheck=0</span><br><span class="line">priority=1</span><br><span class="line"></span><br><span class="line">[ceph-source]</span><br><span class="line">name=Ceph <span class="built_in">source</span> packages</span><br><span class="line">baseurl=http://mirrors.163.com/ceph/rpm-jewel/el7/SRPMS</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line"><span class="built_in">type</span>=rpm-md</span><br><span class="line">gpgkey=http://mirrors.163.com/ceph/keys/release.asc</span><br><span class="line">priority=1</span><br><span class="line">EOF</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><h4 id="在admin节点安装ceph-deploy"><a href="#在admin节点安装ceph-deploy" class="headerlink" title="在admin节点安装ceph-deploy"></a>在admin节点安装ceph-deploy</h4><blockquote><p>lab1 节点</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方源</span></span><br><span class="line"><span class="comment"># 如果已经配置了上面的阿里源，不需要再配置如下的源</span></span><br><span class="line"><span class="comment"># 推荐使用阿里源，因为官方源速度太慢</span></span><br><span class="line">cat &gt;/etc/yum.repos.d/ceph.repo&lt;&lt;EOF</span><br><span class="line">[ceph-noarch]</span><br><span class="line">name=Ceph noarch packages</span><br><span class="line">baseurl=https://download.ceph.com/rpm-jewel/el7/noarch</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line"><span class="built_in">type</span>=rpm-md</span><br><span class="line">gpgkey=https://download.ceph.com/keys/release.asc</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新系统软件</span></span><br><span class="line"><span class="comment"># 此操作可省略</span></span><br><span class="line"><span class="comment"># yum update -y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 ceph-deploy</span></span><br><span class="line">yum install -y ceph-deploy</span><br></pre></td></tr></table></figure><h4 id="配置admin节点连接node节点"><a href="#配置admin节点连接node节点" class="headerlink" title="配置admin节点连接node节点"></a>配置admin节点连接node节点</h4><blockquote><p> 安装之后需要配置admin节点可以ssh无密码登录每个node节点和测试节点，用户需要有sudo权限</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在每一个node节点执行</span></span><br><span class="line">useradd ceph</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'ceph'</span> | passwd --stdin ceph</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"ceph ALL = (root) NOPASSWD:ALL"</span> &gt; /etc/sudoers.d/ceph</span><br><span class="line">chmod 0440 /etc/sudoers.d/ceph</span><br><span class="line"><span class="comment"># 配置sshd可以使用password登录</span></span><br><span class="line">sed -i <span class="string">'s/PasswordAuthentication no/PasswordAuthentication yes/'</span> /etc/ssh/sshd_config</span><br><span class="line">systemctl reload sshd</span><br><span class="line"><span class="comment"># 配置sudo不需要tty</span></span><br><span class="line">sed -i <span class="string">'s/Default requiretty/#Default requiretty/'</span> /etc/sudoers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在所有节点配置hosts</span></span><br><span class="line"><span class="comment"># 包括要进行ceph测试的机器</span></span><br><span class="line"><span class="comment"># 使用vagrant实验时注意</span></span><br><span class="line"><span class="comment"># 由于vagrant会自动把主机名解析为 127.0.0.1</span></span><br><span class="line"><span class="comment"># 所以在实验时如果在ceph集群内任意一台机器进行实验时</span></span><br><span class="line"><span class="comment"># 注意把本机名解析为 127.0.0.1 的行注释，如下所示</span></span><br><span class="line"><span class="comment"># 127.0.0.1lab1lab1</span></span><br><span class="line">cat &gt;&gt;/etc/hosts&lt;&lt;EOF</span><br><span class="line">11.11.11.111 lab1</span><br><span class="line">11.11.11.112 lab2</span><br><span class="line">11.11.11.113 lab3</span><br><span class="line">11.11.11.113 lab4</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在admin节点执行</span></span><br><span class="line"><span class="comment"># 创建ceph用户，配置sshkey登录</span></span><br><span class="line"><span class="comment"># 由于lab1节点作为node节点时已经创建过ceph用户</span></span><br><span class="line"><span class="comment"># 第一条命令可能会出错，忽略即可</span></span><br><span class="line">useradd ceph</span><br><span class="line">su - ceph</span><br><span class="line">ssh-keygen</span><br><span class="line">ssh-copy-id ceph@lab1</span><br><span class="line">ssh-copy-id ceph@lab2</span><br><span class="line">ssh-copy-id ceph@lab3</span><br><span class="line">ssh-copy-id ceph@lab4</span><br></pre></td></tr></table></figure><h4 id="在admin节点创建集群"><a href="#在admin节点创建集群" class="headerlink" title="在admin节点创建集群"></a>在admin节点创建集群</h4><blockquote><p>在lab1节点执行如下操作，node的主机名一定要设置正确 lab1, lab2, lab3。否则可能会无法实验成功</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不要使用sudo也不要使用root用户运行如下的命令</span></span><br><span class="line">su - ceph</span><br><span class="line">mkdir my-cluster</span><br><span class="line"><span class="built_in">cd</span> my-cluster</span><br><span class="line"><span class="comment"># 创建lab1为monitor</span></span><br><span class="line">ceph-deploy new lab1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置文件</span></span><br><span class="line">ls -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置ceph.conf</span></span><br><span class="line">[global]</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 如果有多个网卡，应该配置如下选项，</span></span><br><span class="line"><span class="comment"># public network是公共网络，负责集群对外提供服务的流量</span></span><br><span class="line"><span class="comment"># cluster network是集群网络，负载集群中数据复制传输通信等</span></span><br><span class="line"><span class="comment"># 本次实验使用同一块网卡，生境环境建议分别使用一块网卡</span></span><br><span class="line">public network = 11.11.11.0/24</span><br><span class="line">cluster network = 11.11.11.0/24</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 ceph 包</span></span><br><span class="line"><span class="comment"># 如果按照官方文档安装方法 会重新配置安装官方ceph源</span></span><br><span class="line"><span class="comment"># 由于网络问题，安装可能会出错，需要多次执行</span></span><br><span class="line"><span class="comment"># ceph-deploy install 其实只是会安装 ceph ceph-radosgw 两个包</span></span><br><span class="line"><span class="comment"># ceph-deploy install lab1 lab2 lab3</span></span><br><span class="line"><span class="comment"># 推荐使用阿里源安装，因为使用ceph-deploy安装会很慢</span></span><br><span class="line"><span class="comment"># 使用如下命令手动安装包，替代官方的 ceph-deploy install 命令</span></span><br><span class="line"><span class="comment"># 如下操作在所有node节点上执行</span></span><br><span class="line">yum install -y ceph ceph-radosgw</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署monitor和生成keys</span></span><br><span class="line">ceph-deploy mon create-initial</span><br><span class="line">ls -l *.keyring</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制文件到node节点</span></span><br><span class="line">ceph-deploy admin lab1 lab2 lab3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署manager （luminous+）12及以后的版本需要部署</span></span><br><span class="line"><span class="comment"># 本次部署 jewel 版本 ，不需要执行如下命令</span></span><br><span class="line"><span class="comment"># ceph-deploy mgr create lab1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加osd 以磁盘方式</span></span><br><span class="line"><span class="comment"># 本次实验采用此种方法</span></span><br><span class="line"><span class="comment"># sdb 为虚拟机添加的磁盘设置名</span></span><br><span class="line">ceph-deploy osd create lab1:sdb lab2:sdb lab3:sdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在node节点创建目录</span></span><br><span class="line">rm -rf /data/osd1</span><br><span class="line">mkdir -pv /data/osd1</span><br><span class="line">chmod 777 -R /data/osd1</span><br><span class="line">chown ceph.ceph -R /data/osd1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加osd 以文件目录方式</span></span><br><span class="line">ceph-deploy osd prepare lab1:/data/osd1 lab2:/data/osd1 lab3:/data/osd1</span><br><span class="line">ceph-deploy osd activate lab1:/data/osd1 lab2:/data/osd1 lab3:/data/osd1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">ssh lab1 sudo ceph health</span><br><span class="line">ssh lab1 sudo ceph -s</span><br></pre></td></tr></table></figure><h4 id="清理集群"><a href="#清理集群" class="headerlink" title="清理集群"></a>清理集群</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果安装过程出错，使用如下命令清理之后重新开始</span></span><br><span class="line">ceph-deploy purge lab1 lab2 lab3</span><br><span class="line">ceph-deploy purgedata lab1 lab2 lab3</span><br><span class="line">ceph-deploy forgetkeys</span><br><span class="line">rm ceph.*</span><br></pre></td></tr></table></figure><h3 id="扩展集群"><a href="#扩展集群" class="headerlink" title="扩展集群"></a>扩展集群</h3><h4 id="提高可用性"><a href="#提高可用性" class="headerlink" title="提高可用性"></a>提高可用性</h4><blockquote><ul><li>在lab1上运行metadata server 为后续使用cephfs</li><li>在lab2,lab3运行monitor和manager提高集群可用性</li></ul></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为了使用CephFS，必须启动 metadata server</span></span><br><span class="line">ceph-deploy mds create lab1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加monitor</span></span><br><span class="line">ceph-deploy mon add lab2</span><br><span class="line">ceph-deploy mon add lab3</span><br><span class="line">ssh lab1 sudo ceph -s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在monitor节点查看状态（需要以root用户或者sudo查看）</span></span><br><span class="line">ceph quorum_status --format json-pretty</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加manager （luminous+）12及以后的版本需要部署</span></span><br><span class="line"><span class="comment"># 本次部署 jewel 版本 ，不需要执行如下命令</span></span><br><span class="line"><span class="comment"># ceph-deploy mgr create lab2 lab3</span></span><br></pre></td></tr></table></figure><h4 id="部署RGW使用Ceph-Object-Gateway"><a href="#部署RGW使用Ceph-Object-Gateway" class="headerlink" title="部署RGW使用Ceph Object Gateway"></a>部署RGW使用Ceph Object Gateway</h4><blockquote><p>提供S3/Swift存储功能，实现S3和Swift兼容的接口，可以使用S3或Swift的命令行工具或SDK来使用ceph<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 rgw</span></span><br><span class="line">ceph-deploy rgw create lab1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置 /etc/ceph/ceph.conf</span></span><br><span class="line"><span class="comment"># 使用 rgw 监听在 80 端口</span></span><br><span class="line"><span class="comment"># lab1 为启动 rgw 的主机名</span></span><br><span class="line">[client.rgw.lab1]</span><br><span class="line">rgw_frontends = <span class="string">"civetweb port=80"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 rgw</span></span><br><span class="line">systemctl restart ceph-radosgw@rgw.lab1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问测试</span></span><br><span class="line">curl -I http://11.11.11.111/</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="使用ceph存储"><a href="#使用ceph存储" class="headerlink" title="使用ceph存储"></a>使用ceph存储</h3><blockquote><p>应用存储使用架构图</p></blockquote><p><img src="/posts/47/ceph-use-1.jpg" alt=""></p><p><img src="/posts/47/ceph-use-2.jpg" alt=""></p><h4 id="对象存储"><a href="#对象存储" class="headerlink" title="对象存储"></a>对象存储</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装ceph</span></span><br><span class="line">yum install -y ceph</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制相关文件到要使用ceph-client的机器</span></span><br><span class="line">ceph-deploy admin lab4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="comment"># 存储文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'hello ceph oject storage'</span> &gt; testfile.txt</span><br><span class="line">ceph osd pool create mytest 8</span><br><span class="line">rados put <span class="built_in">test</span>-object-1 testfile.txt --pool=mytest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看读取文件</span></span><br><span class="line">rados -p mytest ls</span><br><span class="line">rados get <span class="built_in">test</span>-object-1 testfile.txt.1 --pool=mytest</span><br><span class="line">cat testfile.txt.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件位置</span></span><br><span class="line">ceph osd map mytest <span class="built_in">test</span>-object-1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">rados rm <span class="built_in">test</span>-object-1 --pool=mytest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除pool</span></span><br><span class="line">ceph osd pool rm mytest mytest --yes-i-really-really-mean-it</span><br></pre></td></tr></table></figure><h4 id="块存储"><a href="#块存储" class="headerlink" title="块存储"></a>块存储</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装ceph</span></span><br><span class="line">yum install -y ceph</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制相关文件到要使用ceph-client的机器</span></span><br><span class="line">ceph-deploy admin lab4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建块设备镜像</span></span><br><span class="line">rbd create foo --size 4096 --image-feature layering</span><br><span class="line">rbd info foo</span><br><span class="line">rados -p rbd ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 映射镜像到块设备</span></span><br><span class="line">sudo rbd map foo --name client.admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用块设备创建文件系统</span></span><br><span class="line">sudo mkfs.ext4 -m0 /dev/rbd/rbd/foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载使用</span></span><br><span class="line">sudo mkdir /mnt/ceph-block-device</span><br><span class="line">sudo mount /dev/rbd/rbd/foo /mnt/ceph-block-device</span><br><span class="line"><span class="built_in">cd</span> /mnt/ceph-block-device</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'hello ceph block storage'</span> &gt; testfile.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">sudo umount -lf /mnt/ceph-block-device</span><br><span class="line">sudo rbd unmap foo</span><br><span class="line">rbd remove foo</span><br><span class="line">rados -p rbd ls</span><br></pre></td></tr></table></figure><h4 id="S3对象存储"><a href="#S3对象存储" class="headerlink" title="S3对象存储"></a>S3对象存储</h4><blockquote><p>11.11.11.111 为安装了 RGW 的机器</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install -y ceph ceph-radosgw</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制相关文件到要使用ceph-client的机器</span></span><br><span class="line">ceph-deploy admin lab4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建S3所需要的pool</span></span><br><span class="line">ceph osd pool create .rgw 128 128</span><br><span class="line">ceph osd pool create .rgw.root 128 128</span><br><span class="line">ceph osd pool create .rgw.control 128 128</span><br><span class="line">ceph osd pool create .rgw.gc 128 128</span><br><span class="line">ceph osd pool create .rgw.buckets 128 128</span><br><span class="line">ceph osd pool create .rgw.buckets.index 128 128</span><br><span class="line">ceph osd pool create .rgw.buckets.extra 128 128</span><br><span class="line">ceph osd pool create .<span class="built_in">log</span> 128 128</span><br><span class="line">ceph osd pool create .intent-log 128 128</span><br><span class="line">ceph osd pool create .usage 128 128</span><br><span class="line">ceph osd pool create .users 128 128</span><br><span class="line">ceph osd pool create .users.email 128 128</span><br><span class="line">ceph osd pool create .users.swift 128 128</span><br><span class="line">ceph osd pool create .users.uid 128 128</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">rados lspools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问测试</span></span><br><span class="line">curl -I http://11.11.11.111/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建S3用户</span></span><br><span class="line"><span class="comment"># 保存如下命令返回的 user access_key secret_key</span></span><br><span class="line">radosgw-admin user create --uid=foo --display-name=foo --email=foo@foo.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建admin用户</span></span><br><span class="line">radosgw-admin user create --uid=admin --display-name=admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许admin读写users信息</span></span><br><span class="line">radosgw-admin caps add --uid=admin --caps=<span class="string">"users=*"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许admin读写所有的usage信息</span></span><br><span class="line">radosgw-admin caps add --uid=admin --caps=<span class="string">"usage=read,write"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装s3测试工具</span></span><br><span class="line">yum install -y s3cmd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置s3cmd, 只需指定Access Key和Secret Key，其他默认即可</span></span><br><span class="line">s3cmd --configure</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修该生成的配置文件</span></span><br><span class="line">vim <span class="variable">$HOME</span>/.s3cfg</span><br><span class="line">host_base = 11.11.11.111</span><br><span class="line">host_bucket = 11.11.11.111/%(bucket)</span><br><span class="line">use_https = False</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Bucket</span></span><br><span class="line">s3cmd mb s3://mybucket</span><br><span class="line">s3cmd ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传Object</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'hello ceph block storage s3'</span> &gt; hello.txt</span><br><span class="line">s3cmd put hello.txt s3://mybucket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Object</span></span><br><span class="line">s3cmd ls s3://mybucket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载Object</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">s3cmd get s3://mybucket/hello.txt</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除bucket下所有对象</span></span><br><span class="line">s3cmd del -rf s3://mybucket/</span><br><span class="line">s3cmd ls -r s3://mybucket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除Bucket</span></span><br><span class="line">s3cmd mb s3://mybucket1</span><br><span class="line">s3cmd rb s3://mybucket1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除S3用户</span></span><br><span class="line">radosgw-admin user rm --uid=foo</span><br><span class="line">radosgw-admin user rm --uid=admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除pool</span></span><br><span class="line">ceph osd pool delete .rgw .rgw --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .rgw.root .rgw.root --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .rgw.control .rgw.control --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .rgw.gc .rgw.gc --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .rgw.buckets .rgw.buckets --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .rgw.buckets.index .rgw.buckets.index --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .rgw.buckets.extra .rgw.buckets.extra --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .<span class="built_in">log</span> .<span class="built_in">log</span> --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .intent-log .intent-log --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .usage .usage --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .users .users --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .users.email .users.email --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .users.swift .users.swift --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete .users.uid .users.uid --yes-i-really-really-mean-it</span><br></pre></td></tr></table></figure><h4 id="CephFS存储"><a href="#CephFS存储" class="headerlink" title="CephFS存储"></a>CephFS存储</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装ceph</span></span><br><span class="line">yum install -y ceph ceph-fuse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制相关文件到要使用ceph-client的机器</span></span><br><span class="line">ceph-deploy admin lab4</span><br><span class="line"></span><br><span class="line"><span class="comment"># CephFS需要使用两个Pool来分别存储数据和元数据</span></span><br><span class="line">ceph osd pool create fs_data 128</span><br><span class="line">ceph osd pool create fs_metadata 128</span><br><span class="line">ceph osd lspools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个CephFS</span></span><br><span class="line">ceph fs new cephfs fs_metadata fs_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">ceph fs ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用内核提供的功能 挂载CephFS</span></span><br><span class="line"><span class="comment"># 由于可能会有bug，建议使用 4.0 以上的内核</span></span><br><span class="line"><span class="comment"># 优点是性能比使用ceph-fuse更好</span></span><br><span class="line"><span class="comment"># name，secret 为 /etc/ceph/ceph.client.admin.keyring 里的内容</span></span><br><span class="line">mkdir /mnt/mycephfs</span><br><span class="line">mount -t ceph lab1:6789,lab2:6789,lab3:6789:/ /mnt/mycephfs -o name=admin,secret=AQBoclRaiilZJBAACLjqg2OUOOB/FNa20UJXYA==</span><br><span class="line">df -h</span><br><span class="line"><span class="built_in">cd</span> /mnt/mycephfs</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'hello ceph CephFS'</span> &gt; hello.txt</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">umount -lf /mnt/mycephfs</span><br><span class="line">rm -rf /mnt/mycephfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 ceph-fuse 挂载CephFS</span></span><br><span class="line">mkdir /mnt/mycephfs</span><br><span class="line">ceph-fuse -m lab1:6789 /mnt/mycephfs</span><br><span class="line">df -h</span><br><span class="line"><span class="built_in">cd</span> /mnt/mycephfs</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'hello ceph CephFS'</span> &gt; hello.txt</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">umount -lf /mnt/mycephfs</span><br><span class="line">rm -rf /mnt/mycephfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line"><span class="comment"># 停止 metadata server</span></span><br><span class="line"><span class="comment"># 本次部署在lab1，去lab1停止服务</span></span><br><span class="line">systemctl stop ceph-mds@lab1</span><br><span class="line">ceph fs rm cephfs --yes-i-really-mean-it</span><br><span class="line">ceph osd pool delete fs_data fs_data --yes-i-really-really-mean-it</span><br><span class="line">ceph osd pool delete fs_metadata fs_metadata --yes-i-really-really-mean-it</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启 metadata server</span></span><br><span class="line"><span class="comment"># 方便以后使用 cephfs</span></span><br><span class="line">systemctl start ceph-mds@lab1</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="http://docs.ceph.com/docs/master/cephfs/best-practices/" target="_blank" rel="noopener">http://docs.ceph.com/docs/master/cephfs/best-practices/</a></li><li><a href="http://docs.ceph.com/docs/master/start/" target="_blank" rel="noopener">http://docs.ceph.com/docs/master/start/</a></li><li><a href="http://docs.ceph.org.cn/start/" target="_blank" rel="noopener">http://docs.ceph.org.cn/start/</a></li><li><a href="http://docs.ceph.com/docs/master/start/quick-rbd/" target="_blank" rel="noopener">http://docs.ceph.com/docs/master/start/quick-rbd/</a></li><li><a href="http://www.xuxiaopang.com/2016/10/13/easy-ceph-RBD/" target="_blank" rel="noopener">http://www.xuxiaopang.com/2016/10/13/easy-ceph-RBD/</a></li><li><a href="http://docs.ceph.com/docs/master/start/quick-rgw/" target="_blank" rel="noopener">http://docs.ceph.com/docs/master/start/quick-rgw/</a></li><li><a href="https://blog.frognew.com/tags/ceph.html" target="_blank" rel="noopener">https://blog.frognew.com/tags/ceph.html</a></li><li><a href="https://www.centos.bz/2017/10/%E7%94%A8ceph-deploy%E5%AE%89%E8%A3%85ceph%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%9B%86%E7%BE%A4/" target="_blank" rel="noopener">https://www.centos.bz/2017/10/%E7%94%A8ceph-deploy%E5%AE%89%E8%A3%85ceph%E5%B9%B6%E9%83%A8%E7%BD%B2%E9%9B%86%E7%BE%A4/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ceph </tag>
            
            <tag> storage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>istio-1.0微服务实验</title>
      <link href="/posts/46/"/>
      <url>/posts/46/</url>
      
        <content type="html"><![CDATA[<p>由于1.0版本和0.8版本没有改动api，可以直接使用<a href="/posts/31/">0.8版本的微服务实验</a></p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> service mesh </tag>
            
            <tag> microservice </tag>
            
            <tag> istio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s日志收集实战</title>
      <link href="/posts/45/"/>
      <url>/posts/45/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文主要介绍在k8s中收集应用的日志方案，应用运行中日志，一般情况下都需要收集存储到一个集中的日志管理系统中，可以方便对日志进行分析统计，监控，甚至用于机器学习，智能分析应用系统问题，及时修复应用所存在的问题。</p><p>在k8s集群中应用一般有如下日志输出方式</p><ul><li>直接遵循docker官方建议把日志输出到标准输出或者标准错误输出</li><li>输出日志到容器内指定目录中</li><li>应用直接发送日志给日志收集系统</li></ul><p>本文会综合部署上述日志收集方案。<br><a id="more"></a><br>日志收集组件说明</p><ul><li>elastisearch 存储收集到的日志</li><li>kibana 可视化收集到的日志</li><li>logstash 汇总处理日志发送给elastisearch 存储</li><li>filebeat 读取容器或者应用日志文件处理发送给elastisearch或者logstash，也可用于汇总日志</li><li>fluentd 读取容器或者应用日志文件处理发送给elastisearch，也可用于汇总日志</li><li>fluent-bit 读取容器或者应用日志文件处理发送给elastisearch或者fluentd</li></ul><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><blockquote><p>本次实验使用了3台虚拟机做k8s集群，每台虚拟机3G内存</p></blockquote><h4 id="部署前的准备"><a href="#部署前的准备" class="headerlink" title="部署前的准备"></a>部署前的准备</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取文件</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/mgxian/k8s-log.git</span><br><span class="line"><span class="built_in">cd</span> k8s-log</span><br><span class="line">git checkout v1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 logging namespace</span></span><br><span class="line">kubectl apply -f logging-namespace.yaml</span><br></pre></td></tr></table></figure><h4 id="部署elastisearch"><a href="#部署elastisearch" class="headerlink" title="部署elastisearch"></a>部署elastisearch</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本次部署虽然使用 StatefulSet 但是没有使用pv进行持久化数据存储</span></span><br><span class="line"><span class="comment"># pod重启之后，数据会丢失，生产环境一定要使用pv持久化存储数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f elasticsearch.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get pods,svc -n logging -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待所有pod变成running状态 </span></span><br><span class="line"><span class="comment"># 访问测试</span></span><br><span class="line"><span class="comment"># 如果测试都有数据返回代表部署成功</span></span><br><span class="line">kubectl run curl -n logging --image=radial/busyboxplus:curl -i --tty</span><br><span class="line">nslookup elasticsearch-logging</span><br><span class="line">curl <span class="string">'http://elasticsearch-logging:9200/_cluster/health?pretty'</span></span><br><span class="line">curl <span class="string">'http://elasticsearch-logging:9200/_cat/nodes'</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理测试</span></span><br><span class="line">kubectl delete deploy curl -n logging</span><br></pre></td></tr></table></figure><h4 id="部署kibana"><a href="#部署kibana" class="headerlink" title="部署kibana"></a>部署kibana</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f kibana.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get pods,svc -n logging -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问测试</span></span><br><span class="line"><span class="comment"># 浏览器访问下面输出的地址 看到 kibana 界面代表正常</span></span><br><span class="line"><span class="comment"># 11.11.11.112 为集群中某个 node 节点ip</span></span><br><span class="line">KIBANA_NODEPORT=$(kubectl get svc -n logging | grep kibana-logging | awk <span class="string">'&#123;print $(NF-1)&#125;'</span> | awk -F[:/] <span class="string">'&#123;print $2&#125;'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://11.11.11.112:<span class="variable">$KIBANA_NODEPORT</span>/"</span></span><br></pre></td></tr></table></figure><h4 id="部署fluentd收集日志"><a href="#部署fluentd收集日志" class="headerlink" title="部署fluentd收集日志"></a>部署fluentd收集日志</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fluentd 以 daemoset 方式部署</span></span><br><span class="line"><span class="comment"># 在每个节点上启动fluentd容器，收集k8s组件，docker以及容器的日志</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给每个需要启动fluentd的节点打相关label</span></span><br><span class="line"><span class="comment"># kubectl label node lab1 beta.kubernetes.io/fluentd-ds-ready=true</span></span><br><span class="line">kubectl label nodes --all beta.kubernetes.io/fluentd-ds-ready=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f fluentd-es-configmap.yaml</span><br><span class="line">kubectl apply -f fluentd-es-ds.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get pods,svc -n logging -o wide</span><br></pre></td></tr></table></figure><h4 id="kibana查看日志"><a href="#kibana查看日志" class="headerlink" title="kibana查看日志"></a>kibana查看日志</h4><blockquote><p>创建<code>index fluentd-k8s-*</code>，由于需要拉取镜像启动容器，可能需要等待几分钟才能看到索引和数据</p></blockquote><p><img src="/posts/45/k8s-log-kibana-create-index.png" alt=""></p><p><img src="/posts/45/k8s-log-kibana-create-index-2.png" alt=""></p><blockquote><p>查看日志</p></blockquote><p><img src="/posts/45/k8s-log-kibana-discover-1.png" alt=""></p><h3 id="应用日志收集测试"><a href="#应用日志收集测试" class="headerlink" title="应用日志收集测试"></a>应用日志收集测试</h3><h4 id="应用日志输出到标准输出测试"><a href="#应用日志输出到标准输出测试" class="headerlink" title="应用日志输出到标准输出测试"></a>应用日志输出到标准输出测试</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动测试日志输出</span></span><br><span class="line">kubectl run <span class="built_in">echo</span>-test --image=radial/busyboxplus:curl -- sh -c <span class="string">'count=1;while true;do echo log to stdout $count;sleep 1;count=$(($count+1));done'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令行查看日志</span></span><br><span class="line">ECHO_TEST_POD=$(kubectl get pods | grep <span class="built_in">echo</span>-test | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">kubectl logs -f <span class="variable">$ECHO_TEST_POD</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新 kibana 查看是否有新日志进入</span></span><br></pre></td></tr></table></figure><p><img src="/posts/45/k8s-log-kibana-discover-2.png" alt=""></p><h4 id="应用日志输出到容器指定目录-filebeat收集"><a href="#应用日志输出到容器指定目录-filebeat收集" class="headerlink" title="应用日志输出到容器指定目录(filebeat收集)"></a>应用日志输出到容器指定目录(filebeat收集)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f <span class="built_in">log</span>-contanier-file-filebeat.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -o wide</span><br></pre></td></tr></table></figure><blockquote><p>添加<code>index filebeat-k8s-*</code> 查看日志</p></blockquote><p><img src="/posts/45/k8s-log-kibana-discover-3.png" alt=""></p><h4 id="应用日志输出到容器指定目录-fluent-bit收集"><a href="#应用日志输出到容器指定目录-fluent-bit收集" class="headerlink" title="应用日志输出到容器指定目录(fluent-bit收集)"></a>应用日志输出到容器指定目录(fluent-bit收集)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f <span class="built_in">log</span>-contanier-file-fluentbit.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -o wide</span><br></pre></td></tr></table></figure><blockquote><p>添加<code>index fluentbit-k8s-*</code> 查看日志</p></blockquote><p><img src="/posts/45/k8s-log-kibana-discover-4.png" alt=""></p><h4 id="应用直接发送日志到日志系统"><a href="#应用直接发送日志到日志系统" class="headerlink" title="应用直接发送日志到日志系统"></a>应用直接发送日志到日志系统</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本次测试应用直接输出日志到 elasticsearch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f <span class="built_in">log</span>-contanier-es.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -o wide</span><br></pre></td></tr></table></figure><blockquote><p>添加<code>index k8s-app-*</code> 查看日志</p></blockquote><p><img src="/posts/45/k8s-log-kibana-discover-5.png" alt=""></p><h4 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f <span class="built_in">log</span>-contanier-es.yaml</span><br><span class="line">kubectl delete -f <span class="built_in">log</span>-contanier-file-fluentbit.yaml</span><br><span class="line">kubectl delete -f <span class="built_in">log</span>-contanier-file-filebeat.yaml</span><br><span class="line">kubectl delete deploy <span class="built_in">echo</span>-test</span><br></pre></td></tr></table></figure><h3 id="日志收集系统总结"><a href="#日志收集系统总结" class="headerlink" title="日志收集系统总结"></a>日志收集系统总结</h3><blockquote><p>本小节的图表以ELK技术栈展示说明，实际使用过程中可以使用EFK技术栈，使用<code>fluentd</code>代替<code>logstash</code>，使用<code>fluent-bit</code>代替<code>filebeat</code>。由于<code>fluentd</code>在内存占用和性能上有更好的优势，推荐使用<code>fluentd</code>替代<code>logstash</code> ，<code>fluent-bit</code>和<code>filebeat</code>性能和内存占用相差不大</p></blockquote><h4 id="k8s集群日志通用收集方案"><a href="#k8s集群日志通用收集方案" class="headerlink" title="k8s集群日志通用收集方案"></a>k8s集群日志通用收集方案</h4><ul><li>集群内相关组件日志使用<code>fluentd/filebeat</code>收集</li><li>应用输出到标准输出或标准错误输出的日志使用<code>fluentd/filebeat</code>收集</li><li>应用输出到容器中指定文件日志使用<code>fluent-bit/filebeat</code>收集</li></ul><h4 id="通用日志收集系统"><a href="#通用日志收集系统" class="headerlink" title="通用日志收集系统"></a>通用日志收集系统</h4><blockquote><p>通用日志收集系统架构</p></blockquote><p><img src="/posts/45/通用应用日志收集架构图.png" alt=""></p><p>架构说明</p><ul><li>日志收集与处理解耦</li><li>由于收集和处理过程间加入了队列，当日志出现暴增时，可以避免分析处理节点被打垮，给分析处理节点足够时间消化日志数据</li><li>日志分析处理节点可以动态伸缩</li></ul><h4 id="大流量日志收集系统"><a href="#大流量日志收集系统" class="headerlink" title="大流量日志收集系统"></a>大流量日志收集系统</h4><blockquote><p>大流量日志收集系统架构图</p></blockquote><p><img src="/posts/45/大流量应用日志收集架构图.png" alt=""></p><p>架构说明</p><ul><li>当日志流量过大时，如果每一个日志收集节点都直连队列写数据，由于有很多分散的连接及写请求，会给队列造成压力。如果日志都发送到logstash收集节点，再集中写入队列，会减轻队列压力。</li></ul><h4 id="应用日志收集实验-ELK技术栈"><a href="#应用日志收集实验-ELK技术栈" class="headerlink" title="应用日志收集实验(ELK技术栈)"></a>应用日志收集实验(ELK技术栈)</h4><p>以收集<code>nginx</code>日志为例，进行日志收集分析实验， 复用之前实验创建的<code>elasticsearch，kibana</code>应用。实验采用大流量日志收集架构</p><h5 id="部署redis队列"><a href="#部署redis队列" class="headerlink" title="部署redis队列"></a>部署redis队列</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f redis.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n logging</span><br></pre></td></tr></table></figure><h5 id="部署indexer分析日志"><a href="#部署indexer分析日志" class="headerlink" title="部署indexer分析日志"></a>部署indexer分析日志</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f logstash-indexer.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n logging</span><br></pre></td></tr></table></figure><h5 id="部署shipper集中日志"><a href="#部署shipper集中日志" class="headerlink" title="部署shipper集中日志"></a>部署shipper集中日志</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f logstash-shipper.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n logging</span><br></pre></td></tr></table></figure><h5 id="部署nginx测试日志收集"><a href="#部署nginx测试日志收集" class="headerlink" title="部署nginx测试日志收集"></a>部署nginx测试日志收集</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f nginx-log-filebeat.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure><h5 id="持续访问nginx生成日志"><a href="#持续访问nginx生成日志" class="headerlink" title="持续访问nginx生成日志"></a>持续访问nginx生成日志</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl run curl-test --image=radial/busyboxplus:curl -- sh -c <span class="string">'count=1;while true;do curl -s -H "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.89 Safari/537.36 $count" http://nginx-log-filebeat/ &gt;/dev/null;sleep 1;count=$(($count+1));done'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure><h5 id="访问kibana查看日志"><a href="#访问kibana查看日志" class="headerlink" title="访问kibana查看日志"></a>访问kibana查看日志</h5><blockquote><p>添加<code>index k8s-logging-elk-*</code> 由于 logstash 启动较慢，可能需要等待数分钟才能看到数据</p></blockquote><p><img src="/posts/45/k8s-log-elk-1.png" alt=""></p><h5 id="清理-1"><a href="#清理-1" class="headerlink" title="清理"></a>清理</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f redis.yaml</span><br><span class="line">kubectl delete -f logstash-indexer.yaml</span><br><span class="line">kubectl delete -f logstash-shipper.yaml</span><br><span class="line">kubectl delete -f nginx-log-filebeat.yaml</span><br><span class="line">kubectl delete deploy curl-test</span><br></pre></td></tr></table></figure><h4 id="应用日志收集实验-EFK技术栈"><a href="#应用日志收集实验-EFK技术栈" class="headerlink" title="应用日志收集实验(EFK技术栈)"></a>应用日志收集实验(EFK技术栈)</h4><p>由于fluentd官方不提供redis队列的支持，本次实验移除了redis队列。</p><h5 id="部署indexer分析日志-1"><a href="#部署indexer分析日志-1" class="headerlink" title="部署indexer分析日志"></a>部署indexer分析日志</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f fluentd-indexer.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n logging</span><br></pre></td></tr></table></figure><h5 id="部署shipper集中日志-1"><a href="#部署shipper集中日志-1" class="headerlink" title="部署shipper集中日志"></a>部署shipper集中日志</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f fluentd-shipper.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n logging</span><br></pre></td></tr></table></figure><h5 id="部署nginx测试日志收集-1"><a href="#部署nginx测试日志收集-1" class="headerlink" title="部署nginx测试日志收集"></a>部署nginx测试日志收集</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f nginx-log-fluentbit.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure><h5 id="持续访问nginx生成日志-1"><a href="#持续访问nginx生成日志-1" class="headerlink" title="持续访问nginx生成日志"></a>持续访问nginx生成日志</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl run curl-test --image=radial/busyboxplus:curl -- sh -c <span class="string">'count=1;while true;do curl -s -H "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.89 Safari/537.36 $count" http://nginx-log-fluentbit/ &gt;/dev/null;sleep 1;count=$(($count+1));done'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pod</span><br></pre></td></tr></table></figure><h5 id="访问kibana查看日志-1"><a href="#访问kibana查看日志-1" class="headerlink" title="访问kibana查看日志"></a>访问kibana查看日志</h5><blockquote><p>添加<code>index k8s-logging-efk-*</code></p></blockquote><p><img src="/posts/45/k8s-log-efk-1.png" alt=""></p><h5 id="清理-2"><a href="#清理-2" class="headerlink" title="清理"></a>清理</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f fluentd-indexer.yaml</span><br><span class="line">kubectl delete -f fluentd-shipper.yaml</span><br><span class="line">kubectl delete -f nginx-log-fluentbit.yaml</span><br><span class="line">kubectl delete deploy curl-test</span><br></pre></td></tr></table></figure><h3 id="应用日志可视化"><a href="#应用日志可视化" class="headerlink" title="应用日志可视化"></a>应用日志可视化</h3><h4 id="部署日志收集需要的组件"><a href="#部署日志收集需要的组件" class="headerlink" title="部署日志收集需要的组件"></a>部署日志收集需要的组件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署 indexer shipper fluentbit</span></span><br><span class="line">kubectl apply -f fluentd-indexer.yaml</span><br><span class="line">kubectl apply -f fluentd-shipper.yaml</span><br><span class="line">kubectl apply -f nginx-log-fluentbit.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get pods -n logging</span><br></pre></td></tr></table></figure><h4 id="模拟用户访问"><a href="#模拟用户访问" class="headerlink" title="模拟用户访问"></a>模拟用户访问</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f web-load-gen.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods</span><br></pre></td></tr></table></figure><h4 id="访问kibana查看日志-2"><a href="#访问kibana查看日志-2" class="headerlink" title="访问kibana查看日志"></a>访问kibana查看日志</h4><blockquote><p>添加<code>index k8s-logging-efk-*</code></p></blockquote><p><img src="/posts/45/k8s-log-kibana-1.png" alt=""></p><h4 id="创建图表"><a href="#创建图表" class="headerlink" title="创建图表"></a>创建图表</h4><h5 id="创建-Search"><a href="#创建-Search" class="headerlink" title="创建 Search"></a>创建 Search</h5><p>制作 Visualize 的时候需要使用</p><p>按指定条件搜索日志</p><p><img src="/posts/45/k8s-log-kibana-0.png" alt=""></p><p>保存 Search</p><p><img src="/posts/45/k8s-log-kibana-2.png" alt=""></p><h5 id="创建-Visualize"><a href="#创建-Visualize" class="headerlink" title="创建 Visualize"></a>创建 Visualize</h5><p>创建好的 Visualize 可以添加到 Dashboard 中</p><p>选择制作 Visualize</p><p><img src="/posts/45/k8s-log-kibana-3.png" alt=""></p><p>选择 Visualize 类型</p><p><img src="/posts/45/k8s-log-kibana-4.png" alt=""></p><p>选择使用上面步骤保存的 Search</p><p><img src="/posts/45/k8s-log-kibana-5.png" alt=""></p><p>选择指定的 bucket</p><p><img src="/posts/45/k8s-log-kibana-6.png" alt=""></p><p>选择 code 字段进行统计</p><p><img src="/posts/45/k8s-log-kibana-7.png" alt=""></p><p>保存 Visualize</p><p><img src="/posts/45/k8s-log-kibana-8.png" alt=""></p><p>使用如上的步骤创建多个 Visualize</p><p><img src="/posts/45/k8s-log-kibana-9.png" alt=""></p><h5 id="创建-Dashboard"><a href="#创建-Dashboard" class="headerlink" title="创建 Dashboard"></a>创建 Dashboard</h5><p>选择创建 Dashboard </p><p><img src="/posts/45/k8s-log-kibana-10.png" alt=""></p><p>把 Visualize 添加到 Dashboard</p><p><img src="/posts/45/k8s-log-kibana-11.png" alt=""></p><p>保存 Dashboard </p><p><img src="/posts/45/k8s-log-kibana-12.png" alt=""></p><p>编辑调整位置和大小</p><p><img src="/posts/45/k8s-log-kibana-13.png" alt=""></p><p>最终图表展示</p><p><img src="/posts/45/k8s-log-kibana-14.png" alt=""></p><blockquote><p>如果快速体验可以在 菜单 Managerment 的 Saved Ojects 标签直接使用导入功能，导入本次实验下载目录k8s-log下的<code>k8s-kibana-all.json</code>文件</p></blockquote><p><img src="/posts/45/k8s-log-kibana-15.png" alt=""></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://kubernetes.io/docs/concepts/cluster-administration/logging/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/cluster-administration/logging/</a></li><li><a href="https://banzaicloud.com/blog/k8s-logging/" target="_blank" rel="noopener">https://banzaicloud.com/blog/k8s-logging/</a></li><li><a href="https://docs.fluentd.org/v0.12/articles/kubernetes-fluentd" target="_blank" rel="noopener">https://docs.fluentd.org/v0.12/articles/kubernetes-fluentd</a></li><li><a href="https://jimmysong.io/kubernetes-handbook/practice/app-log-collection.html" target="_blank" rel="noopener">https://jimmysong.io/kubernetes-handbook/practice/app-log-collection.html</a></li><li><a href="https://github.com/kubernetes/kubernetes/blob/master/cluster/addons/fluentd-elasticsearch/README.md" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/blob/master/cluster/addons/fluentd-elasticsearch/README.md</a></li><li><a href="https://www.elastic.co/blog/shipping-kubernetes-logs-to-elasticsearch-with-filebeat" target="_blank" rel="noopener">https://www.elastic.co/blog/shipping-kubernetes-logs-to-elasticsearch-with-filebeat</a></li><li><a href="https://github.com/elastic/beats/blob/master/deploy/kubernetes/filebeat/README.md" target="_blank" rel="noopener">https://github.com/elastic/beats/blob/master/deploy/kubernetes/filebeat/README.md</a></li><li><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-input-docker.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-input-docker.html</a></li><li><a href="https://www.elastic.co/guide/en/beats/filebeat/current/add-kubernetes-metadata.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/beats/filebeat/current/add-kubernetes-metadata.html</a></li><li><a href="https://github.com/fluent/fluentd-kubernetes-daemonset" target="_blank" rel="noopener">https://github.com/fluent/fluentd-kubernetes-daemonset</a></li><li><a href="https://github.com/fluent/fluent-bit-kubernetes-logging" target="_blank" rel="noopener">https://github.com/fluent/fluent-bit-kubernetes-logging</a></li><li><a href="https://github.com/fluent/fluent-bit" target="_blank" rel="noopener">https://github.com/fluent/fluent-bit</a></li><li><a href="https://www.docker.elastic.co/" target="_blank" rel="noopener">https://www.docker.elastic.co/</a></li><li><a href="https://fluentbit.io/documentation/0.13/" target="_blank" rel="noopener">https://fluentbit.io/documentation/0.13/</a></li><li><a href="https://docs.fluentd.org/v1.0/articles/quickstart" target="_blank" rel="noopener">https://docs.fluentd.org/v1.0/articles/quickstart</a></li><li><a href="https://www.elastic.co/guide/en/logstash/6.3/deploying-and-scaling.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/logstash/6.3/deploying-and-scaling.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s使用openebs实现动态持久化存储</title>
      <link href="/posts/44/"/>
      <url>/posts/44/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文章介绍如何使用openebs为k8s提供动态申请pv的功能。iscsi提供底层存储功能，openebs管理iscsi。目前只支持pv的<code>ReadWriteOnce</code>访问模式</p><p>访问模式只是能力描述，并不是强制执行的，对于没有按pvc声明的方式使用pv，存储提供者应该负责访问时的运行错误。例如如果设置pvc的访问模式为<code>ReadOnlyMany</code> ，pod挂载后依然可写，如果需要真正的不可写，申请pvc是需要指定 <code>readOnly: true</code> 参数<br><a id="more"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="实验用的Vagrantfile"><a href="#实验用的Vagrantfile" class="headerlink" title="实验用的Vagrantfile"></a>实验用的Vagrantfile</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</span><br><span class="line">    (1..3).each <span class="keyword">do</span> |i|</span><br><span class="line">      config.vm.define <span class="string">"lab#&#123;i&#125;"</span> <span class="keyword">do</span> |node|</span><br><span class="line">        node.vm.box = <span class="string">"centos-7.4-docker-17"</span></span><br><span class="line">        node.ssh.insert_key = <span class="literal">false</span></span><br><span class="line">        node.vm.hostname = <span class="string">"lab#&#123;i&#125;"</span></span><br><span class="line">        node.vm.network <span class="string">"private_network"</span>, ip: <span class="string">"11.11.11.11#&#123;i&#125;"</span></span><br><span class="line">        node.vm.provision <span class="string">"shell"</span>,</span><br><span class="line">          inline: <span class="string">"echo hello from node #&#123;i&#125;"</span></span><br><span class="line">        node.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |v|</span><br><span class="line">          v.cpus = 2</span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, :id, <span class="string">"--name"</span>, <span class="string">"lab#&#123;i&#125;"</span>, <span class="string">"--memory"</span>, <span class="string">"3096"</span>]</span><br><span class="line">          file_to_disk = <span class="string">"lab#&#123;i&#125;_vdb.vdi"</span></span><br><span class="line">          unless File.exist?(file_to_disk)</span><br><span class="line">            <span class="comment"># 50GB</span></span><br><span class="line">            v.customize [<span class="string">'createhd'</span>, <span class="string">'--filename'</span>, file_to_disk, <span class="string">'--size'</span>, 50 * 1024]</span><br><span class="line">          end</span><br><span class="line">          v.customize [<span class="string">'storageattach'</span>, :id, <span class="string">'--storagectl'</span>, <span class="string">'IDE'</span>, <span class="string">'--port'</span>, 1, <span class="string">'--device'</span>, 0, <span class="string">'--type'</span>, <span class="string">'hdd'</span>, <span class="string">'--medium'</span>, file_to_disk]</span><br><span class="line">        end</span><br><span class="line">      end</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="安装配置iscsi"><a href="#安装配置iscsi" class="headerlink" title="安装配置iscsi"></a>安装配置iscsi</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 iscsi</span></span><br><span class="line">yum install iscsi-initiator-utils -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 InitiatorName 是否正常配置</span></span><br><span class="line">cat /etc/iscsi/initiatorname.iscsi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动查看状态</span></span><br><span class="line">systemctl start iscsid.service</span><br><span class="line">systemctl status iscsid.service</span><br><span class="line"></span><br><span class="line">systemctl start iscsi.service</span><br><span class="line">systemctl status iscsi.service</span><br></pre></td></tr></table></figure><h4 id="安装openebs"><a href="#安装openebs" class="headerlink" title="安装openebs"></a>安装openebs</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">mkdir openebs &amp;&amp; <span class="built_in">cd</span> openebs</span><br><span class="line">wget https://raw.githubusercontent.com/openebs/openebs/v0.6/k8s/openebs-operator.yaml</span><br><span class="line">wget https://raw.githubusercontent.com/openebs/openebs/v0.6/k8s/openebs-storageclasses.yaml</span><br><span class="line">kubectl apply -f openebs-operator.yaml</span><br><span class="line">kubectl apply -f openebs-storageclasses.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 openebs 状态</span></span><br><span class="line">kubectl get pods -n openebs -o wide</span><br><span class="line">kubectl get svc -n openebs</span><br><span class="line">kubectl get crd</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 storage class</span></span><br><span class="line">kubectl get sc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建pvc测试</span></span><br><span class="line">cat &gt;openebs-pvc-test.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line"> name: openebs1</span><br><span class="line">spec:</span><br><span class="line"> storageClassName: openebs-standard</span><br><span class="line"> accessModes:</span><br><span class="line">  - ReadWriteOnce</span><br><span class="line"> resources:</span><br><span class="line">   requests:</span><br><span class="line">     storage: 5Gi</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f openebs-pvc-test.yaml</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pvc</span><br><span class="line">kubectl get pv</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建 nginx pod 挂载测试</span></span><br><span class="line">cat &gt;nginx-pod.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-pod1</span><br><span class="line">  labels:</span><br><span class="line">    name: nginx-pod1</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-pod1</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    ports:</span><br><span class="line">    - name: web</span><br><span class="line">      containerPort: 80</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: openebs1-vol1</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">  volumes:</span><br><span class="line">  - name: openebs1-vol1</span><br><span class="line">    persistentVolumeClaim:</span><br><span class="line">      claimName: openebs1</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f nginx-pod.yaml</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改文件内容</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -ti nginx-pod1 -- /bin/sh -c <span class="string">'echo Hello World from Openebs!!! &gt; /usr/share/nginx/html/index.html'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 访问测试</span></span><br><span class="line">POD_ID=$(kubectl get pods -o wide | grep nginx-pod1 | awk <span class="string">'&#123;print $(NF-1)&#125;'</span>)</span><br><span class="line">curl http://<span class="variable">$POD_ID</span></span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://github.com/heketi/heketi/blob/master/docs/admin/install-kubernetes.md" target="_blank" rel="noopener">https://github.com/heketi/heketi/blob/master/docs/admin/install-kubernetes.md</a></li><li><a href="https://github.com/gluster/gluster-kubernetes/blob/master/docs/setup-guide.md" target="_blank" rel="noopener">https://github.com/gluster/gluster-kubernetes/blob/master/docs/setup-guide.md</a></li><li><a href="https://github.com/gluster/gluster-kubernetes/blob/master/docs/examples/hello_world/README.md" target="_blank" rel="noopener">https://github.com/gluster/gluster-kubernetes/blob/master/docs/examples/hello_world/README.md</a></li><li><a href="https://jimmysong.io/kubernetes-handbook/practice/using-heketi-gluster-for-persistent-storage.html" target="_blank" rel="noopener">https://jimmysong.io/kubernetes-handbook/practice/using-heketi-gluster-for-persistent-storage.html</a></li><li><a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/storage/persistent-volumes/</a></li><li><a href="https://docs.openshift.com/enterprise/3.1/architecture/additional_concepts/storage.html#pv-access-modes" target="_blank" rel="noopener">https://docs.openshift.com/enterprise/3.1/architecture/additional_concepts/storage.html#pv-access-modes</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> storage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s使用glusterfs实现动态持久化存储</title>
      <link href="/posts/43/"/>
      <url>/posts/43/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文章介绍如何使用glusterfs为k8s提供动态申请pv的功能。glusterfs提供底层存储功能，heketi为glusterfs提供restful风格的api，方便管理glusterfs。支持k8s的pv的3种访问模式<code>ReadWriteOnce，ReadOnlyMany ，ReadWriteMany</code> </p><p>访问模式只是能力描述，并不是强制执行的，对于没有按pvc声明的方式使用pv，存储提供者应该负责访问时的运行错误。例如如果设置pvc的访问模式为<code>ReadOnlyMany</code> ，pod挂载后依然可写，如果需要真正的不可写，申请pvc是需要指定 <code>readOnly: true</code> 参数<br><a id="more"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="实验用的Vagrantfile"><a href="#实验用的Vagrantfile" class="headerlink" title="实验用的Vagrantfile"></a>实验用的Vagrantfile</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</span><br><span class="line">    (1..3).each <span class="keyword">do</span> |i|</span><br><span class="line">      config.vm.define <span class="string">"lab#&#123;i&#125;"</span> <span class="keyword">do</span> |node|</span><br><span class="line">        node.vm.box = <span class="string">"centos-7.4-docker-17"</span></span><br><span class="line">        node.ssh.insert_key = <span class="literal">false</span></span><br><span class="line">        node.vm.hostname = <span class="string">"lab#&#123;i&#125;"</span></span><br><span class="line">        node.vm.network <span class="string">"private_network"</span>, ip: <span class="string">"11.11.11.11#&#123;i&#125;"</span></span><br><span class="line">        node.vm.provision <span class="string">"shell"</span>,</span><br><span class="line">          inline: <span class="string">"echo hello from node #&#123;i&#125;"</span></span><br><span class="line">        node.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |v|</span><br><span class="line">          v.cpus = 2</span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, :id, <span class="string">"--name"</span>, <span class="string">"lab#&#123;i&#125;"</span>, <span class="string">"--memory"</span>, <span class="string">"3096"</span>]</span><br><span class="line">          file_to_disk = <span class="string">"lab#&#123;i&#125;_vdb.vdi"</span></span><br><span class="line">          unless File.exist?(file_to_disk)</span><br><span class="line">            <span class="comment"># 50GB</span></span><br><span class="line">            v.customize [<span class="string">'createhd'</span>, <span class="string">'--filename'</span>, file_to_disk, <span class="string">'--size'</span>, 50 * 1024]</span><br><span class="line">          end</span><br><span class="line">          v.customize [<span class="string">'storageattach'</span>, :id, <span class="string">'--storagectl'</span>, <span class="string">'IDE'</span>, <span class="string">'--port'</span>, 1, <span class="string">'--device'</span>, 0, <span class="string">'--type'</span>, <span class="string">'hdd'</span>, <span class="string">'--medium'</span>, file_to_disk]</span><br><span class="line">        end</span><br><span class="line">      end</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h4 id="环境配置说明"><a href="#环境配置说明" class="headerlink" title="环境配置说明"></a>环境配置说明</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 glusterfs 每节点需要提前加载 dm_thin_pool 模块</span></span><br><span class="line">modprobe dm_thin_pool</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置开启自加载</span></span><br><span class="line">cat &gt;/etc/modules-load.d/glusterfs.conf&lt;&lt;EOF</span><br><span class="line">dm_thin_pool</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 glusterfs-fuse</span></span><br><span class="line">yum install -y glusterfs-fuse</span><br></pre></td></tr></table></figure><h4 id="安装glusterfs与heketi"><a href="#安装glusterfs与heketi" class="headerlink" title="安装glusterfs与heketi"></a>安装glusterfs与heketi</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 heketi client</span></span><br><span class="line"><span class="comment"># https://github.com/heketi/heketi/releases</span></span><br><span class="line"><span class="comment"># 去github下载相关的版本</span></span><br><span class="line">wget https://github.com/heketi/heketi/releases/download/v7.0.0/heketi-client-v7.0.0.linux.amd64.tar.gz</span><br><span class="line">tar xf heketi-client-v7.0.0.linux.amd64.tar.gz</span><br><span class="line">cp heketi-client/bin/heketi-cli /usr/<span class="built_in">local</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">heketi-cli -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如下部署步骤都在如下目录执行</span></span><br><span class="line"><span class="built_in">cd</span> heketi-client/share/heketi/kubernetes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在k8s中部署 glusterfs</span></span><br><span class="line">kubectl create -f glusterfs-daemonset.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 node 节点</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给提供存储 node 节点打 label</span></span><br><span class="line">kubectl label node lab1 lab2 lab3 storagenode=glusterfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 glusterfs 状态</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署 heketi server </span></span><br><span class="line"><span class="comment"># 配置 heketi server 的权限</span></span><br><span class="line">kubectl create -f heketi-service-account.json</span><br><span class="line">kubectl create clusterrolebinding heketi-gluster-admin --clusterrole=edit --serviceaccount=default:heketi-service-account</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 cofig secret</span></span><br><span class="line">kubectl create secret generic heketi-config-secret --from-file=./heketi.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化部署</span></span><br><span class="line">kubectl create -f heketi-bootstrap.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 heketi bootstrap 状态</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line">kubectl get svc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置端口转发 heketi server</span></span><br><span class="line">HEKETI_BOOTSTRAP_POD=$(kubectl get pods | grep deploy-heketi | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">kubectl port-forward <span class="variable">$HEKETI_BOOTSTRAP_POD</span> 58080:8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试访问</span></span><br><span class="line"><span class="comment"># 另起一终端</span></span><br><span class="line">curl http://localhost:58080/hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 glusterfs</span></span><br><span class="line"><span class="comment"># hostnames/manage 字段里必须和 kubectl get node 一致</span></span><br><span class="line"><span class="comment"># hostnames/storage 指定存储网络 ip 本次实验使用与k8s集群同一个ip</span></span><br><span class="line">cat &gt;topology.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"clusters"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"nodes"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"node"</span>: &#123;</span><br><span class="line">            <span class="string">"hostnames"</span>: &#123;</span><br><span class="line">              <span class="string">"manage"</span>: [</span><br><span class="line">                <span class="string">"lab1"</span></span><br><span class="line">              ],</span><br><span class="line">              <span class="string">"storage"</span>: [</span><br><span class="line">                <span class="string">"11.11.11.111"</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"zone"</span>: 1</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"devices"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">"name"</span>: <span class="string">"/dev/sdb"</span>,</span><br><span class="line">              <span class="string">"destroydata"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"node"</span>: &#123;</span><br><span class="line">            <span class="string">"hostnames"</span>: &#123;</span><br><span class="line">              <span class="string">"manage"</span>: [</span><br><span class="line">                <span class="string">"lab2"</span></span><br><span class="line">              ],</span><br><span class="line">              <span class="string">"storage"</span>: [</span><br><span class="line">                <span class="string">"11.11.11.112"</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"zone"</span>: 1</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"devices"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">"name"</span>: <span class="string">"/dev/sdb"</span>,</span><br><span class="line">              <span class="string">"destroydata"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"node"</span>: &#123;</span><br><span class="line">            <span class="string">"hostnames"</span>: &#123;</span><br><span class="line">              <span class="string">"manage"</span>: [</span><br><span class="line">                <span class="string">"lab3"</span></span><br><span class="line">              ],</span><br><span class="line">              <span class="string">"storage"</span>: [</span><br><span class="line">                <span class="string">"11.11.11.113"</span></span><br><span class="line">              ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"zone"</span>: 1</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"devices"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">"name"</span>: <span class="string">"/dev/sdb"</span>,</span><br><span class="line">              <span class="string">"destroydata"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="built_in">export</span> HEKETI_CLI_SERVER=http://localhost:58080</span><br><span class="line">heketi-cli topology load --json=topology.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Heketi 创建一个用于存储 Heketi 数据库的 volume</span></span><br><span class="line">heketi-cli setup-openshift-heketi-storage</span><br><span class="line">kubectl create -f heketi-storage.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line"><span class="comment"># 等所有job完成 即状态为 Completed</span></span><br><span class="line"><span class="comment"># 才能进行如下的步骤</span></span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get job</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除部署时产生的相关资源</span></span><br><span class="line">kubectl delete all,service,<span class="built_in">jobs</span>,deployment,secret --selector=<span class="string">"deploy-heketi"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署 heketi server</span></span><br><span class="line">kubectl create -f heketi-deployment.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 heketi server 状态</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line">kubectl get svc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 heketi 状态信息</span></span><br><span class="line"><span class="comment"># 配置端口转发 heketi server</span></span><br><span class="line">HEKETI_BOOTSTRAP_POD=$(kubectl get pods | grep heketi | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">kubectl port-forward <span class="variable">$HEKETI_BOOTSTRAP_POD</span> 58080:8080</span><br><span class="line"><span class="built_in">export</span> HEKETI_CLI_SERVER=http://localhost:58080</span><br><span class="line">heketi-cli cluster list</span><br><span class="line">heketi-cli volume list</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 StorageClass</span></span><br><span class="line"><span class="comment"># 由于没有开启认证</span></span><br><span class="line"><span class="comment"># restuser restuserkey 可以随意写</span></span><br><span class="line">HEKETI_SERVER=$(kubectl get svc | grep heketi | head -1 | awk <span class="string">'&#123;print $3&#125;'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$HEKETI_SERVER</span></span><br><span class="line">cat &gt;storageclass-glusterfs.yaml&lt;&lt;EOF</span><br><span class="line">kind: StorageClass</span><br><span class="line">apiVersion: storage.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: gluster-heketi</span><br><span class="line">provisioner: kubernetes.io/glusterfs</span><br><span class="line">parameters:</span><br><span class="line">  resturl: <span class="string">"http://<span class="variable">$HEKETI_SERVER</span>:8080"</span></span><br><span class="line">  restauthenabled: <span class="string">"false"</span></span><br><span class="line">  restuser: <span class="string">"will"</span></span><br><span class="line">  restuserkey: <span class="string">"will"</span></span><br><span class="line">  gidMin: <span class="string">"40000"</span></span><br><span class="line">  gidMax: <span class="string">"50000"</span></span><br><span class="line">  volumetype: <span class="string">"replicate:3"</span></span><br><span class="line">EOF</span><br><span class="line">kubectl create -f storageclass-glusterfs.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get sc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建pvc测试</span></span><br><span class="line">cat &gt;gluster-pvc-test.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line"> name: gluster1</span><br><span class="line"> annotations:</span><br><span class="line">   volume.beta.kubernetes.io/storage-class: gluster-heketi</span><br><span class="line">spec:</span><br><span class="line"> accessModes:</span><br><span class="line">  - ReadWriteOnce</span><br><span class="line"> resources:</span><br><span class="line">   requests:</span><br><span class="line">     storage: 5Gi</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f gluster-pvc-test.yaml</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pvc</span><br><span class="line">kubectl get pv</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建 nginx pod 挂载测试</span></span><br><span class="line">cat &gt;nginx-pod.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-pod1</span><br><span class="line">  labels:</span><br><span class="line">    name: nginx-pod1</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx-pod1</span><br><span class="line">    image: nginx:alpine</span><br><span class="line">    ports:</span><br><span class="line">    - name: web</span><br><span class="line">      containerPort: 80</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: gluster-vol1</span><br><span class="line">      mountPath: /usr/share/nginx/html</span><br><span class="line">  volumes:</span><br><span class="line">  - name: gluster-vol1</span><br><span class="line">    persistentVolumeClaim:</span><br><span class="line">      claimName: gluster1</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f nginx-pod.yaml</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改文件内容</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -ti nginx-pod1 -- /bin/sh -c <span class="string">'echo Hello World from GlusterFS!!! &gt; /usr/share/nginx/html/index.html'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 访问测试</span></span><br><span class="line">POD_ID=$(kubectl get pods -o wide | grep nginx-pod1 | awk <span class="string">'&#123;print $(NF-1)&#125;'</span>)</span><br><span class="line">curl http://<span class="variable">$POD_ID</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># node 节点查看文件内容</span></span><br><span class="line">GLUSTERFS_POD=$(kubectl get pod | grep glusterfs | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">kubectl <span class="built_in">exec</span> -ti <span class="variable">$GLUSTERFS_POD</span> /bin/sh</span><br><span class="line">mount | grep heketi</span><br><span class="line">cat /var/lib/heketi/mounts/vg_56033aa8a9131e84faa61a6f4774d8c3/brick_1ac5f3a0730457cf3fcec6d881e132a2/brick/index.html</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://github.com/heketi/heketi/blob/master/docs/admin/install-kubernetes.md" target="_blank" rel="noopener">https://github.com/heketi/heketi/blob/master/docs/admin/install-kubernetes.md</a></li><li><a href="https://github.com/gluster/gluster-kubernetes/blob/master/docs/setup-guide.md" target="_blank" rel="noopener">https://github.com/gluster/gluster-kubernetes/blob/master/docs/setup-guide.md</a></li><li><a href="https://github.com/gluster/gluster-kubernetes/blob/master/docs/examples/hello_world/README.md" target="_blank" rel="noopener">https://github.com/gluster/gluster-kubernetes/blob/master/docs/examples/hello_world/README.md</a></li><li><a href="https://jimmysong.io/kubernetes-handbook/practice/using-heketi-gluster-for-persistent-storage.html" target="_blank" rel="noopener">https://jimmysong.io/kubernetes-handbook/practice/using-heketi-gluster-for-persistent-storage.html</a></li><li><a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/storage/persistent-volumes/</a></li><li><a href="https://docs.openshift.com/enterprise/3.1/architecture/additional_concepts/storage.html#pv-access-modes" target="_blank" rel="noopener">https://docs.openshift.com/enterprise/3.1/architecture/additional_concepts/storage.html#pv-access-modes</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> storage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s全栈监控</title>
      <link href="/posts/42/"/>
      <url>/posts/42/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h4 id="整体概括"><a href="#整体概括" class="headerlink" title="整体概括"></a>整体概括</h4><p>本文章主要介绍如何全面监控k8s</p><ul><li>使用metric-server收集数据给k8s集群内使用，如kubectl,hpa,scheduler等</li><li>使用prometheus-operator部署prometheus，存储监控数据</li><li>使用kube-state-metrics收集k8s集群内资源对象数据</li><li>使用node_exporter收集集群中各节点的数据</li><li>使用prometheus收集apiserver，scheduler，controller-manager，kubelet组件数据</li><li>使用alertmanager实现监控报警</li><li>使用grafana实现数据可视化<a id="more"></a></li></ul><h4 id="prometheus-operator简介"><a href="#prometheus-operator简介" class="headerlink" title="prometheus-operator简介"></a>prometheus-operator简介</h4><p>prometheus-operator是一个整合prometheus和operator的项目，prometheus是一个集数据收集存储，数据查询，数据图表显示于一身的开源监控组件。operator是由coreos开源一套在k8s上管理应用的软件，通过operator可以方便的实现部署，扩容，删除应用等功能。</p><p>prometheus-operator利用k8s的CustomResourceDefinitions功能实现了只需要像写原生kubectl支持的yaml文件一样，轻松收集应用数据，配置报警规则等，包含如下CRDs ：</p><ul><li>Prometheus 用于部署Prometheus 实例</li><li>ServiceMonitor 用于配置数据收集，创建之后会根据DNS自动发现并收集数据</li><li>PrometheusRule 用于配置Prometheus 规则，处理规整数据和配置报警规则</li><li>Alertmanager 用于部署报警实例</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h4><blockquote><p>收集kube-controller-manager，kube-scheduler数据，需要配置组件监听0.0.0.0地址</p></blockquote><p>二进制安装启动时添加如下参数 –address=0.0.0.0</p><p>如果使用kubeadm启动的集群，初始化时加入如下参数<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  address: 0.0.0.0</span><br><span class="line">schedulerExtraArgs:</span><br><span class="line">  address: 0.0.0.0</span><br></pre></td></tr></table></figure></p><p>如果是已经启动之后的集群，可以使用如下命令修改<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -e <span class="string">"s/- --address=127.0.0.1/- --address=0.0.0.0/"</span> -i /etc/kubernetes/manifests/kube-controller-manager.yaml</span><br><span class="line">sed -e <span class="string">"s/- --address=127.0.0.1/- --address=0.0.0.0/"</span> -i /etc/kubernetes/manifests/kube-scheduler.yaml</span><br></pre></td></tr></table></figure></p><blockquote><p>收集kubelet相关数据时需要配置kubelet使用如下认证方式。使用kubeadm默认情况下已经开启</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--authentication-token-webhook=<span class="literal">true</span></span><br><span class="line">--authorization-mode=Webhook</span><br></pre></td></tr></table></figure><h4 id="部署metric-server"><a href="#部署metric-server" class="headerlink" title="部署metric-server"></a>部署metric-server</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">mkdir k8s-monitor &amp;&amp; <span class="built_in">cd</span> k8s-monitor</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/kubernetes-incubator/metrics-server.git</span><br><span class="line"><span class="built_in">cd</span> metrics-server &amp;&amp; git checkout v0.2.1 &amp;&amp; <span class="built_in">cd</span> ../</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置（当前版本有bug）</span></span><br><span class="line">sed -ri <span class="string">'s@gcr.io/google_containers/metrics-server-amd64:(.*)@mirrorgooglecontainers/metrics-server-amd64:\1@g'</span> metrics-server/deploy/1.8+/metrics-server-deployment.yaml</span><br><span class="line">sed -ri <span class="string">'s@--source=kubernetes.summary_api:.*@--source=kubernetes.summary_api:https://kubernetes.default?kubeletHttps=true\&amp;kubeletPort=10250\&amp;insecure=true@'</span> metrics-server/deploy/1.8+/metrics-server-deployment.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl create -f metrics-server/deploy/1.8+/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试获取数据</span></span><br><span class="line"><span class="comment"># 由于采集数据间隔为1分钟</span></span><br><span class="line"><span class="comment"># 等待数分钟后查看数据</span></span><br><span class="line">NODE=$(kubectl get nodes | grep <span class="string">'Ready'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">METRIC_SERVER_POD=$(kubectl get pods -n kube-system | grep <span class="string">'metrics-server'</span> | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">kubectl get --raw /apis/metrics.k8s.io/v1beta1/nodes</span><br><span class="line">kubectl get --raw /apis/metrics.k8s.io/v1beta1/pods</span><br><span class="line">kubectl get --raw /apis/metrics.k8s.io/v1beta1/nodes/<span class="variable">$NODE</span></span><br><span class="line"></span><br><span class="line">kubectl top node <span class="variable">$NODE</span></span><br><span class="line">kubectl top pod <span class="variable">$METRIC_SERVER_POD</span> -n kube-system</span><br></pre></td></tr></table></figure><h4 id="下载相关部署文件"><a href="#下载相关部署文件" class="headerlink" title="下载相关部署文件"></a>下载相关部署文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/mgxian/k8s-monitor.git</span><br><span class="line"><span class="built_in">cd</span> k8s-monitor</span><br></pre></td></tr></table></figure><h4 id="部署prometheus-operator"><a href="#部署prometheus-operator" class="headerlink" title="部署prometheus-operator"></a>部署prometheus-operator</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 namespace</span></span><br><span class="line">kubectl apply -f monitoring-namespace.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f prometheus-operator.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n monitoring</span><br><span class="line">kubectl get svc -n monitoring</span><br><span class="line">kubectl get crd</span><br></pre></td></tr></table></figure><h4 id="部署k8s组件服务"><a href="#部署k8s组件服务" class="headerlink" title="部署k8s组件服务"></a>部署k8s组件服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f kube-k8s-service.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get svc -n kube-system</span><br></pre></td></tr></table></figure><h4 id="部署node-exporter"><a href="#部署node-exporter" class="headerlink" title="部署node_exporter"></a>部署node_exporter</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f node_exporter.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n monitoring</span><br><span class="line">kubectl get svc -n monitoring</span><br></pre></td></tr></table></figure><h4 id="部署kube-state-metrics"><a href="#部署kube-state-metrics" class="headerlink" title="部署kube-state-metrics"></a>部署kube-state-metrics</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f kube-state-metrics.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n monitoring</span><br><span class="line">kubectl get svc -n monitoring</span><br></pre></td></tr></table></figure><h4 id="部署prometheus"><a href="#部署prometheus" class="headerlink" title="部署prometheus"></a>部署prometheus</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f prometheus.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n monitoring</span><br><span class="line">kubectl get svc -n monitoring</span><br></pre></td></tr></table></figure><h4 id="配置数据收集"><a href="#配置数据收集" class="headerlink" title="配置数据收集"></a>配置数据收集</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f kube-servicemonitor.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get servicemonitors -n monitoring</span><br></pre></td></tr></table></figure><h4 id="查看prometheus中的数据"><a href="#查看prometheus中的数据" class="headerlink" title="查看prometheus中的数据"></a>查看prometheus中的数据</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 nodeport</span></span><br><span class="line">kubectl get svc -n monitoring | grep prometheus-k8s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取访问链接</span></span><br><span class="line"><span class="comment"># 11.11.11.111 为其中一个node ip</span></span><br><span class="line">NODE_IP=<span class="string">'11.11.11.112'</span></span><br><span class="line">PROMETHEUS_NODEPORT=$(kubectl get svc -n monitoring | grep prometheus-k8s | awk <span class="string">'&#123;print $(NF-1)&#125;'</span> | cut -d <span class="string">':'</span> -f 2 | cut -d <span class="string">'/'</span> -f 1)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$NODE_IP</span>:<span class="variable">$PROMETHEUS_NODEPORT</span>/"</span></span><br></pre></td></tr></table></figure><blockquote><p> prometheus主页</p></blockquote><p><img src="/posts/42/k8s-monitor-prometheus-1.png" alt=""></p><blockquote><p>生成图表<br>container_network_receive_bytes_total{namespace=”monitoring”, name=~”.<em>prometheus.</em>“}</p></blockquote><p><img src="/posts/42/k8s-monitor-prometheus-2.png" alt=""></p><blockquote><p>查看收集数据的端点</p></blockquote><p><img src="/posts/42/k8s-monitor-prometheus-3.png" alt=""></p><blockquote><p>查看数据收集服务发现</p></blockquote><p><img src="/posts/42/k8s-monitor-prometheus-4.png" alt=""></p><h4 id="部署grafana"><a href="#部署grafana" class="headerlink" title="部署grafana"></a>部署grafana</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f grafana.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n monitoring</span><br><span class="line">kubectl get svc -n monitoring</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 nodeport</span></span><br><span class="line">kubectl get svc -n monitoring | grep grafana</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取访问链接</span></span><br><span class="line"><span class="comment"># 11.11.11.111 为其中一个node ip</span></span><br><span class="line">NODE_IP=<span class="string">'11.11.11.112'</span></span><br><span class="line">GRAFANA_NODEPORT=$(kubectl get svc -n monitoring | grep grafana | awk <span class="string">'&#123;print $(NF-1)&#125;'</span> | cut -d <span class="string">':'</span> -f 2 | cut -d <span class="string">'/'</span> -f 1)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$NODE_IP</span>:<span class="variable">$GRAFANA_NODEPORT</span>/"</span></span><br></pre></td></tr></table></figure><h4 id="部署alertmanager"><a href="#部署alertmanager" class="headerlink" title="部署alertmanager"></a>部署alertmanager</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f alertmanager.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n monitoring</span><br><span class="line">kubectl get svc -n monitoring</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 nodeport</span></span><br><span class="line">kubectl get svc -n monitoring | grep alertmanager-main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取访问链接</span></span><br><span class="line"><span class="comment"># 11.11.11.111 为其中一个node ip</span></span><br><span class="line">NODE_IP=<span class="string">'11.11.11.112'</span></span><br><span class="line">ALERTMANAGER_MAIN_NODEPORT=$(kubectl get svc -n monitoring | grep alertmanager-main | awk <span class="string">'&#123;print $(NF-1)&#125;'</span> | cut -d <span class="string">':'</span> -f 2 | cut -d <span class="string">'/'</span> -f 1)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$NODE_IP</span>:<span class="variable">$ALERTMANAGER_MAIN_NODEPORT</span>/"</span></span><br></pre></td></tr></table></figure><h4 id="查看图表"><a href="#查看图表" class="headerlink" title="查看图表"></a>查看图表</h4><blockquote><p>集群状态</p></blockquote><p><img src="/posts/42/k8s-monitor-grafana-1.png" alt=""></p><blockquote><p>集群状态以命名空间视角</p></blockquote><p><img src="/posts/42/k8s-monitor-grafana-2.png" alt=""></p><blockquote><p>POD状态</p></blockquote><p><img src="/posts/42/k8s-monitor-grafana-3.png" alt=""></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://github.com/coreos/prometheus-operator" target="_blank" rel="noopener">https://github.com/coreos/prometheus-operator</a></li><li><a href="https://github.com/coreos/prometheus-operator/blob/master/Documentation/user-guides/cluster-monitoring.md" target="_blank" rel="noopener">https://github.com/coreos/prometheus-operator/blob/master/Documentation/user-guides/cluster-monitoring.md</a></li><li><a href="https://github.com/coreos/prometheus-operator/tree/master/contrib/kube-prometheus" target="_blank" rel="noopener">https://github.com/coreos/prometheus-operator/tree/master/contrib/kube-prometheus</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> monitor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重构手法</title>
      <link href="/posts/41/"/>
      <url>/posts/41/</url>
      
        <content type="html"><![CDATA[<p>重构 改善既有代码的设计<br><a id="more"></a><br><img src="/posts/41/重构手法.png" alt="重构手法"></p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 重构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>helm安装配置</title>
      <link href="/posts/40/"/>
      <url>/posts/40/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>helm是kubernetes的包管理工具，用于简化部署和管理 Kubernetes 应用。用来管理charts——预先配置好的安装包资源。<br><a id="more"></a><br>Helm和charts的主要作用：</p><ul><li>应用程序封装</li><li>版本管理</li><li>依赖检查</li><li>便于应用程序分发</li></ul><p>helm是一个C/S框架的软件，helm相当于一个客户端，tiller是一个服务端</p><ul><li>Helm CLI 是 Helm 客户端，可以在本地执行</li><li>Tiller 是服务器端组件，在 Kubernetes 群集上运行，并管理 Kubernetes 应用程序的生命周期</li><li>Repository 是 Chart 仓库，Helm客户端通过HTTP协议来访问仓库中Chart的索引文件和压缩包</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>安装之前需要先配置好<code>kubeconfig</code>，<code>kubectl</code>可以正常使用就表示<code>kubeconfig</code>已经配置正确，也可以通过环境变量<code>KUBECONFIG</code>指定helm使用的<code>kubeconfig</code></p></blockquote><h4 id="安装helm"><a href="#安装helm" class="headerlink" title="安装helm"></a>安装helm</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如下地址下载helm二进制文件 </span></span><br><span class="line"><span class="comment"># 解压之后放在自己的PATH路径下</span></span><br><span class="line"><span class="comment"># https://github.com/helm/helm/releases</span></span><br><span class="line">mkdir -pv helm &amp;&amp; <span class="built_in">cd</span> helm</span><br><span class="line">wget https://storage.googleapis.com/kubernetes-helm/helm-v2.9.1-linux-amd64.tar.gz</span><br><span class="line">tar xf helm-v2.9.1-linux-amd64.tar.gz</span><br><span class="line">sudo mv linux-amd64/helm /usr/<span class="built_in">local</span>/bin</span><br><span class="line">rm -rf linux-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本，不显示出server版本，因为还没有安装server</span></span><br><span class="line">helm version</span><br></pre></td></tr></table></figure><h4 id="简单安装tiller-本次实验采用"><a href="#简单安装tiller-本次实验采用" class="headerlink" title="简单安装tiller(本次实验采用)"></a>简单安装tiller(本次实验采用)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署 tiller</span></span><br><span class="line">helm init --upgrade -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.9.1 \</span><br><span class="line">--stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n kube-system -l app=helm</span><br><span class="line">kubectl get svc -n kube-system -l app=helm</span><br></pre></td></tr></table></figure><h4 id="安全性更高的安装tiller-tls"><a href="#安全性更高的安装tiller-tls" class="headerlink" title="安全性更高的安装tiller(tls)"></a>安全性更高的安装tiller(tls)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">helm init --upgrade -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.9.1 \</span><br><span class="line">--stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts \</span><br><span class="line">--tiller-tls \</span><br><span class="line">--tiller-tls-verify \</span><br><span class="line">--tiller-tls-cert=cert.pem \</span><br><span class="line">--tiller-tls-key=key.pem \</span><br><span class="line">--tls-ca-cert=ca.pem \</span><br><span class="line">--service-account=tiller</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他命令都需要使用 tls</span></span><br><span class="line"><span class="comment"># --tls</span></span><br></pre></td></tr></table></figure><h4 id="配置rbac"><a href="#配置rbac" class="headerlink" title="配置rbac"></a>配置rbac</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;helm-rbac-config.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: tiller</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: tiller</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: tiller</span><br><span class="line">    namespace: kube-system</span><br><span class="line">EOF</span><br><span class="line">kubectl create -f helm-rbac-config.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置tiller使用创建的ServiceAccount</span></span><br><span class="line">kubectl patch deploy --namespace kube-system tiller-deploy -p <span class="string">'&#123;"spec":&#123;"template":&#123;"spec":&#123;"serviceAccount":"tiller"&#125;&#125;&#125;&#125;'</span></span><br></pre></td></tr></table></figure><h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看pod启动情况</span></span><br><span class="line">kubectl get pod -n kube-system -l app=helm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看版本，显示出server版本</span></span><br><span class="line">helm version</span><br></pre></td></tr></table></figure><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><h4 id="查看可用charts"><a href="#查看可用charts" class="headerlink" title="查看可用charts"></a>查看可用charts</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新charts列表</span></span><br><span class="line">helm repo update </span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索可用charts</span></span><br><span class="line">helm search</span><br><span class="line">helm search mysql</span><br></pre></td></tr></table></figure><h4 id="查看已经安装的charts"><a href="#查看已经安装的charts" class="headerlink" title="查看已经安装的charts"></a>查看已经安装的charts</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">helm list</span><br><span class="line"><span class="comment"># helm ls</span></span><br></pre></td></tr></table></figure><h4 id="安装测试"><a href="#安装测试" class="headerlink" title="安装测试"></a>安装测试</h4><blockquote><p>以下两种部署方式任选一种</p></blockquote><h5 id="使用命令行模式部署"><a href="#使用命令行模式部署" class="headerlink" title="使用命令行模式部署"></a>使用命令行模式部署</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用命令行模式部署</span></span><br><span class="line">helm install -n mariadb-test \</span><br><span class="line">--<span class="built_in">set</span> persistence.enabled=<span class="literal">false</span>,mariadbRootPassword=will,mariadbUser=will,mariadbPassword=will,mariadbDatabase=will \</span><br><span class="line">stable/mariadb</span><br></pre></td></tr></table></figure><h5 id="使用配置文件定制部署"><a href="#使用配置文件定制部署" class="headerlink" title="使用配置文件定制部署"></a>使用配置文件定制部署</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用配置文件方式部署</span></span><br><span class="line"><span class="comment"># 查看可配置项</span></span><br><span class="line">helm inspect values stable/mariadb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有可配置项（去行空行和注释）</span></span><br><span class="line">helm inspect values stable/mariadb | egrep -v <span class="string">'^\s*#|^$'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">cat &gt;config.yml&lt;&lt;EOF</span><br><span class="line">usePassword: <span class="literal">true</span></span><br><span class="line">mariadbRootPassword: will</span><br><span class="line">mariadbUser: will</span><br><span class="line">mariadbPassword: will</span><br><span class="line">mariadbDatabase: will</span><br><span class="line">persistence:</span><br><span class="line">  enabled: <span class="literal">false</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">helm install -n mariadb-test -f config.yml stable/mariadb</span><br></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">helm ls</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接测试</span></span><br><span class="line">kubectl run mariadb-cli --image=bitnami/mariadb:10.1.28-r1 -i --tty bash</span><br><span class="line">mysql -hmariadb-test-mariadb -uwill -pwill will</span><br><span class="line">show databases;</span><br><span class="line">select version();</span><br><span class="line">select user();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 mariadb-cli</span></span><br><span class="line">kubectl delete deploy mariadb-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除部署</span></span><br><span class="line">helm delete mariadb-test --purge</span><br></pre></td></tr></table></figure><h3 id="自定义chart"><a href="#自定义chart" class="headerlink" title="自定义chart"></a>自定义chart</h3><h4 id="创建chart"><a href="#创建chart" class="headerlink" title="创建chart"></a>创建chart</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建</span></span><br><span class="line">helm create hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># chart目录结构介绍</span></span><br><span class="line">hello</span><br><span class="line">├── charts <span class="comment"># 本chart依赖的chart</span></span><br><span class="line">├── Chart.yaml <span class="comment"># 描述chart的基本信息，如名称版本等</span></span><br><span class="line">├── templates <span class="comment"># kubernetes manifest文件模板目录</span></span><br><span class="line">│   ├── deployment.yaml</span><br><span class="line">│   ├── _helpers.tpl</span><br><span class="line">│   ├── ingress.yaml</span><br><span class="line">│   ├── NOTES.txt <span class="comment"># 纯文本文件，可在其中填写chart的使用说明</span></span><br><span class="line">│   └── service.yaml</span><br><span class="line">└── values.yaml <span class="comment"># chart配置的默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对chart的模板和配置进行测试</span></span><br><span class="line">helm install --dry-run --debug ./</span><br></pre></td></tr></table></figure><h4 id="测试安装chart"><a href="#测试安装chart" class="headerlink" title="测试安装chart"></a>测试安装chart</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">helm install -n hello-test ./</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">helm ls</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口转发</span></span><br><span class="line"><span class="built_in">export</span> POD_NAME=$(kubectl get pods --namespace default -l <span class="string">"app=hello,release=hello-test"</span> -o jsonpath=<span class="string">"&#123;.items[0].metadata.name&#125;"</span>)</span><br><span class="line">kubectl port-forward <span class="variable">$POD_NAME</span> 8080:80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">curl http://127.0.0.1:8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">helm delete hello-test --purge</span><br></pre></td></tr></table></figure><h4 id="chart分发"><a href="#chart分发" class="headerlink" title="chart分发"></a>chart分发</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包为压缩包</span></span><br><span class="line">helm package ./</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://blog.frognew.com/2017/12/its-time-to-use-helm.html" target="_blank" rel="noopener">https://blog.frognew.com/2017/12/its-time-to-use-helm.html</a></li><li><a href="https://jimmysong.io/posts/manage-kubernetes-native-app-with-helm/" target="_blank" rel="noopener">https://jimmysong.io/posts/manage-kubernetes-native-app-with-helm/</a></li><li><a href="https://yq.aliyun.com/articles/159601" target="_blank" rel="noopener">https://yq.aliyun.com/articles/159601</a></li><li><a href="https://docs.helm.sh/" target="_blank" rel="noopener">https://docs.helm.sh/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> helm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>istio-1.0安装测试</title>
      <link href="/posts/39/"/>
      <url>/posts/39/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>istio</code>是一个<code>service mesh</code>开源实现，由Google/IBM/Lyft共同开发。架构图如下：</p><p><img src="/posts/39/istio-arch.png" alt="istio-arch"><br><a id="more"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装k8s集群"><a href="#安装k8s集群" class="headerlink" title="安装k8s集群"></a>安装k8s集群</h4><p><a href="/posts/32/">参考文章</a></p><h4 id="安装istioctl"><a href="#安装istioctl" class="headerlink" title="安装istioctl"></a>安装<code>istioctl</code></h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本次实验时使用 vagrant 用户登录 具有 sudo 权限</span></span><br><span class="line"><span class="comment"># vagrant 用户配置了连接管理 k8s 集群</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去下面的地址下载压缩包</span></span><br><span class="line"><span class="comment"># https://github.com/istio/istio/releases</span></span><br><span class="line">wget https://github.com/istio/istio/releases/download/1.0.0/istio-1.0.0-linux.tar.gz</span><br><span class="line">tar xf istio-1.0.0-linux.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装配置环境变量</span></span><br><span class="line">sudo mv istio-1.0.0 /usr/<span class="built_in">local</span>/</span><br><span class="line">sudo ln -sv /usr/<span class="built_in">local</span>/istio-1.0.0 /usr/<span class="built_in">local</span>/istio</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH=/usr/local/istio/bin:$PATH'</span> | sudo tee /etc/profile.d/istio.sh</span><br><span class="line"><span class="built_in">source</span> /etc/profile.d/istio.sh</span><br><span class="line">istioctl version</span><br></pre></td></tr></table></figure><h4 id="在k8s集群中安装istio"><a href="#在k8s集群中安装istio" class="headerlink" title="在k8s集群中安装istio"></a>在k8s集群中安装istio</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果环境不是云环境，不支持LoadBalancer</span></span><br><span class="line"><span class="comment"># 作如下修改，使得 ingressgateway 监听在80和443端口</span></span><br><span class="line"><span class="comment"># 修改使用主机端口映射</span></span><br><span class="line"><span class="comment"># 使用此修改版本之后，每台机器只能运行单个实例</span></span><br><span class="line"><span class="comment"># 大概在3027行左右</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/istio</span><br><span class="line">sudo cp install/kubernetes/istio-demo.yaml install/kubernetes/istio-demo.yaml.ori</span><br><span class="line">sudo vim install/kubernetes/istio-demo.yaml</span><br><span class="line">...</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line"><span class="comment"># kind: Deployment</span></span><br><span class="line"><span class="comment"># 使用DaemonSet部署方式</span></span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: istio-ingressgateway</span><br><span class="line">  namespace: istio-system</span><br><span class="line">  labels:</span><br><span class="line">    app: ingressgateway</span><br><span class="line">    chart: gateways-1.0.0</span><br><span class="line">    release: RELEASE-NAME</span><br><span class="line">    heritage: Tiller</span><br><span class="line">    app: istio-ingressgateway</span><br><span class="line">    istio: ingressgateway</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment"># DaemonSet不支持replicas</span></span><br><span class="line">  <span class="comment"># replicas: 1</span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: istio-ingressgateway</span><br><span class="line">        istio: ingressgateway</span><br><span class="line">      annotations:</span><br><span class="line">        sidecar.istio.io/inject: <span class="string">"false"</span></span><br><span class="line">        scheduler.alpha.kubernetes.io/critical-pod: <span class="string">""</span></span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: istio-ingressgateway-service-account</span><br><span class="line">      containers:</span><br><span class="line">        - name: ingressgateway</span><br><span class="line">          image: <span class="string">"gcr.io/istio-release/proxyv2:1.0.0"</span></span><br><span class="line">          imagePullPolicy: IfNotPresent</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 80</span><br><span class="line">              <span class="comment"># 主机80端口映射</span></span><br><span class="line">              hostPort: 80</span><br><span class="line">            - containerPort: 443</span><br><span class="line">              <span class="comment"># 主机443端口映射</span></span><br><span class="line">              hostPort: 443</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换镜像地址</span></span><br><span class="line">sudo sed -i <span class="string">'s@gcr.io/istio-release@docker.io/istio@g'</span> install/kubernetes/istio-demo.yaml</span><br><span class="line">sudo sed -i <span class="string">'s@quay.io/coreos/hyperkube:v1.7.6_coreos.0@registry.cn-shanghai.aliyuncs.com/gcr-k8s/hyperkube:v1.7.6_coreos.0@g'</span> install/kubernetes/istio-demo.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像地址</span></span><br><span class="line">grep <span class="string">'image:'</span> install/kubernetes/istio-demo.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 CRDs</span></span><br><span class="line"><span class="comment"># 等待数秒</span></span><br><span class="line">kubectl apply -f install/kubernetes/helm/istio/templates/crds.yaml -n istio-system</span><br><span class="line">kubectl get crd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装不使用认证（不使用tls）</span></span><br><span class="line"><span class="comment"># 如果机器内存过小会无法成功启动</span></span><br><span class="line"><span class="comment"># 实验使用3台虚拟机每台3G内存</span></span><br><span class="line">kubectl apply -f install/kubernetes/istio-demo.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get svc -n istio-system</span><br><span class="line">kubectl get pods -n istio-system</span><br></pre></td></tr></table></figure><blockquote><p>注意</p><p><code>istio-1.0.0</code> 默认已经开启了自动注入功能以及其他日志监控和追踪的相关组件如</p><ul><li>istio-tracing</li><li>istio-telemetry</li><li>grafana</li><li>prometheus</li><li>servicegraph</li></ul></blockquote><h3 id="启用自动注入-sidecar"><a href="#启用自动注入-sidecar" class="headerlink" title="启用自动注入 sidecar"></a>启用自动注入 sidecar</h3><ul><li><p>不开启自动注入部署应用需要使用如下方式的命令<br><code>kubectl apply -f &lt;(istioctl kube-inject -f samples/bookinfo/kube/bookinfo.yaml)</code></p></li><li><p>开启自动注入后，使用正常命令即可部署应用<br><code>kubectl apply -f samples/bookinfo/kube/bookinfo.yaml</code></p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># istio-1.0.0 默认已经开启了自动注入功能</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># k8s 1.9 及之后的版本才能使用自动注入功能</span></span><br><span class="line"><span class="comment"># 查看是否支持</span></span><br><span class="line">kubectl api-versions | grep admissionregistration</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除了要满足以上条件外还需要检查kube-apiserver启动的参数</span></span><br><span class="line"><span class="comment"># k8s 1.9 版本要确保 --admission-control 里有 MutatingAdmissionWebhook,ValidatingAdmissionWebhook</span></span><br><span class="line"><span class="comment"># k8s 1.9 之后的版本要确保 --enable-admission-plugins 里有MutatingAdmissionWebhook,ValidatingAdmissionWebhook</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试自动注入</span></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl apply -f samples/sleep/sleep.yaml </span><br><span class="line">kubectl get deployment -o wide</span><br><span class="line">kubectl get pod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 default namespace 开启自动注入</span></span><br><span class="line">kubectl label namespace default istio-injection=enabled</span><br><span class="line">kubectl get namespace -L istio-injection</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除创建的pod，等待重建</span></span><br><span class="line">kubectl delete pod $(kubectl get pod | grep sleep | cut -d <span class="string">' '</span> -f 1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看重建后的pod</span></span><br><span class="line"><span class="comment"># 查看是否有istio-proxy容器</span></span><br><span class="line">kubectl get pod</span><br><span class="line">kubectl describe pod $(kubectl get pod | grep sleep | cut -d <span class="string">' '</span> -f 1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f samples/sleep/sleep.yaml </span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭自动注入</span></span><br><span class="line">kubectl label namespace default istio-injection-</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭部分pod的自动注入功能</span></span><br><span class="line">...</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      annotations:</span><br><span class="line">        sidecar.istio.io/inject: <span class="string">"false"</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="部署官方测试用例"><a href="#部署官方测试用例" class="headerlink" title="部署官方测试用例"></a>部署官方测试用例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># default开启自动注入</span></span><br><span class="line">kubectl label namespace default istio-injection=enabled</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署 bookinfo</span></span><br><span class="line">kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 gateway</span></span><br><span class="line">kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get services</span><br><span class="line">kubectl get pods</span><br><span class="line">istioctl get gateway</span><br></pre></td></tr></table></figure><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令行访问测试</span></span><br><span class="line"><span class="built_in">export</span> INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=<span class="string">'&#123;.spec.ports[?(@.name=="http2")].nodePort&#125;'</span>)</span><br><span class="line">NODE_NAME=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">NODE_IP=$(ping -c 1 <span class="variable">$NODE_NAME</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">export</span> GATEWAY_URL=<span class="variable">$NODE_IP</span>:<span class="variable">$INGRESS_PORT</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$GATEWAY_URL</span></span><br><span class="line"></span><br><span class="line">curl -o /dev/null -s -w <span class="string">"%&#123;http_code&#125;\n"</span> http://<span class="variable">$&#123;GATEWAY_URL&#125;</span>/productpage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问测试</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$&#123;GATEWAY_URL&#125;</span>/productpage"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用daemonset方式部署可以使用如下方式访问</span></span><br><span class="line"><span class="comment"># 11.11.11.112为其中一个node节点的ip</span></span><br><span class="line">curl http://11.11.11.112/productpage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">samples/bookinfo/platform/kube/cleanup.sh</span><br></pre></td></tr></table></figure><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理istio</span></span><br><span class="line">kubectl delete -f install/kubernetes/helm/istio/templates/crds.yaml -n istio-system</span><br><span class="line">kubectl delete -f install/kubernetes/istio-demo.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl delete -f install/kubernetes/istio-demo-auth.yaml</span></span><br></pre></td></tr></table></figure><h3 id="使用helm安装istio"><a href="#使用helm安装istio" class="headerlink" title="使用helm安装istio"></a>使用helm安装istio</h3><h4 id="安装helm"><a href="#安装helm" class="headerlink" title="安装helm"></a>安装helm</h4><p><a href="/posts/40/">参考文章</a></p><h4 id="安装istio"><a href="#安装istio" class="headerlink" title="安装istio"></a>安装istio</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看配置</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/istio</span><br><span class="line">egrep -v <span class="string">"^$|#"</span> install/kubernetes/helm/istio/values.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 CRDs</span></span><br><span class="line">kubectl apply -f install/kubernetes/helm/istio/templates/crds.yaml</span><br><span class="line">kubectl get crd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据上面查看的配置和需求配置相关参数</span></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">helm install install/kubernetes/helm/istio --name istio --namespace istio-system \</span><br><span class="line">--<span class="built_in">set</span> ingress.enabled=<span class="literal">false</span> \</span><br><span class="line">--<span class="built_in">set</span> global.hub=<span class="string">"docker.io/istio"</span> \</span><br><span class="line">--<span class="built_in">set</span> global.hyperkube.hub=<span class="string">"registry.cn-shanghai.aliyuncs.com/gcr-k8s"</span> \</span><br><span class="line">--<span class="built_in">set</span> gateways.istio-ingressgateway.type=NodePort \</span><br><span class="line">--<span class="built_in">set</span> gateways.istio-egressgateway.type=NodePort</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">helm ls</span><br><span class="line">kubectl get pods -n istio-system</span><br><span class="line">kubectl get svc -n istio-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行之前的测试</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">helm delete --purge istio</span><br><span class="line">kubectl delete -f install/kubernetes/helm/istio/templates/crds.yaml -n istio-system</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://istio.io/docs/setup/kubernetes/quick-start.html" target="_blank" rel="noopener">https://istio.io/docs/setup/kubernetes/quick-start.html</a></li><li><a href="https://istio.io/docs/guides/bookinfo.html" target="_blank" rel="noopener">https://istio.io/docs/guides/bookinfo.html</a></li><li><a href="https://istio.io/docs/setup/kubernetes/sidecar-injection.html#automatic-sidecar-injection" target="_blank" rel="noopener">https://istio.io/docs/setup/kubernetes/sidecar-injection.html#automatic-sidecar-injection</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> istio </tag>
            
            <tag> servicemesh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s使用kube-router构建高可用可扩展ingress</title>
      <link href="/posts/38/"/>
      <url>/posts/38/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>使用<code>kube-router</code>实现k8s集群的<code>ingress</code>功能，高可用易扩展<br><a id="more"></a></p><h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p>本实验在已经安装配置好k8s集群基础之上进行实验，k8s安装参考博客其他文章。lab4作为一个路由器，转发lab5的请求</p><h4 id="实验架构"><a href="#实验架构" class="headerlink" title="实验架构"></a>实验架构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lab1: master 11.11.11.111</span><br><span class="line">lab2: node 11.11.11.112</span><br><span class="line">lab3: node 11.11.11.113</span><br><span class="line">lab4: router 11.11.11.114</span><br><span class="line">lab5: client 11.11.11.115</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本次实验重新创建了集群，使用之前测试其他网络插件的集群环境没有成功</span></span><br><span class="line"><span class="comment"># 可能是由于环境干扰，实验时需要注意</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建kube-router目录下载相关文件</span></span><br><span class="line">mkdir kube-router &amp;&amp; <span class="built_in">cd</span> kube-router</span><br><span class="line">rm -f generic-kuberouter-all-features-dsr.yaml</span><br><span class="line">wget https://raw.githubusercontent.com/mgxian/kube-router/master/generic-kuberouter-all-features-dsr.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用pod网络通信，网络隔离策略，服务代理所有功能</span></span><br><span class="line"><span class="comment"># CLUSTERCIDR kube-controller-manager 启动参数 --cluster-cidr 的值</span></span><br><span class="line"><span class="comment"># APISERVER kube-apiserver 启动参数 --advertise-address 值</span></span><br><span class="line">CLUSTERCIDR=<span class="string">'10.244.0.0/16'</span></span><br><span class="line">APISERVER=<span class="string">'https://11.11.11.111:6443'</span></span><br><span class="line">sed -i <span class="string">"s;%APISERVER%;<span class="variable">$APISERVER</span>;g"</span> generic-kuberouter-all-features-dsr.yaml</span><br><span class="line">sed -i <span class="string">"s;%CLUSTERCIDR%;<span class="variable">$CLUSTERCIDR</span>;g"</span> generic-kuberouter-all-features-dsr.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line">      containers:</span><br><span class="line">      - name: kube-router</span><br><span class="line">        image: cloudnativelabs/kube-router</span><br><span class="line">        imagePullPolicy: Always</span><br><span class="line">        args:</span><br><span class="line">        ...</span><br><span class="line">        - --peer-router-ips=11.11.11.114</span><br><span class="line">        - --peer-router-asns=64513</span><br><span class="line">        - --cluster-asn=64512</span><br><span class="line">        - --advertise-external-ip=<span class="literal">true</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f generic-kuberouter-all-features-dsr.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除kube-proxy</span></span><br><span class="line">kubectl -n kube-system delete ds kube-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个节点上执行</span></span><br><span class="line"><span class="comment"># 如果是二进制安装使用如下命令</span></span><br><span class="line">systemctl stop kube-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个节点上执行</span></span><br><span class="line"><span class="comment"># 清理kube-proxy留下的规则</span></span><br><span class="line">docker run --privileged --net=host registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64:v1.10.2 kube-proxy --cleanup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get svc -n kube-system</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试之前请先安装配置好kube-dns或者coredns</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动用于测试的deployment</span></span><br><span class="line">kubectl run nginx --replicas=2 --image=nginx:alpine --port=80</span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --name=example-service-nodeport</span><br><span class="line">kubectl expose deployment nginx --name=example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line">kubectl get svc -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># dns及访问测试</span></span><br><span class="line">kubectl run curl --image=radial/busyboxplus:curl -i --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br></pre></td></tr></table></figure><h3 id="在lab4配置quagga"><a href="#在lab4配置quagga" class="headerlink" title="在lab4配置quagga"></a>在lab4配置quagga</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install -y quagga</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">cat &gt;/etc/quagga/bgpd.conf&lt;&lt;EOF</span><br><span class="line">! -*- bgp -*-</span><br><span class="line">!</span><br><span class="line">! BGPd sample configuratin file</span><br><span class="line">!</span><br><span class="line">! <span class="variable">$Id</span>: bgpd.conf.sample,v 1.1 2002/12/13 20:15:29 paul Exp $</span><br><span class="line">!</span><br><span class="line">hostname lab4</span><br><span class="line">password password</span><br><span class="line">!</span><br><span class="line">router bgp 64513</span><br><span class="line">  bgp router-id 11.11.11.114</span><br><span class="line">  maximum-paths 4</span><br><span class="line">  neighbor 11.11.11.111 remote-as 64512</span><br><span class="line">  neighbor 11.11.11.112 remote-as 64512</span><br><span class="line">  neighbor 11.11.11.113 remote-as 64512</span><br><span class="line"><span class="built_in">log</span> stdout</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start bgpd</span><br><span class="line">systemctl status bgpd</span><br><span class="line">systemctl <span class="built_in">enable</span> bgpd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看路由信息</span></span><br><span class="line">ip route</span><br></pre></td></tr></table></figure><h3 id="在lab4测试"><a href="#在lab4测试" class="headerlink" title="在lab4测试"></a>在lab4测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在lab1上修改 example-service 配置 external ip</span></span><br><span class="line">kubectl edit svc example-service</span><br><span class="line">...</span><br><span class="line">spec:</span><br><span class="line">  clusterIP: 10.111.34.147</span><br><span class="line">  externalIPs:</span><br><span class="line">  - 11.11.111.111</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在lab1上查看svc信息</span></span><br><span class="line"><span class="comment"># 可以看到 example-service 有了 external ip</span></span><br><span class="line">kubectl get svc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看lab4路由</span></span><br><span class="line"><span class="comment"># 可以看到有 11.11.111.111 相关的路由</span></span><br><span class="line">ip route</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在lab4上访问测试</span></span><br><span class="line">curl 11.11.111.111</span><br></pre></td></tr></table></figure><h3 id="在lab5测试"><a href="#在lab5测试" class="headerlink" title="在lab5测试"></a>在lab5测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在lab5添加路由</span></span><br><span class="line">ip route add 11.11.111.111 via 11.11.11.114</span><br><span class="line">ip route</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在lab5访问测试</span></span><br><span class="line">curl 11.11.111.111</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在lab1查看ipvs</span></span><br><span class="line">ipvsadm -L -n</span><br></pre></td></tr></table></figure><h3 id="使用DSR"><a href="#使用DSR" class="headerlink" title="使用DSR"></a>使用DSR</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DSR实验没有成功，实验环境是vagrant配合virtualbox</span></span><br><span class="line"><span class="comment"># 在lab1设置 example-service 使用 DSR 模式</span></span><br><span class="line"><span class="comment"># 服务的响应直接发送到客户端不经过lvs中转</span></span><br><span class="line">kubectl annotate svc example-service <span class="string">"kube-router.io/service.dsr=tunnel"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在lab1查看ipvs</span></span><br><span class="line"><span class="comment"># 可以看到 Tunnel 转发类型</span></span><br><span class="line">ipvsadm -L -n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在lab5访问测试</span></span><br><span class="line">curl 11.11.111.111</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在集群中的节点抓包分析</span></span><br><span class="line">tcpdump -i kube-bridge proto 4</span><br></pre></td></tr></table></figure><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete svc example-service example-service-nodeport</span><br><span class="line">kubectl delete deploy nginx curl</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://cloudnativelabs.github.io/post/2017-11-01-kube-high-available-ingress/" target="_blank" rel="noopener">https://cloudnativelabs.github.io/post/2017-11-01-kube-high-available-ingress/</a></li><li><a href="https://github.com/cloudnativelabs/kube-router/blob/master/docs/generic.md" target="_blank" rel="noopener">https://github.com/cloudnativelabs/kube-router/blob/master/docs/generic.md</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s使用kube-router暴露集群中的pod和svc到外部</title>
      <link href="/posts/37/"/>
      <url>/posts/37/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>使用<code>kube-router</code>把k8s集群中的<code>pod ip</code>和<code>cluter i</code>暴露集群外部，实现集群外的节点直接访问k8s的pod和svc</p><a id="more"></a><h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p>本实验在已经安装配置好k8s集群基础之上进行实验，k8s安装参考博客其他文章。</p><h4 id="实验架构"><a href="#实验架构" class="headerlink" title="实验架构"></a>实验架构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lab1: master 11.11.11.111</span><br><span class="line">lab2: node 11.11.11.112</span><br><span class="line">lab3: node 11.11.11.113</span><br><span class="line">lab4: external 11.11.11.114</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本次实验重新创建了集群，使用之前测试其他网络插件的集群环境没有成功</span></span><br><span class="line"><span class="comment"># 可能是由于环境干扰，实验时需要注意</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建kube-router目录下载相关文件</span></span><br><span class="line">mkdir kube-router &amp;&amp; <span class="built_in">cd</span> kube-router</span><br><span class="line">rm -f generic-kuberouter-all-features.yaml</span><br><span class="line">wget https://raw.githubusercontent.com/cloudnativelabs/kube-router/master/daemonset/generic-kuberouter-all-features-advertise-routes.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用pod网络通信，网络隔离策略，服务代理所有功能</span></span><br><span class="line"><span class="comment"># CLUSTERCIDR kube-controller-manager 启动参数 --cluster-cidr 的值</span></span><br><span class="line"><span class="comment"># APISERVER kube-apiserver 启动参数 --advertise-address 值</span></span><br><span class="line">CLUSTERCIDR=<span class="string">'10.244.0.0/16'</span></span><br><span class="line">APISERVER=<span class="string">'https://11.11.11.111:6443'</span></span><br><span class="line">sed -i <span class="string">"s;%APISERVER%;<span class="variable">$APISERVER</span>;g"</span> generic-kuberouter-all-features-advertise-routes.yaml</span><br><span class="line">sed -i <span class="string">"s;%CLUSTERCIDR%;<span class="variable">$CLUSTERCIDR</span>;g"</span> generic-kuberouter-all-features-advertise-routes.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line">      containers:</span><br><span class="line">      - name: kube-router</span><br><span class="line">        image: cloudnativelabs/kube-router</span><br><span class="line">        imagePullPolicy: Always</span><br><span class="line">        args:</span><br><span class="line">        ...</span><br><span class="line">        - <span class="string">"--peer-router-ips=11.11.11.114"</span></span><br><span class="line">        - <span class="string">"--peer-router-asns=64513"</span></span><br><span class="line">        - <span class="string">"--cluster-asn=64512"</span></span><br><span class="line">        - <span class="string">"--advertise-cluster-ip=true"</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f generic-kuberouter-all-features-advertise-routes.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除kube-proxy</span></span><br><span class="line">kubectl -n kube-system delete ds kube-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个节点上执行</span></span><br><span class="line"><span class="comment"># 如果是二进制安装使用如下命令</span></span><br><span class="line">systemctl stop kube-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个节点上执行</span></span><br><span class="line"><span class="comment"># 清理kube-proxy留下的规则</span></span><br><span class="line">docker run --privileged --net=host registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64:v1.10.2 kube-proxy --cleanup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get svc -n kube-system</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试之前请先安装配置好kube-dns或者coredns</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动用于测试的deployment</span></span><br><span class="line">kubectl run nginx --replicas=2 --image=nginx:alpine --port=80</span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --name=example-service-nodeport</span><br><span class="line">kubectl expose deployment nginx --name=example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line">kubectl get svc -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># dns及访问测试</span></span><br><span class="line">kubectl run curl --image=radial/busyboxplus:curl -i --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br></pre></td></tr></table></figure><h3 id="在lab4配置quagga"><a href="#在lab4配置quagga" class="headerlink" title="在lab4配置quagga"></a>在lab4配置quagga</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install -y quagga</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">cat &gt;/etc/quagga/bgpd.conf&lt;&lt;EOF</span><br><span class="line">! -*- bgp -*-</span><br><span class="line">!</span><br><span class="line">! BGPd sample configuratin file</span><br><span class="line">!</span><br><span class="line">! <span class="variable">$Id</span>: bgpd.conf.sample,v 1.1 2002/12/13 20:15:29 paul Exp $</span><br><span class="line">!</span><br><span class="line">hostname lab4</span><br><span class="line">password zebra</span><br><span class="line">!</span><br><span class="line">router bgp 64513</span><br><span class="line">  bgp router-id 11.11.11.114</span><br><span class="line">  neighbor 11.11.11.111 remote-as 64512</span><br><span class="line">  neighbor 11.11.11.112 remote-as 64512</span><br><span class="line">  neighbor 11.11.11.113 remote-as 64512</span><br><span class="line"><span class="built_in">log</span> stdout</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start bgpd</span><br><span class="line">systemctl status bgpd</span><br><span class="line">systemctl <span class="built_in">enable</span> bgpd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看路由信息</span></span><br><span class="line">ip route</span><br></pre></td></tr></table></figure><h3 id="在lab4测试访问k8s集群中的pod和svc"><a href="#在lab4测试访问k8s集群中的pod和svc" class="headerlink" title="在lab4测试访问k8s集群中的pod和svc"></a>在lab4测试访问k8s集群中的pod和svc</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在lab1上获取pod和svc信息</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line">kubectl get svc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在lab4上访问</span></span><br><span class="line"><span class="comment"># 10.244.2.11 其中一个 nginx pod 的ip</span></span><br><span class="line"><span class="comment"># 10.106.123.190 为 example-service 的 cluster ip</span></span><br><span class="line">curl 10.244.2.11</span><br><span class="line">curl 10.106.123.190</span><br></pre></td></tr></table></figure><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete svc example-service example-service-nodeport</span><br><span class="line">kubectl delete deploy nginx curl</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://cloudnativelabs.github.io/post/2017-05-22-kube-pod-networking/" target="_blank" rel="noopener">https://cloudnativelabs.github.io/post/2017-05-22-kube-pod-networking/</a></li><li><a href="https://github.com/cloudnativelabs/kube-router/blob/master/docs/generic.md" target="_blank" rel="noopener">https://github.com/cloudnativelabs/kube-router/blob/master/docs/generic.md</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s使用kube-router网络组件并实现网络隔离</title>
      <link href="/posts/36/"/>
      <url>/posts/36/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文章主要介绍k8s如何使用<code>kube-router</code>实现pod通信，服务代理，网络策略隔离等功能</p><p><code>kube-router</code>是一个新的k8s的网络插件，使用<code>lvs</code>做服务的代理及负载均衡，使用<code>iptables</code>来做网络的隔离策略。部署简单，只需要在每个节点部署一个daemonset即可，高性能，易维护。支持pod间通信，以及服务的代理。<br><a id="more"></a></p><h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p>本实验在已经安装配置好k8s集群基础之上进行实验，k8s安装参考博客其他文章。</p><h4 id="实验架构"><a href="#实验架构" class="headerlink" title="实验架构"></a>实验架构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lab1: master 11.11.11.111</span><br><span class="line">lab2: node 11.11.11.112</span><br><span class="line">lab3: node 11.11.11.113</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本次实验重新创建了集群，使用之前测试其他网络插件的集群环境没有成功</span></span><br><span class="line"><span class="comment"># 可能是由于环境干扰，实验时需要注意</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建kube-router目录下载相关文件</span></span><br><span class="line">mkdir kube-router &amp;&amp; <span class="built_in">cd</span> kube-router</span><br><span class="line">rm -f generic-kuberouter-all-features.yaml</span><br><span class="line">wget https://raw.githubusercontent.com/cloudnativelabs/kube-router/master/daemonset/generic-kuberouter-all-features.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用pod网络通信，网络隔离策略，服务代理所有功能</span></span><br><span class="line"><span class="comment"># CLUSTERCIDR kube-controller-manager 启动参数 --cluster-cidr 的值</span></span><br><span class="line"><span class="comment"># APISERVER kube-apiserver 启动参数 --advertise-address 值</span></span><br><span class="line">CLUSTERCIDR=<span class="string">'10.244.0.0/16'</span></span><br><span class="line">APISERVER=<span class="string">'https://11.11.11.111:6443'</span></span><br><span class="line">sed -i <span class="string">"s;%APISERVER%;<span class="variable">$APISERVER</span>;g"</span> generic-kuberouter-all-features.yaml</span><br><span class="line">sed -i <span class="string">"s;%CLUSTERCIDR%;<span class="variable">$CLUSTERCIDR</span>;g"</span> generic-kuberouter-all-features.yaml</span><br><span class="line">kubectl apply -f generic-kuberouter-all-features.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除kube-proxy</span></span><br><span class="line">kubectl -n kube-system delete ds kube-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个节点上执行</span></span><br><span class="line"><span class="comment"># 如果是二进制安装使用如下命令</span></span><br><span class="line">systemctl stop kube-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个节点上执行</span></span><br><span class="line"><span class="comment"># 清理kube-proxy留下的规则</span></span><br><span class="line">docker run --privileged --net=host registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64:v1.10.2 kube-proxy --cleanup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get svc -n kube-system</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试之前请先安装配置好kube-dns或者coredns</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动用于测试的deployment</span></span><br><span class="line">kubectl run nginx --replicas=2 --image=nginx:alpine --port=80</span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --name=example-service-nodeport</span><br><span class="line">kubectl expose deployment nginx --name=example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line">kubectl get svc -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># dns及访问测试</span></span><br><span class="line">kubectl run curl --image=radial/busyboxplus:curl -i --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete svc example-service example-service-nodeport</span><br><span class="line">kubectl delete deploy nginx curl</span><br></pre></td></tr></table></figure><h3 id="网络隔离策略"><a href="#网络隔离策略" class="headerlink" title="网络隔离策略"></a>网络隔离策略</h3><h4 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 production staging 命名空间</span></span><br><span class="line">kubectl create namespace production</span><br><span class="line">kubectl create namespace staging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个命名空间各部署一套服务</span></span><br><span class="line"><span class="built_in">cd</span> kube-router</span><br><span class="line">wget https://raw.githubusercontent.com/mgxian/istio-test/master/service/node/v1/node-v1.yml</span><br><span class="line">wget https://raw.githubusercontent.com/mgxian/istio-test/master/service/go/v1/go-v1.yml</span><br><span class="line">kubectl apply -f node-v1.yml -n production</span><br><span class="line">kubectl apply -f go-v1.yml -n production</span><br><span class="line">kubectl apply -f node-v1.yml -n staging</span><br><span class="line">kubectl apply -f go-v1.yml -n staging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get pods --all-namespaces -o wide</span><br></pre></td></tr></table></figure><h4 id="测试pod通信"><a href="#测试pod通信" class="headerlink" title="测试pod通信"></a>测试pod通信</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取相关POD信息</span></span><br><span class="line">PRODUCTION_NODE_NAME=$(kubectl get pods -n production | grep Running | grep service-node | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">STAGING_NODE_NAME=$(kubectl get pods -n staging | grep Running | grep service-node | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">PRODUCTION_GO_IP=$(kubectl get pods -n production -o wide | grep Running | grep service-go | awk <span class="string">'&#123;print $6&#125;'</span>)</span><br><span class="line">STAGING_GO_IP=$(kubectl get pods -n staging -o wide | grep Running | grep service-go | awk <span class="string">'&#123;print $6&#125;'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PRODUCTION_NODE_NAME</span> <span class="variable">$PRODUCTION_GO_IP</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$STAGING_NODE_NAME</span> <span class="variable">$STAGING_GO_IP</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同namespace的pod通信</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$PRODUCTION_NODE_NAME</span> --namespace=production -- ping -c4 <span class="variable">$PRODUCTION_GO_IP</span> </span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$STAGING_NODE_NAME</span> --namespace=staging -- ping -c4 <span class="variable">$STAGING_GO_IP</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同namespace的pod通信</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$PRODUCTION_NODE_NAME</span> --namespace=production -- ping -c4 <span class="variable">$STAGING_GO_IP</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$STAGING_NODE_NAME</span> --namespace=staging -- ping -c4 <span class="variable">$PRODUCTION_GO_IP</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结论：任何namespace的任何pod间都可以直接通信</span></span><br></pre></td></tr></table></figure><h4 id="设置默认策略测试"><a href="#设置默认策略测试" class="headerlink" title="设置默认策略测试"></a>设置默认策略测试</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置默认策略为拒绝所有流量</span></span><br><span class="line">cat &gt;default-deny.yml&lt;&lt;EOF</span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: NetworkPolicy</span><br><span class="line">metadata:</span><br><span class="line">  name: default-deny</span><br><span class="line">spec:</span><br><span class="line">  podSelector: &#123;&#125;</span><br><span class="line">  policyTypes:</span><br><span class="line">  - Ingress</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f default-deny.yml -n production</span><br><span class="line">kubectl apply -f default-deny.yml -n staging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试通信</span></span><br><span class="line"><span class="comment"># 同namespace的pod通信</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$PRODUCTION_NODE_NAME</span> --namespace=production -- ping -c4 <span class="variable">$PRODUCTION_GO_IP</span> </span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$STAGING_NODE_NAME</span> --namespace=staging -- ping -c4 <span class="variable">$STAGING_GO_IP</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同namespace的pod通信</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$PRODUCTION_NODE_NAME</span> --namespace=production -- ping -c4 <span class="variable">$STAGING_GO_IP</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$STAGING_NODE_NAME</span> --namespace=staging -- ping -c4 <span class="variable">$PRODUCTION_GO_IP</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结论：所有pod间都不能通信</span></span><br></pre></td></tr></table></figure><h4 id="设置允许规则"><a href="#设置允许规则" class="headerlink" title="设置允许规则"></a>设置允许规则</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 service-go 允许从 service-node 访问</span></span><br><span class="line">cat &gt;service-go-allow-service-node.yml&lt;&lt;EOF</span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: NetworkPolicy</span><br><span class="line">metadata:</span><br><span class="line">  name: service-go-allow-service-node</span><br><span class="line">spec:</span><br><span class="line">  podSelector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: service-go</span><br><span class="line">  ingress:</span><br><span class="line">  - from:</span><br><span class="line">    - podSelector:</span><br><span class="line">        matchLabels:</span><br><span class="line">          app: service-node</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f service-go-allow-service-node.yml -n production</span><br><span class="line">kubectl apply -f service-go-allow-service-node.yml -n staging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 service-node 允许 访问 tcp 80 端口</span></span><br><span class="line">cat &gt;service-node-allow-tcp-80.yml&lt;&lt;EOF</span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: NetworkPolicy</span><br><span class="line">metadata:</span><br><span class="line">  name: service-node-allow-tcp-80</span><br><span class="line">spec:</span><br><span class="line">  podSelector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: service-node</span><br><span class="line">  ingress:</span><br><span class="line">  - from:</span><br><span class="line">    ports:</span><br><span class="line">    - protocol: TCP</span><br><span class="line">      port: 80</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f service-node-allow-tcp-80.yml -n production</span><br><span class="line">kubectl apply -f service-node-allow-tcp-80.yml -n staging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试通信</span></span><br><span class="line"><span class="comment"># 同namespace的pod通信</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$PRODUCTION_NODE_NAME</span> --namespace=production -- ping -c4 <span class="variable">$PRODUCTION_GO_IP</span> </span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$STAGING_NODE_NAME</span> --namespace=staging -- ping -c4 <span class="variable">$STAGING_GO_IP</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 不同namespace的pod通信</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$PRODUCTION_NODE_NAME</span> --namespace=production -- ping -c4 <span class="variable">$STAGING_GO_IP</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$STAGING_NODE_NAME</span> --namespace=staging -- ping -c4 <span class="variable">$PRODUCTION_GO_IP</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过service测试</span></span><br><span class="line">PRODUCTION_GO_SVC=$(kubectl get svc -n production | grep service-go | awk <span class="string">'&#123;print $3&#125;'</span>)</span><br><span class="line">STAGING_GO_SVC=$(kubectl get svc -n staging | grep service-go | awk <span class="string">'&#123;print $3&#125;'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PRODUCTION_GO_SVC</span> <span class="variable">$STAGING_GO_SVC</span></span><br><span class="line">curl <span class="variable">$PRODUCTION_GO_SVC</span></span><br><span class="line">curl <span class="variable">$STAGING_GO_SVC</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结论：同一namespace的pod间可以通信，不同namespace的pod间不可以通信，只允许配置了网络规则的pod间通信</span></span><br><span class="line"><span class="comment"># 通过 service 也无法绕过网络隔离策略</span></span><br></pre></td></tr></table></figure><h4 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除 namespace 自动删除相关资源</span></span><br><span class="line">kubectl delete ns production</span><br><span class="line">kubectl delete ns staging</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://github.com/cloudnativelabs/kube-router/blob/master/docs/generic.md" target="_blank" rel="noopener">https://github.com/cloudnativelabs/kube-router/blob/master/docs/generic.md</a></li><li><a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/services-networking/network-policies/</a></li><li><a href="https://cloudnativelabs.github.io/post/2017-05-1-kube-network-policies/" target="_blank" rel="noopener">https://cloudnativelabs.github.io/post/2017-05-1-kube-network-policies/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7手动安装k8s-1.11版本</title>
      <link href="/posts/35/"/>
      <url>/posts/35/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文章主要介绍如何通过使用官方提供的二进制包安装配置k8s集群<br><a id="more"></a></p><h3 id="实验环境说明"><a href="#实验环境说明" class="headerlink" title="实验环境说明"></a>实验环境说明</h3><h4 id="实验架构"><a href="#实验架构" class="headerlink" title="实验架构"></a>实验架构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lab1: master 11.11.11.111</span><br><span class="line">lab2: node 11.11.11.112</span><br><span class="line">lab3: node 11.11.11.113</span><br></pre></td></tr></table></figure><h4 id="实验使用的Vagrantfile"><a href="#实验使用的Vagrantfile" class="headerlink" title="实验使用的Vagrantfile"></a>实验使用的<code>Vagrantfile</code></h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">    (<span class="number">1</span>..<span class="number">3</span>).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      config.vm.define <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span> <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">        node.vm.box = <span class="string">"centos-7.4-docker-17"</span></span><br><span class="line">        node.ssh.insert_key = <span class="literal">false</span></span><br><span class="line">        node.vm.hostname = <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.network <span class="string">"private_network"</span>, <span class="symbol">ip:</span> <span class="string">"11.11.11.11<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provision <span class="string">"shell"</span>,</span><br><span class="line">          <span class="symbol">inline:</span> <span class="string">"echo hello from node <span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> <span class="params">|v|</span></span><br><span class="line">          v.cpus = <span class="number">2</span></span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, <span class="symbol">:id</span>, <span class="string">"--name"</span>, <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span>, <span class="string">"--memory"</span>, <span class="string">"2048"</span>]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><h4 id="配置系统相关参数"><a href="#配置系统相关参数" class="headerlink" title="配置系统相关参数"></a>配置系统相关参数</h4><blockquote><p>如下操作在所有节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时禁用selinux</span></span><br><span class="line"><span class="comment"># 永久关闭 修改/etc/sysconfig/selinux文件设置</span></span><br><span class="line">sed -i <span class="string">'s/SELINUX=permissive/SELINUX=disabled/'</span> /etc/sysconfig/selinux</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时关闭swap</span></span><br><span class="line"><span class="comment"># 永久关闭 注释/etc/fstab文件里swap相关的行</span></span><br><span class="line">swapoff -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启forward</span></span><br><span class="line"><span class="comment"># Docker从1.13版本开始调整了默认的防火墙规则</span></span><br><span class="line"><span class="comment"># 禁用了iptables filter表中FOWARD链</span></span><br><span class="line"><span class="comment"># 这样会引起Kubernetes集群中跨Node的Pod无法通信</span></span><br><span class="line"></span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置转发相关参数，否则可能会出错</span></span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">vm.swappiness=0</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载ipvs相关内核模块</span></span><br><span class="line"><span class="comment"># 如果重新开机，需要重新加载</span></span><br><span class="line">modprobe ip_vs</span><br><span class="line">modprobe ip_vs_rr</span><br><span class="line">modprobe ip_vs_wrr</span><br><span class="line">modprobe ip_vs_sh</span><br><span class="line">modprobe nf_conntrack_ipv4</span><br><span class="line">lsmod | grep ip_vs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置开启自加载</span></span><br><span class="line">cat &gt;/etc/modules-load.d/k8s-ipvs.conf&lt;&lt;EOF</span><br><span class="line">ip_vs</span><br><span class="line">ip_vs_rr</span><br><span class="line">ip_vs_wrr</span><br><span class="line">ip_vs_sh</span><br><span class="line">nf_conntrack_ipv4</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="配置hosts解析"><a href="#配置hosts解析" class="headerlink" title="配置hosts解析"></a>配置hosts解析</h4><blockquote><p>如下操作在所有节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt;/etc/hosts&lt;&lt;EOF</span><br><span class="line">11.11.11.111 lab1</span><br><span class="line">11.11.11.112 lab2</span><br><span class="line">11.11.11.113 lab3</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="安装配置docker"><a href="#安装配置docker" class="headerlink" title="安装配置docker"></a>安装配置docker</h4><blockquote><p>v1.11.0版本推荐使用docker v17.03,<br>v1.11,v1.12,v1.13, 也可以使用，再高版本的docker可能无法正常使用。<br>测试发现17.09无法正常使用，不能使用资源限制(内存CPU)</p><p>如下操作在所有节点操作</p></blockquote><h5 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载安装指定版本docker-ce</span></span><br><span class="line">yum remove -y docker-ce docker-ce-selinux container-selinux</span><br><span class="line">yum install -y --<span class="built_in">setopt</span>=obsoletes=0 \</span><br><span class="line">docker-ce-17.03.1.ce-1.el7.centos \</span><br><span class="line">docker-ce-selinux-17.03.1.ce-1.el7.centos</span><br></pre></td></tr></table></figure><h5 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="安装CFSSL"><a href="#安装CFSSL" class="headerlink" title="安装CFSSL"></a>安装CFSSL</h4><blockquote><p>只在<code>lab1</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line"><span class="comment"># 百度云链接：https://pan.baidu.com/s/1kgV40nwHy1IKnnLD6zH4cQ 密码：alyj</span></span><br><span class="line">mkdir -pv /server/software/k8s</span><br><span class="line"><span class="built_in">cd</span> /server/software/k8s</span><br><span class="line">yum install -y wget</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">mv cfssl-certinfo_linux-amd64 /usr/<span class="built_in">local</span>/bin/cfssl-certinfo</span><br><span class="line">mv cfssl_linux-amd64 /usr/<span class="built_in">local</span>/bin/cfssl</span><br><span class="line">mv cfssljson_linux-amd64 /usr/<span class="built_in">local</span>/bin/cfssljson</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/cfssl*</span><br></pre></td></tr></table></figure><h4 id="配置CA"><a href="#配置CA" class="headerlink" title="配置CA"></a>配置CA</h4><blockquote><p>只在<code>lab1</code>节点操作</p><p>此处的CA配置，后面配置etcd和k8s时都需要使用</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv <span class="variable">$HOME</span>/ssl &amp;&amp; <span class="built_in">cd</span> <span class="variable">$HOME</span>/ssl</span><br><span class="line">cat &gt;ca-config.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"signing"</span>: &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">      <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"profiles"</span>: &#123;</span><br><span class="line">      <span class="string">"kubernetes"</span>: &#123;</span><br><span class="line">        <span class="string">"usages"</span>: [</span><br><span class="line">            <span class="string">"signing"</span>,</span><br><span class="line">            <span class="string">"key encipherment"</span>,</span><br><span class="line">            <span class="string">"server auth"</span>,</span><br><span class="line">            <span class="string">"client auth"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="配置etcd集群"><a href="#配置etcd集群" class="headerlink" title="配置etcd集群"></a>配置etcd集群</h4><h5 id="生成etcd-ca"><a href="#生成etcd-ca" class="headerlink" title="生成etcd-ca"></a>生成etcd-ca</h5><blockquote><p>只在<code>lab1</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写入配置</span></span><br><span class="line">cat &gt;etcd-ca-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"etcd"</span>,</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"etcd"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"Etcd Security"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 etcd root ca</span></span><br><span class="line">cfssl gencert -initca etcd-ca-csr.json | cfssljson -bare etcd-ca</span><br><span class="line"></span><br><span class="line">cat &gt;etcd-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"etcd"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [</span><br><span class="line">      <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      <span class="string">"11.11.11.111"</span>,</span><br><span class="line">      <span class="string">"11.11.11.112"</span>,</span><br><span class="line">      <span class="string">"11.11.11.113"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"etcd"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"Etcd Security"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 etcd ca</span></span><br><span class="line">cfssl gencert -ca=etcd-ca.pem -ca-key=etcd-ca-key.pem -config=ca-config.json \</span><br><span class="line">-profile=kubernetes etcd-csr.json | cfssljson -bare etcd</span><br><span class="line">mkdir -pv /etc/etcd/ssl</span><br><span class="line">cp etcd*.pem /etc/etcd/ssl</span><br><span class="line">ls /etc/etcd/ssl/etcd*.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制到其他节点</span></span><br><span class="line"><span class="built_in">cd</span> /etc/etcd &amp;&amp; tar cvzf etcd-ssl.tgz ssl/</span><br><span class="line">scp /etc/etcd/etcd-ssl.tgz lab2:~/</span><br><span class="line">scp /etc/etcd/etcd-ssl.tgz lab3:~/</span><br><span class="line">ssh lab2 <span class="string">'mkdir -pv /etc/etcd &amp;&amp; tar xf etcd-ssl.tgz -C /etc/etcd &amp;&amp; ls -l /etc/etcd/ssl'</span></span><br><span class="line">ssh lab3 <span class="string">'mkdir -pv /etc/etcd &amp;&amp; tar xf etcd-ssl.tgz -C /etc/etcd &amp;&amp; ls -l /etc/etcd/ssl'</span></span><br></pre></td></tr></table></figure><h5 id="安装启动etcd"><a href="#安装启动etcd" class="headerlink" title="安装启动etcd"></a>安装启动etcd</h5><blockquote><p>如下操作在所有节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="comment"># 百度云链接：https://pan.baidu.com/s/1IVHyMqiJrlq9gmbF49Ly3Q 密码：w5nx</span></span><br><span class="line">mkdir -pv /server/software/k8s</span><br><span class="line"><span class="built_in">cd</span> /server/software/k8s</span><br><span class="line">yum install -y wget</span><br><span class="line">wget https://github.com/coreos/etcd/releases/download/v3.2.18/etcd-v3.2.18-linux-amd64.tar.gz</span><br><span class="line">tar xf etcd-v3.2.18-linux-amd64.tar.gz</span><br><span class="line">mv etcd-v3.2.18-linux-amd64 /usr/<span class="built_in">local</span>/etcd-v3.2.18</span><br><span class="line">ln -sv /usr/<span class="built_in">local</span>/etcd-v3.2.18 /usr/<span class="built_in">local</span>/etcd</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/etcd &amp;&amp; mkdir bin &amp;&amp; mv etcd etcdctl bin</span><br><span class="line">/usr/<span class="built_in">local</span>/etcd/bin/etcd --version</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置启动脚本</span></span><br><span class="line"><span class="built_in">export</span> ETCD_NAME=$(hostname)</span><br><span class="line"><span class="built_in">export</span> INTERNAL_IP=$(hostname -i | awk <span class="string">'&#123;print $NF&#125;'</span>)</span><br><span class="line"><span class="built_in">export</span> ECTD_CLUSTER=<span class="string">'lab1=https://11.11.11.111:2380,lab2=https://11.11.11.112:2380,lab3=https://11.11.11.113:2380'</span></span><br><span class="line">mkdir -pv /data/etcd</span><br><span class="line">cat &gt; /etc/systemd/system/etcd.service &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">Documentation=https://github.com/coreos</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">WorkingDirectory=/data/etcd</span><br><span class="line">EnvironmentFile=-/etc/etcd/etcd.conf</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/etcd/bin/etcd \\</span><br><span class="line">  --name <span class="variable">$&#123;ETCD_NAME&#125;</span> \\</span><br><span class="line">  --cert-file=/etc/etcd/ssl/etcd.pem \\</span><br><span class="line">  --key-file=/etc/etcd/ssl/etcd-key.pem \\</span><br><span class="line">  --peer-cert-file=/etc/etcd/ssl/etcd.pem \\</span><br><span class="line">  --peer-key-file=/etc/etcd/ssl/etcd-key.pem \\</span><br><span class="line">  --trusted-ca-file=/etc/etcd/ssl/etcd-ca.pem \\</span><br><span class="line">  --peer-trusted-ca-file=/etc/etcd/ssl/etcd-ca.pem \\</span><br><span class="line">  --initial-advertise-peer-urls https://<span class="variable">$&#123;INTERNAL_IP&#125;</span>:2380 \\</span><br><span class="line">  --listen-peer-urls https://<span class="variable">$&#123;INTERNAL_IP&#125;</span>:2380 \\</span><br><span class="line">  --listen-client-urls https://<span class="variable">$&#123;INTERNAL_IP&#125;</span>:2379,https://127.0.0.1:2379 \\</span><br><span class="line">  --advertise-client-urls https://<span class="variable">$&#123;INTERNAL_IP&#125;</span>:2379 \\</span><br><span class="line">  --initial-cluster-token my-etcd-token \\</span><br><span class="line">  --initial-cluster <span class="variable">$ECTD_CLUSTER</span> \\</span><br><span class="line">  --initial-cluster-state new \\</span><br><span class="line">  --data-dir=/data/etcd</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动并设置开机启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start etcd</span><br><span class="line">systemctl <span class="built_in">enable</span> etcd</span><br></pre></td></tr></table></figure><h5 id="查看etcd集群状态"><a href="#查看etcd集群状态" class="headerlink" title="查看etcd集群状态"></a>查看etcd集群状态</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/etcd/bin/etcdctl --endpoints <span class="string">"https://127.0.0.1:2379"</span> \</span><br><span class="line">  --ca-file=/etc/etcd/ssl/etcd-ca.pem \</span><br><span class="line">  --cert-file=/etc/etcd/ssl/etcd.pem \</span><br><span class="line">  --key-file=/etc/etcd/ssl/etcd-key.pem \</span><br><span class="line">  cluster-health</span><br></pre></td></tr></table></figure><h4 id="生成k8s集群的CA"><a href="#生成k8s集群的CA" class="headerlink" title="生成k8s集群的CA"></a>生成k8s集群的CA</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入相关目录</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/ssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 root ca</span></span><br><span class="line">cat &gt;ca-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"ca"</span>: &#123;</span><br><span class="line">     <span class="string">"expiry"</span>: <span class="string">"87600h"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 root ca</span></span><br><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span><br><span class="line">ls ca*.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 kube-apiserver ca</span></span><br><span class="line"><span class="comment"># 10.96.0.1 是 kube-apiserver 指定的 service-cluster-ip-range 网段的第一个IP</span></span><br><span class="line">cat &gt;kube-apiserver-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"kube-apiserver"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [</span><br><span class="line">      <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      <span class="string">"11.11.11.111"</span>,</span><br><span class="line">      <span class="string">"11.11.11.112"</span>,</span><br><span class="line">      <span class="string">"11.11.11.113"</span>,</span><br><span class="line">      <span class="string">"10.96.0.1"</span>,</span><br><span class="line">      <span class="string">"kubernetes"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default.svc"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default.svc.cluster"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default.svc.cluster.local"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 kube-apiserver ca</span></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \</span><br><span class="line">-profile=kubernetes kube-apiserver-csr.json | cfssljson -bare kube-apiserver</span><br><span class="line">ls kube-apiserver*.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 kube-controller-manager ca</span></span><br><span class="line">cat &gt;kube-controller-manager-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"system:kube-controller-manager"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [</span><br><span class="line">      <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      <span class="string">"11.11.11.111"</span>,</span><br><span class="line">      <span class="string">"11.11.11.112"</span>,</span><br><span class="line">      <span class="string">"11.11.11.113"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"system:kube-controller-manager"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 kube-controller-manager ca</span></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \</span><br><span class="line">-profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare kube-controller-manager</span><br><span class="line">ls kube-controller-manager*.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 kube-scheduler ca</span></span><br><span class="line">cat &gt;kube-scheduler-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"system:kube-scheduler"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [</span><br><span class="line">      <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      <span class="string">"11.11.11.111"</span>,</span><br><span class="line">      <span class="string">"11.11.11.112"</span>,</span><br><span class="line">      <span class="string">"11.11.11.113"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"system:kube-scheduler"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 kube-scheduler ca</span></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \</span><br><span class="line">-profile=kubernetes kube-scheduler-csr.json | cfssljson -bare kube-scheduler</span><br><span class="line">ls kube-scheduler*.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 kube-proxy ca</span></span><br><span class="line">cat &gt;kube-proxy-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"system:kube-proxy"</span>,</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"system:kube-proxy"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 kube-proxy ca</span></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \</span><br><span class="line">-profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy</span><br><span class="line">ls kube-proxy*.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 admin ca</span></span><br><span class="line">cat &gt;admin-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"admin"</span>,</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"system:masters"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 admin ca</span></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \</span><br><span class="line">-profile=kubernetes admin-csr.json | cfssljson -bare admin</span><br><span class="line">ls admin*.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制生成的ca</span></span><br><span class="line">mkdir -pv /etc/kubernetes/pki</span><br><span class="line">cp ca*.pem admin*.pem kube-proxy*.pem kube-scheduler*.pem kube-controller-manager*.pem kube-apiserver*.pem /etc/kubernetes/pki</span><br><span class="line"><span class="built_in">cd</span> /etc/kubernetes &amp;&amp; tar cvzf pki.tgz pki/</span><br><span class="line">scp /etc/kubernetes/pki.tgz lab2:~/</span><br><span class="line">scp /etc/kubernetes/pki.tgz lab3:~/</span><br><span class="line">ssh lab2 <span class="string">'mkdir -pv /etc/kubernetes &amp;&amp; tar xf pki.tgz -C /etc/kubernetes &amp;&amp; ls -l /etc/kubernetes/pki'</span></span><br><span class="line">ssh lab3 <span class="string">'mkdir -pv /etc/kubernetes &amp;&amp; tar xf pki.tgz -C /etc/kubernetes &amp;&amp; ls -l /etc/kubernetes/pki'</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span></span><br></pre></td></tr></table></figure><h4 id="安装k8s文件"><a href="#安装k8s文件" class="headerlink" title="安装k8s文件"></a>安装k8s文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载文件</span></span><br><span class="line"><span class="comment"># 需要翻墙，如果不能翻墙使用如下链接下载</span></span><br><span class="line"><span class="comment"># 链接：https://pan.baidu.com/s/1OI9Q4BRp7jNJUmsA8IAkbA 密码：tnx5</span></span><br><span class="line"><span class="built_in">cd</span> /server/software/k8s</span><br><span class="line">wget https://dl.k8s.io/v1.11.0/kubernetes-server-linux-amd64.tar.gz</span><br><span class="line">tar xf kubernetes-server-linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> kubernetes/server/bin</span><br><span class="line">mkdir -pv /usr/<span class="built_in">local</span>/kubernetes-v1.11.0/bin</span><br><span class="line">cp kube-apiserver kube-controller-manager kube-scheduler kube-proxy kubelet kubectl /usr/<span class="built_in">local</span>/kubernetes-v1.11.0/bin</span><br><span class="line">ln -sv /usr/<span class="built_in">local</span>/kubernetes-v1.11.0 /usr/<span class="built_in">local</span>/kubernetes</span><br><span class="line">cp /usr/<span class="built_in">local</span>/kubernetes/bin/kubectl /usr/<span class="built_in">local</span>/bin/kubectl</span><br><span class="line">kubectl version</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span></span><br></pre></td></tr></table></figure><h4 id="生成kubeconfig"><a href="#生成kubeconfig" class="headerlink" title="生成kubeconfig"></a>生成kubeconfig</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 TLS Bootstrapping </span></span><br><span class="line"><span class="built_in">export</span> BOOTSTRAP_TOKEN=$(head -c 16 /dev/urandom | od -An -t x | tr -d <span class="string">' '</span>)</span><br><span class="line">cat &gt; /etc/kubernetes/token.csv &lt;&lt;EOF</span><br><span class="line"><span class="variable">$&#123;BOOTSTRAP_TOKEN&#125;</span>,kubelet-bootstrap,10001,<span class="string">"system:kubelet-bootstrap"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 kubelet bootstrapping kubeconfig</span></span><br><span class="line"><span class="built_in">cd</span> /etc/kubernetes</span><br><span class="line"><span class="built_in">export</span> KUBE_APISERVER=<span class="string">"https://11.11.11.111:6443"</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kubelet-bootstrap.conf</span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials kubelet-bootstrap \</span><br><span class="line">  --token=<span class="variable">$&#123;BOOTSTRAP_TOKEN&#125;</span> \</span><br><span class="line">  --kubeconfig=kubelet-bootstrap.conf</span><br><span class="line">kubectl config <span class="built_in">set</span>-context default \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=kubelet-bootstrap \</span><br><span class="line">  --kubeconfig=kubelet-bootstrap.conf</span><br><span class="line">kubectl config use-context default --kubeconfig=kubelet-bootstrap.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 kube-controller-manager kubeconfig</span></span><br><span class="line"><span class="built_in">export</span> KUBE_APISERVER=<span class="string">"https://11.11.11.111:6443"</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kube-controller-manager.conf</span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials kube-controller-manager \</span><br><span class="line">  --client-certificate=/etc/kubernetes/pki/kube-controller-manager.pem \</span><br><span class="line">  --client-key=/etc/kubernetes/pki/kube-controller-manager-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kube-controller-manager.conf</span><br><span class="line">kubectl config <span class="built_in">set</span>-context default \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=kube-controller-manager \</span><br><span class="line">  --kubeconfig=kube-controller-manager.conf</span><br><span class="line">kubectl config use-context default --kubeconfig=kube-controller-manager.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 kube-scheduler kubeconfig</span></span><br><span class="line"><span class="built_in">export</span> KUBE_APISERVER=<span class="string">"https://11.11.11.111:6443"</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kube-scheduler.conf</span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials kube-scheduler \</span><br><span class="line">  --client-certificate=/etc/kubernetes/pki/kube-scheduler.pem \</span><br><span class="line">  --client-key=/etc/kubernetes/pki/kube-scheduler-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kube-scheduler.conf</span><br><span class="line">kubectl config <span class="built_in">set</span>-context default \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=kube-scheduler \</span><br><span class="line">  --kubeconfig=kube-scheduler.conf</span><br><span class="line">kubectl config use-context default --kubeconfig=kube-scheduler.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 kube-proxy kubeconfig</span></span><br><span class="line"><span class="built_in">export</span> KUBE_APISERVER=<span class="string">"https://11.11.11.111:6443"</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kube-proxy.conf</span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials kube-proxy \</span><br><span class="line">  --client-certificate=/etc/kubernetes/pki/kube-proxy.pem \</span><br><span class="line">  --client-key=/etc/kubernetes/pki/kube-proxy-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kube-proxy.conf</span><br><span class="line">kubectl config <span class="built_in">set</span>-context default \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=kube-proxy \</span><br><span class="line">  --kubeconfig=kube-proxy.conf</span><br><span class="line">kubectl config use-context default --kubeconfig=kube-proxy.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 admin kubeconfig</span></span><br><span class="line"><span class="built_in">export</span> KUBE_APISERVER=<span class="string">"https://11.11.11.111:6443"</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=admin.conf</span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials admin \</span><br><span class="line">  --client-certificate=/etc/kubernetes/pki/admin.pem \</span><br><span class="line">  --client-key=/etc/kubernetes/pki/admin-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=admin.conf</span><br><span class="line">kubectl config <span class="built_in">set</span>-context default \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=admin \</span><br><span class="line">  --kubeconfig=admin.conf</span><br><span class="line">kubectl config use-context default --kubeconfig=admin.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把 kube-proxy.conf 复制到其他节点</span></span><br><span class="line">scp kubelet-bootstrap.conf kube-proxy.conf lab2:/etc/kubernetes</span><br><span class="line">scp kubelet-bootstrap.conf kube-proxy.conf lab3:/etc/kubernetes</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span></span><br></pre></td></tr></table></figure><h4 id="配置master相关组件"><a href="#配置master相关组件" class="headerlink" title="配置master相关组件"></a>配置master相关组件</h4><blockquote><p>只在<code>lab1</code>节点操作</p></blockquote><h5 id="配置启动kube-apiserver"><a href="#配置启动kube-apiserver" class="headerlink" title="配置启动kube-apiserver"></a>配置启动kube-apiserver</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制 etcd ca</span></span><br><span class="line">mkdir -pv /etc/kubernetes/pki/etcd</span><br><span class="line"><span class="built_in">cd</span> /etc/etcd/ssl</span><br><span class="line">cp etcd-ca.pem etcd-key.pem etcd.pem /etc/kubernetes/pki/etcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 service account key</span></span><br><span class="line">openssl genrsa -out /etc/kubernetes/pki/sa.key 2048</span><br><span class="line">openssl rsa -<span class="keyword">in</span> /etc/kubernetes/pki/sa.key -pubout -out /etc/kubernetes/pki/sa.pub</span><br><span class="line">ls /etc/kubernetes/pki/sa.*</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动文件</span></span><br><span class="line">cat &gt;/etc/systemd/system/kube-apiserver.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes API Service</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/apiserver</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/kubernetes/bin/kube-apiserver \\</span><br><span class="line">    \<span class="variable">$KUBE_LOGTOSTDERR</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_LOG_LEVEL</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_ETCD_ARGS</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_API_ADDRESS</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_SERVICE_ADDRESSES</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_ADMISSION_CONTROL</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_APISERVER_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">Type=notify</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 该配置文件同时被 kube-apiserver, kube-controller-manager</span></span><br><span class="line"><span class="comment"># kube-scheduler, kubelet, kube-proxy 使用</span></span><br><span class="line">cat &gt;/etc/kubernetes/config&lt;&lt;EOF</span><br><span class="line">KUBE_LOGTOSTDERR=<span class="string">"--logtostderr=true"</span></span><br><span class="line">KUBE_LOG_LEVEL=<span class="string">"--v=2"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;/etc/kubernetes/apiserver&lt;&lt;EOF</span><br><span class="line">KUBE_API_ADDRESS=<span class="string">"--advertise-address=11.11.11.111"</span></span><br><span class="line">KUBE_ETCD_ARGS=<span class="string">"--etcd-servers=https://11.11.11.111:2379,https://11.11.11.112:2379,https://11.11.11.113:2379 --etcd-cafile=/etc/kubernetes/pki/etcd/etcd-ca.pem --etcd-certfile=/etc/kubernetes/pki/etcd/etcd.pem --etcd-keyfile=/etc/kubernetes/pki/etcd/etcd-key.pem"</span></span><br><span class="line">KUBE_SERVICE_ADDRESSES=<span class="string">"--service-cluster-ip-range=10.96.0.0/12"</span></span><br><span class="line">KUBE_ADMISSION_CONTROL=<span class="string">"--enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota"</span></span><br><span class="line">KUBE_APISERVER_ARGS=<span class="string">"--allow-privileged=true --authorization-mode=Node,RBAC --enable-bootstrap-token-auth=true --token-auth-file=/etc/kubernetes/token.csv --service-node-port-range=30000-32767 --tls-cert-file=/etc/kubernetes/pki/kube-apiserver.pem --tls-private-key-file=/etc/kubernetes/pki/kube-apiserver-key.pem --client-ca-file=/etc/kubernetes/pki/ca.pem --service-account-key-file=/etc/kubernetes/pki/sa.pub --enable-swagger-ui=true --secure-port=6443 --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --anonymous-auth=false --kubelet-client-certificate=/etc/kubernetes/pki/admin.pem --kubelet-client-key=/etc/kubernetes/pki/admin-key.pem"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-apiserver</span><br><span class="line">systemctl start kube-apiserver</span><br><span class="line">systemctl status kube-apiserver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问测试</span></span><br><span class="line">https://11.11.11.111:6443/swaggerapi</span><br></pre></td></tr></table></figure><h5 id="配置启动kube-controller-manager"><a href="#配置启动kube-controller-manager" class="headerlink" title="配置启动kube-controller-manager"></a>配置启动kube-controller-manager</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动文件</span></span><br><span class="line">cat &gt;/etc/systemd/system/kube-controller-manager.service&lt;&lt;EOF</span><br><span class="line">Description=Kubernetes Controller Manager</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/controller-manager</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/kubernetes/bin/kube-controller-manager \\</span><br><span class="line">    \<span class="variable">$KUBE_LOGTOSTDERR</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_LOG_LEVEL</span> \\</span><br><span class="line">    \<span class="variable">$KUBECONFIG</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_CONTROLLER_MANAGER_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;/etc/kubernetes/controller-manager&lt;&lt;EOF</span><br><span class="line">KUBECONFIG=<span class="string">"--kubeconfig=/etc/kubernetes/kube-controller-manager.conf"</span></span><br><span class="line">KUBE_CONTROLLER_MANAGER_ARGS=<span class="string">"--address=127.0.0.1 --cluster-cidr=10.244.0.0/16 --cluster-name=kubernetes --cluster-signing-cert-file=/etc/kubernetes/pki/ca.pem --cluster-signing-key-file=/etc/kubernetes/pki/ca-key.pem --service-account-private-key-file=/etc/kubernetes/pki/sa.key --root-ca-file=/etc/kubernetes/pki/ca.pem --leader-elect=true --use-service-account-credentials=true --node-monitor-grace-period=10s --pod-eviction-timeout=10s --allocate-node-cidrs=true --controllers=*,bootstrapsigner,tokencleaner"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-controller-manager</span><br><span class="line">systemctl start kube-controller-manager</span><br><span class="line">systemctl status kube-controller-manager</span><br></pre></td></tr></table></figure><h5 id="配置启动kube-scheduler"><a href="#配置启动kube-scheduler" class="headerlink" title="配置启动kube-scheduler"></a>配置启动kube-scheduler</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/etc/systemd/system/kube-scheduler.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Scheduler Plugin</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/scheduler</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/kubernetes/bin/kube-scheduler \\</span><br><span class="line">            \<span class="variable">$KUBE_LOGTOSTDERR</span> \\</span><br><span class="line">            \<span class="variable">$KUBE_LOG_LEVEL</span> \\</span><br><span class="line">            \<span class="variable">$KUBECONFIG</span> \\</span><br><span class="line">            \<span class="variable">$KUBE_SCHEDULER_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;/etc/kubernetes/scheduler&lt;&lt;EOF</span><br><span class="line">KUBECONFIG=<span class="string">"--kubeconfig=/etc/kubernetes/kube-scheduler.conf"</span></span><br><span class="line">KUBE_SCHEDULER_ARGS=<span class="string">"--leader-elect=true --address=127.0.0.1"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-scheduler</span><br><span class="line">systemctl start kube-scheduler</span><br><span class="line">systemctl status kube-scheduler</span><br></pre></td></tr></table></figure><h5 id="配置kubectl使用"><a href="#配置kubectl使用" class="headerlink" title="配置kubectl使用"></a>配置kubectl使用</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rm -rf <span class="variable">$HOME</span>/.kube</span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">kubectl get no</span><br></pre></td></tr></table></figure><h5 id="查看组件状态"><a href="#查看组件状态" class="headerlink" title="查看组件状态"></a>查看组件状态</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get componentstatuses</span><br></pre></td></tr></table></figure><h5 id="配置kubelet使用bootstrap"><a href="#配置kubelet使用bootstrap" class="headerlink" title="配置kubelet使用bootstrap"></a>配置kubelet使用bootstrap</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 bootstrap token 文件中的 kubelet-bootstrap 用户赋予 system:node-bootstrapper cluster 角色</span></span><br><span class="line">kubectl create clusterrolebinding kubelet-bootstrap \</span><br><span class="line">--clusterrole=system:node-bootstrapper \</span><br><span class="line">--user=kubelet-bootstrap</span><br></pre></td></tr></table></figure><h4 id="配置node相关组件"><a href="#配置node相关组件" class="headerlink" title="配置node相关组件"></a>配置node相关组件</h4><blockquote><p>如下操作在所有节点操作</p></blockquote><h5 id="安装cni"><a href="#安装cni" class="headerlink" title="安装cni"></a>安装cni</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 cni</span></span><br><span class="line"><span class="comment"># 百度云链接：https://pan.baidu.com/s/1-PputObLs5jouXLnuBCI6Q 密码：tzqm</span></span><br><span class="line"><span class="built_in">cd</span> /server/software/k8s</span><br><span class="line">wget https://github.com/containernetworking/plugins/releases/download/v0.7.1/cni-plugins-amd64-v0.7.1.tgz</span><br><span class="line">mkdir -pv /opt/cni/bin</span><br><span class="line">tar xf cni-plugins-amd64-v0.7.1.tgz -C /opt/cni/bin</span><br><span class="line">ls -l /opt/cni/bin</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span></span><br></pre></td></tr></table></figure><h5 id="配置启动kubelet"><a href="#配置启动kubelet" class="headerlink" title="配置启动kubelet"></a>配置启动kubelet</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动文件</span></span><br><span class="line">mkdir -pv /data/kubelet</span><br><span class="line">cat &gt;/etc/systemd/system/kubelet.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kubelet Server</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/data/kubelet</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/kubelet</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/kubernetes/bin/kubelet \\</span><br><span class="line">            \<span class="variable">$KUBE_LOGTOSTDERR</span> \\</span><br><span class="line">            \<span class="variable">$KUBE_LOG_LEVEL</span> \\</span><br><span class="line">            \<span class="variable">$KUBELET_CONFIG</span> \\</span><br><span class="line">            \<span class="variable">$KUBELET_HOSTNAME</span> \\</span><br><span class="line">            \<span class="variable">$KUBELET_POD_INFRA_CONTAINER</span> \\</span><br><span class="line">            \<span class="variable">$KUBELET_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;/etc/kubernetes/config&lt;&lt;EOF</span><br><span class="line">KUBE_LOGTOSTDERR=<span class="string">"--logtostderr=true"</span></span><br><span class="line">KUBE_LOG_LEVEL=<span class="string">"--v=2"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意修改相关ip</span></span><br><span class="line">cat &gt;/etc/kubernetes/kubelet&lt;&lt;EOF</span><br><span class="line">KUBELET_HOSTNAME=<span class="string">"--hostname-override=11.11.11.111"</span></span><br><span class="line">KUBELET_POD_INFRA_CONTAINER=<span class="string">"--pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1"</span></span><br><span class="line">KUBELET_CONFIG=<span class="string">"--config=/etc/kubernetes/kubelet-config.yml"</span></span><br><span class="line">KUBELET_ARGS=<span class="string">"--bootstrap-kubeconfig=/etc/kubernetes/kubelet-bootstrap.conf --kubeconfig=/etc/kubernetes/kubelet.conf --cert-dir=/etc/kubernetes/pki --network-plugin=cni --cni-bin-dir=/opt/cni/bin --cni-conf-dir=/etc/cni/net.d"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意修改相关ip</span></span><br><span class="line"><span class="comment"># lab1 lab2 lab3 使用各自ip</span></span><br><span class="line">cat &gt;/etc/kubernetes/kubelet-config.yml&lt;&lt;EOF</span><br><span class="line">kind: KubeletConfiguration</span><br><span class="line">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class="line">address: 11.11.11.111</span><br><span class="line">port: 10250</span><br><span class="line">cgroupDriver: cgroupfs</span><br><span class="line">clusterDNS:</span><br><span class="line">  - 10.96.0.10</span><br><span class="line">clusterDomain: cluster.local.</span><br><span class="line">hairpinMode: promiscuous-bridge</span><br><span class="line">serializeImagePulls: <span class="literal">false</span></span><br><span class="line">authentication:</span><br><span class="line">  x509:</span><br><span class="line">    clientCAFile: /etc/kubernetes/pki/ca.pem</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line">systemctl start kubelet</span><br><span class="line">systemctl status kubelet</span><br></pre></td></tr></table></figure><h5 id="通过证书请求"><a href="#通过证书请求" class="headerlink" title="通过证书请求"></a>通过证书请求</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在配置了kubectl的节点上执行如下操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get csr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过</span></span><br><span class="line">kubectl certificate approve node-csr-Yiiv675wUCvQl3HH11jDr0cC9p3kbrXWrxvG3EjWGoE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点</span></span><br><span class="line"><span class="comment"># 此时节点状态为 NotReady</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在node节点查看生成的文件</span></span><br><span class="line">ls -l /etc/kubernetes/kubelet.conf</span><br><span class="line">ls -l /etc/kubernetes/pki/kubelet*</span><br></pre></td></tr></table></figure><h5 id="配置启动kube-proxy"><a href="#配置启动kube-proxy" class="headerlink" title="配置启动kube-proxy"></a>配置启动kube-proxy</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install -y conntrack-tools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动文件</span></span><br><span class="line">cat &gt;/etc/systemd/system/kube-proxy.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kube-Proxy Server</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/proxy</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/kubernetes/bin/kube-proxy \\</span><br><span class="line">    \<span class="variable">$KUBE_LOGTOSTDERR</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_LOG_LEVEL</span> \\</span><br><span class="line">    \<span class="variable">$KUBECONFIG</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_PROXY_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意修改相关ip</span></span><br><span class="line"><span class="comment"># lab1 lab2 lab3 使用各自ip</span></span><br><span class="line"><span class="comment"># 由于 1.11.0 ipvs 在centos7上有bug无法正常使用</span></span><br><span class="line"><span class="comment"># 实验使用 iptables 模式</span></span><br><span class="line"><span class="comment"># 以后版本可以使用 ipvs 模式</span></span><br><span class="line">cat &gt;/etc/kubernetes/proxy&lt;&lt;EOF</span><br><span class="line">KUBECONFIG=<span class="string">"--kubeconfig=/etc/kubernetes/kube-proxy.conf"</span></span><br><span class="line">KUBE_PROXY_ARGS=<span class="string">"--bind-address=11.11.11.111 --proxy-mode=iptables --hostname-override=11.11.11.111 --cluster-cidr=10.244.0.0/16"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-proxy</span><br><span class="line">systemctl start kube-proxy</span><br><span class="line">systemctl status kube-proxy</span><br></pre></td></tr></table></figure><h4 id="设置集群角色"><a href="#设置集群角色" class="headerlink" title="设置集群角色"></a>设置集群角色</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 lab1 为 master</span></span><br><span class="line">kubectl label nodes 11.11.11.111 node-role.kubernetes.io/master=</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 lab2 lab3 为 node</span></span><br><span class="line">kubectl label nodes 11.11.11.112 node-role.kubernetes.io/node=</span><br><span class="line">kubectl label nodes 11.11.11.113 node-role.kubernetes.io/node=</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 master 一般情况下不接受负载</span></span><br><span class="line">kubectl taint nodes 11.11.11.111 node-role.kubernetes.io/master=<span class="literal">true</span>:NoSchedule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点</span></span><br><span class="line"><span class="comment"># 此时节点状态为 NotReady</span></span><br><span class="line">kubectl get no</span><br></pre></td></tr></table></figure><h4 id="配置使用flannel网络"><a href="#配置使用flannel网络" class="headerlink" title="配置使用flannel网络"></a>配置使用flannel网络</h4><blockquote><p>在<code>lab1</code>操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载配置</span></span><br><span class="line">mkdir flannel &amp;&amp; <span class="built_in">cd</span> flannel</span><br><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line"><span class="comment"># 此处的ip配置要与上面kubeadm的pod-network一致</span></span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"Network"</span>: <span class="string">"10.244.0.0/16"</span>,</span><br><span class="line">      <span class="string">"Backend"</span>: &#123;</span><br><span class="line">        <span class="string">"Type"</span>: <span class="string">"vxlan"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像</span></span><br><span class="line">image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果Node有多个网卡的话，参考flannel issues 39701，</span></span><br><span class="line"><span class="comment"># https://github.com/kubernetes/kubernetes/issues/39701</span></span><br><span class="line"><span class="comment"># 目前需要在kube-flannel.yml中使用--iface参数指定集群主机内网网卡的名称，</span></span><br><span class="line"><span class="comment"># 否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，</span></span><br><span class="line"><span class="comment"># flanneld启动参数加上--iface=&lt;iface-name&gt;</span></span><br><span class="line">    containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        - --iface=eth1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get svc -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点状态</span></span><br><span class="line"><span class="comment"># 当 flannel pod 全部启动之后，节点状态为 Ready</span></span><br><span class="line">kubectl get no</span><br></pre></td></tr></table></figure><h4 id="配置使用coredns"><a href="#配置使用coredns" class="headerlink" title="配置使用coredns"></a>配置使用coredns</h4><blockquote><p>在<code>lab1</code>操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="comment"># 10.96.0.10 kubelet中配置的dns</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span> &amp;&amp; mkdir coredns &amp;&amp; <span class="built_in">cd</span> coredns</span><br><span class="line">wget https://raw.githubusercontent.com/coredns/deployment/master/kubernetes/coredns.yaml.sed</span><br><span class="line">wget https://raw.githubusercontent.com/coredns/deployment/master/kubernetes/deploy.sh</span><br><span class="line">chmod +x deploy.sh</span><br><span class="line">./deploy.sh -i 10.96.0.10 &gt; coredns.yml</span><br><span class="line">kubectl apply -f coredns.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get svc -n kube-system</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl run nginx --replicas=2 --image=nginx:alpine --port=80</span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --name=example-service-nodeport</span><br><span class="line">kubectl expose deployment nginx --name=example-service</span><br><span class="line">kubectl scale --replicas=3 deployment/nginx</span><br></pre></td></tr></table></figure><h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deploy -o wide</span><br><span class="line">kubectl get pods -o wide</span><br><span class="line">kubectl get svc -o wide</span><br><span class="line">kubectl describe svc example-service</span><br></pre></td></tr></table></figure><h4 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl run curl --image=radial/busyboxplus:curl -i --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br></pre></td></tr></table></figure><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10.96.59.56 为查看svc时获取到的clusterip</span></span><br><span class="line">curl <span class="string">"10.107.91.153:80"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 32223 为查看svc时获取到的 nodeport</span></span><br><span class="line">http://11.11.11.111:32223/</span><br><span class="line">http://11.11.11.112:32223/</span><br><span class="line">http://11.11.11.113:32223/</span><br></pre></td></tr></table></figure><h4 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete svc example-service example-service-nodeport</span><br><span class="line">kubectl delete deploy nginx curl</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://jimmysong.io/kubernetes-handbook/practice/install-kubernetes-on-centos.html" target="_blank" rel="noopener">https://jimmysong.io/kubernetes-handbook/practice/install-kubernetes-on-centos.html</a></li><li><a href="https://zhangguanzhang.github.io/2018/05/05/Kubernetes_install/" target="_blank" rel="noopener">https://zhangguanzhang.github.io/2018/05/05/Kubernetes_install/</a></li><li><a href="https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/</a></li><li><a href="https://kairen.github.io/2018/04/05/kubernetes/deploy/manual-v1.10/" target="_blank" rel="noopener">https://kairen.github.io/2018/04/05/kubernetes/deploy/manual-v1.10/</a></li><li><a href="http://www.maogx.win/posts/7/" target="_blank" rel="noopener">http://www.maogx.win/posts/7/</a></li><li><a href="https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/</a></li><li><a href="https://kubernetes-v1-4.github.io/docs/user-guide/kubectl/kubectl_label/" target="_blank" rel="noopener">https://kubernetes-v1-4.github.io/docs/user-guide/kubectl/kubectl_label/</a></li><li><a href="https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/</a></li><li><a href="https://github.com/gjmzj/kubeasz" target="_blank" rel="noopener">https://github.com/gjmzj/kubeasz</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes基础概念总结</title>
      <link href="/posts/34/"/>
      <url>/posts/34/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>kubernetes</code>是由google主导开发的开源容器管理平台，提供多主机集群，容器编排，容器伸缩等功能</p><a id="more"></a><h3 id="基础组件介绍"><a href="#基础组件介绍" class="headerlink" title="基础组件介绍"></a>基础组件介绍</h3><h4 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h4><p>容器运行环境的一种实现，封装底层容器</p><h4 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h4><p><code>etcd</code>是<code>kubernetes</code>集群用来存储集群相关数据的数据仓库</p><h4 id="master节点组件"><a href="#master节点组件" class="headerlink" title="master节点组件"></a>master节点组件</h4><p><code>master</code>节点是主集群中的大脑，负责处理外部的api请求，分配调度任务以及管理容器的副本数等</p><h5 id="kube-apiserver"><a href="#kube-apiserver" class="headerlink" title="kube-apiserver"></a>kube-apiserver</h5><ul><li><code>kubernetes</code>对外的服务入口，其他组件通信的纽带，服务无状态，可水平扩容</li></ul><h5 id="kube-scheduler"><a href="#kube-scheduler" class="headerlink" title="kube-scheduler"></a>kube-scheduler</h5><ul><li>负责pod的任务调度</li></ul><h5 id="kube-controller-manager"><a href="#kube-controller-manager" class="headerlink" title="kube-controller-manager"></a>kube-controller-manager</h5><ul><li>处理<code>node</code>节点当机情况</li><li>负责保证pod的副本数</li><li>管理endpoint，连接service和pod</li><li>为新namespace创建默认api token和accounts</li></ul><h4 id="node节点组件"><a href="#node节点组件" class="headerlink" title="node节点组件"></a>node节点组件</h4><p><code>node</code>节点负责干活，执行<code>master</code>节点指派的相关任务</p><h5 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a>kubelet</h5><ul><li>负责启动停止容器，保证容器运行。</li></ul><h5 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube-proxy"></a>kube-proxy</h5><ul><li>负责根据service生成网络规则，生成路由规则</li></ul><h4 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h4><blockquote><p>架构图</p></blockquote><p><img src="/posts/34/k8s-arch.png" alt=""></p><p>组件间的通信全依赖于<code>kube-apiserver</code>，其他组件通过http协议与<code>kube-apiserver</code>交互。</p><p>当使用kubectl或者直接调用<code>kube-apiserver</code>提供的api请求创建pod里和service时工作流程如下：</p><ul><li><code>kube-apiserver</code>把相关的pod和service配置存储到<code>etcd</code>中</li><li><code>kube-scheduler</code>从<code>kube-apiserver</code>获取到相关pod的配置，根据集群中的资源和条件限制把pod调度到相应的<code>node</code>节点上</li><li><code>kube-controller-manager</code>从<code>kube-apiserver</code>获取到相关pod和service的配置，定期检查pod的状态，保证有用户配置的足够数量的pod副本在运行，生成service到pod的规则关系。</li><li><code>kubelet</code>从<code>kube-apiserver</code>获取分配到本节点的相关pod配置，在本地启动容器并定期检查返回容器状态</li><li><code>kube-proxy</code>从<code>kube-apiserver</code>获取service到pod的规则，在本节点维护<code>iptable</code>或者<code>ipvs</code>相关路由规则</li></ul><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><h4 id="pod"><a href="#pod" class="headerlink" title="pod"></a>pod</h4><ul><li><code>kubernetes</code>的最小调度单元，一个pod中可以有多个容器，多个容器共享网络和存储卷</li></ul><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><ul><li><code>kubernetes</code>抽象出来一个概念，可以理解为负载均衡器，后端接pod</li></ul><h4 id="cluster-ip"><a href="#cluster-ip" class="headerlink" title="cluster ip"></a>cluster ip</h4><ul><li>service在集群中的ip，相当负载均衡器的ip</li></ul><h4 id="ingress"><a href="#ingress" class="headerlink" title="ingress"></a>ingress</h4><ul><li>对集群外部暴露集群内部service的一种方式</li></ul><h4 id="nodeport"><a href="#nodeport" class="headerlink" title="nodeport"></a>nodeport</h4><ul><li>对集群外部暴露服务的第二种方式，跟随service配置，让集群中的<code>node</code>节点都监听相应的端口，可以通过<code>node</code>节点访问集群内部service</li></ul><h4 id="loadbalancer"><a href="#loadbalancer" class="headerlink" title="loadbalancer"></a>loadbalancer</h4><ul><li>对集群外部暴露集群内部service的一种方式，一般只有在云平台才能使用</li></ul><h4 id="deployment"><a href="#deployment" class="headerlink" title="deployment"></a>deployment</h4><ul><li>封装了<code>pod/replicaset</code>，可以实现指定pod副本数量，滚动更新，扩容pod，一般一个应用（服务）一个<code>deployment</code></li></ul><h4 id="statefullSet"><a href="#statefullSet" class="headerlink" title="statefullSet"></a>statefullSet</h4><ul><li>相当于有状态服务的<code>deployment</code>，重启后，主机名和pod的名称不会改变</li></ul><h4 id="daemonSet"><a href="#daemonSet" class="headerlink" title="daemonSet"></a>daemonSet</h4><ul><li>在每个<code>node</code>节点都需要运行的pod可以使用<code>daemonSet</code></li></ul><h4 id="job"><a href="#job" class="headerlink" title="job"></a>job</h4><ul><li>一次性任务</li></ul><h4 id="cronJob"><a href="#cronJob" class="headerlink" title="cronJob"></a>cronJob</h4><ul><li>类似于<code>crontab</code>定时执行任务</li></ul><h4 id="dns"><a href="#dns" class="headerlink" title="dns"></a>dns</h4><ul><li><code>kube-dns/coredns</code>提供集群中的dns服务，可以解析service到<code>cluster ip</code>，实现服务发现</li></ul><h4 id="pv"><a href="#pv" class="headerlink" title="pv"></a>pv</h4><ul><li>管理员用来提前创建好的存储空间，供用户申请使用</li></ul><h4 id="pvc"><a href="#pvc" class="headerlink" title="pvc"></a>pvc</h4><ul><li>用户用来申请存储空间</li></ul><h4 id="storageClass"><a href="#storageClass" class="headerlink" title="storageClass"></a>storageClass</h4><ul><li>定义存储类供pvc使用，当用户通过pvc并指定<code>storageClass</code>请求pv时<code>kubernetes</code>可以根据<code>storageClass</code>动态创建pv</li></ul><h3 id="排错技巧"><a href="#排错技巧" class="headerlink" title="排错技巧"></a>排错技巧</h3><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><h5 id="查看pod日志"><a href="#查看pod日志" class="headerlink" title="查看pod日志"></a>查看pod日志</h5><ul><li>kubectl logs pod-name</li></ul><h5 id="查看事件"><a href="#查看事件" class="headerlink" title="查看事件"></a>查看事件</h5><ul><li>kubectl describe pod-name</li></ul><h5 id="查看docker日志"><a href="#查看docker日志" class="headerlink" title="查看docker日志"></a>查看docker日志</h5><ul><li><p>通过<code>kubectl get pod -o wide</code>找到容器运行的<code>node</code>节点</p></li><li><p>在<code>node</code>节点上通过<code>docker ps -a</code>找到出错的容器</p></li><li><p>docker logs container-id</p></li></ul><h5 id="查看kubelet及其他组件日志"><a href="#查看kubelet及其他组件日志" class="headerlink" title="查看kubelet及其他组件日志"></a>查看kubelet及其他组件日志</h5><ul><li>journalctl -u kubelet</li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7使用kubeadm安装k8s-1.11版本多主高可用</title>
      <link href="/posts/33/"/>
      <url>/posts/33/</url>
      
        <content type="html"><![CDATA[<h3 id="实验环境说明"><a href="#实验环境说明" class="headerlink" title="实验环境说明"></a>实验环境说明</h3><h4 id="实验架构图"><a href="#实验架构图" class="headerlink" title="实验架构图"></a>实验架构图</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lab1: etcd master haproxy keepalived 11.11.11.111</span><br><span class="line">lab2: etcd master haproxy keepalived 11.11.11.112</span><br><span class="line">lab3: etcd master haproxy keepalived 11.11.11.113</span><br><span class="line">lab4: node  11.11.11.114</span><br><span class="line">lab5: node  11.11.11.115</span><br><span class="line">lab6: node  11.11.11.116</span><br><span class="line"></span><br><span class="line">vip(loadblancer ip): 11.11.11.110</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="实验使用的Vagrantfile"><a href="#实验使用的Vagrantfile" class="headerlink" title="实验使用的Vagrantfile"></a>实验使用的<code>Vagrantfile</code></h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">    (<span class="number">1</span>..<span class="number">6</span>).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      config.vm.define <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span> <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">        node.vm.box = <span class="string">"centos-7.4-docker-17"</span></span><br><span class="line">        node.ssh.insert_key = <span class="literal">false</span></span><br><span class="line">        node.vm.hostname = <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.network <span class="string">"private_network"</span>, <span class="symbol">ip:</span> <span class="string">"11.11.11.11<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provision <span class="string">"shell"</span>,</span><br><span class="line">          <span class="symbol">inline:</span> <span class="string">"echo hello from node <span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> <span class="params">|v|</span></span><br><span class="line">          v.cpus = <span class="number">2</span></span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, <span class="symbol">:id</span>, <span class="string">"--name"</span>, <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span>, <span class="string">"--memory"</span>, <span class="string">"2048"</span>]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><h3 id="安装配置docker"><a href="#安装配置docker" class="headerlink" title="安装配置docker"></a>安装配置docker</h3><blockquote><p>v1.11.0版本推荐使用docker v17.03,<br>v1.11,v1.12,v1.13, 也可以使用，再高版本的docker可能无法正常使用。<br>测试发现17.09无法正常使用，不能使用资源限制(内存CPU)</p><p>如下操作在所有节点操作</p></blockquote><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载安装指定版本docker-ce</span></span><br><span class="line">yum remove -y docker-ce docker-ce-selinux container-selinux</span><br><span class="line">yum install -y --<span class="built_in">setopt</span>=obsoletes=0 \</span><br><span class="line">docker-ce-17.03.1.ce-1.el7.centos \</span><br><span class="line">docker-ce-selinux-17.03.1.ce-1.el7.centos</span><br></pre></td></tr></table></figure><h4 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="安装-kubeadm-kubelet-和-kubectl"><a href="#安装-kubeadm-kubelet-和-kubectl" class="headerlink" title="安装 kubeadm, kubelet 和 kubectl"></a>安装 kubeadm, kubelet 和 kubectl</h3><blockquote><p>如下操作在所有节点操作</p></blockquote><h4 id="使用阿里镜像安装"><a href="#使用阿里镜像安装" class="headerlink" title="使用阿里镜像安装"></a>使用阿里镜像安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置源</span></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install -y kubelet-1.11.2 kubeadm-1.11.2 kubectl-1.11.2 ipvsadm</span><br></pre></td></tr></table></figure><h3 id="配置系统相关参数"><a href="#配置系统相关参数" class="headerlink" title="配置系统相关参数"></a>配置系统相关参数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时禁用selinux</span></span><br><span class="line"><span class="comment"># 永久关闭 修改/etc/sysconfig/selinux文件设置</span></span><br><span class="line">sed -i <span class="string">'s/SELINUX=permissive/SELINUX=disabled/'</span> /etc/sysconfig/selinux</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时关闭swap</span></span><br><span class="line"><span class="comment"># 永久关闭 注释/etc/fstab文件里swap相关的行</span></span><br><span class="line">swapoff -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启forward</span></span><br><span class="line"><span class="comment"># Docker从1.13版本开始调整了默认的防火墙规则</span></span><br><span class="line"><span class="comment"># 禁用了iptables filter表中FOWARD链</span></span><br><span class="line"><span class="comment"># 这样会引起Kubernetes集群中跨Node的Pod无法通信</span></span><br><span class="line"></span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置转发相关参数，否则可能会出错</span></span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">vm.swappiness=0</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载ipvs相关内核模块</span></span><br><span class="line"><span class="comment"># 如果重新开机，需要重新加载</span></span><br><span class="line">modprobe ip_vs</span><br><span class="line">modprobe ip_vs_rr</span><br><span class="line">modprobe ip_vs_wrr</span><br><span class="line">modprobe ip_vs_sh</span><br><span class="line">modprobe nf_conntrack_ipv4</span><br><span class="line">lsmod | grep ip_vs</span><br></pre></td></tr></table></figure><h3 id="配置hosts解析"><a href="#配置hosts解析" class="headerlink" title="配置hosts解析"></a>配置hosts解析</h3><blockquote><p>如下操作在所有节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt;/etc/hosts&lt;&lt;EOF</span><br><span class="line">11.11.11.111 lab1</span><br><span class="line">11.11.11.112 lab2</span><br><span class="line">11.11.11.113 lab3</span><br><span class="line">11.11.11.114 lab4</span><br><span class="line">11.11.11.115 lab5</span><br><span class="line">11.11.11.116 lab6</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="配置haproxy代理和keepalived"><a href="#配置haproxy代理和keepalived" class="headerlink" title="配置haproxy代理和keepalived"></a>配置haproxy代理和keepalived</h3><blockquote><p>如下操作在节点<code>lab1,lab2,lab3</code>操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取haproxy镜像</span></span><br><span class="line">docker pull haproxy:1.7.8-alpine</span><br><span class="line">mkdir /etc/haproxy</span><br><span class="line">cat &gt;/etc/haproxy/haproxy.cfg&lt;&lt;EOF</span><br><span class="line">global</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 err</span><br><span class="line">  maxconn 50000</span><br><span class="line">  uid 99</span><br><span class="line">  gid 99</span><br><span class="line">  <span class="comment">#daemon</span></span><br><span class="line">  nbproc 1</span><br><span class="line">  pidfile haproxy.pid</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 err</span><br><span class="line">  maxconn 50000</span><br><span class="line">  retries 3</span><br><span class="line">  timeout connect 5s</span><br><span class="line">  timeout client 30s</span><br><span class="line">  timeout server 30s</span><br><span class="line">  timeout check 2s</span><br><span class="line"></span><br><span class="line">listen admin_stats</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:1080</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 err</span><br><span class="line">  stats refresh 30s</span><br><span class="line">  stats uri     /haproxy-status</span><br><span class="line">  stats realm   Haproxy\ Statistics</span><br><span class="line">  stats auth    will:will</span><br><span class="line">  stats hide-version</span><br><span class="line">  stats admin <span class="keyword">if</span> TRUE</span><br><span class="line"></span><br><span class="line">frontend k8s-https</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:8443</span><br><span class="line">  mode tcp</span><br><span class="line">  <span class="comment">#maxconn 50000</span></span><br><span class="line">  default_backend k8s-https</span><br><span class="line"></span><br><span class="line">backend k8s-https</span><br><span class="line">  mode tcp</span><br><span class="line">  balance roundrobin</span><br><span class="line">  server lab1 11.11.11.111:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">  server lab2 11.11.11.112:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">  server lab3 11.11.11.113:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动haproxy</span></span><br><span class="line">docker run -d --name my-haproxy \</span><br><span class="line">-v /etc/haproxy:/usr/<span class="built_in">local</span>/etc/haproxy:ro \</span><br><span class="line">-p 8443:8443 \</span><br><span class="line">-p 1080:1080 \</span><br><span class="line">--restart always \</span><br><span class="line">haproxy:1.7.8-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">docker logs my-haproxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器查看状态</span></span><br><span class="line">http://11.11.11.111:1080/haproxy-status</span><br><span class="line">http://11.11.11.112:1080/haproxy-status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取keepalived镜像</span></span><br><span class="line">docker pull osixia/keepalived:1.4.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="comment"># 载入内核相关模块</span></span><br><span class="line">lsmod | grep ip_vs</span><br><span class="line">modprobe ip_vs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动keepalived</span></span><br><span class="line"><span class="comment"># eth1为本次实验11.11.11.0/24网段的所在网卡</span></span><br><span class="line">docker run --net=host --<span class="built_in">cap</span>-add=NET_ADMIN \</span><br><span class="line">-e KEEPALIVED_INTERFACE=eth1 \</span><br><span class="line">-e KEEPALIVED_VIRTUAL_IPS=<span class="string">"#PYTHON2BASH:['11.11.11.110']"</span> \</span><br><span class="line">-e KEEPALIVED_UNICAST_PEERS=<span class="string">"#PYTHON2BASH:['11.11.11.111','11.11.11.112','11.11.11.113']"</span> \</span><br><span class="line">-e KEEPALIVED_PASSWORD=hello \</span><br><span class="line">--name k8s-keepalived \</span><br><span class="line">--restart always \</span><br><span class="line">-d osixia/keepalived:1.4.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line"><span class="comment"># 会看到两个成为backup 一个成为master</span></span><br><span class="line">docker logs k8s-keepalived</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时会配置 11.11.11.110 到其中一台机器</span></span><br><span class="line"><span class="comment"># ping测试</span></span><br><span class="line">ping -c4 11.11.11.110</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果失败后清理后，重新实验</span></span><br><span class="line">docker rm -f k8s-keepalived</span><br><span class="line">ip a del 11.11.11.110/32 dev eth1</span><br></pre></td></tr></table></figure><h3 id="配置启动kubelet"><a href="#配置启动kubelet" class="headerlink" title="配置启动kubelet"></a>配置启动kubelet</h3><blockquote><p>如下操作在所有节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置kubelet使用国内pause镜像</span></span><br><span class="line"><span class="comment"># 配置kubelet的cgroups</span></span><br><span class="line"><span class="comment"># 获取docker的cgroups</span></span><br><span class="line">DOCKER_CGROUPS=$(docker info | grep <span class="string">'Cgroup'</span> | cut -d<span class="string">' '</span> -f3)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$DOCKER_CGROUPS</span></span><br><span class="line">cat &gt;/etc/sysconfig/kubelet&lt;&lt;EOF</span><br><span class="line">KUBELET_EXTRA_ARGS=<span class="string">"--cgroup-driver=<span class="variable">$DOCKER_CGROUPS</span> --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet &amp;&amp; systemctl restart kubelet</span><br></pre></td></tr></table></figure><h3 id="配置master"><a href="#配置master" class="headerlink" title="配置master"></a>配置master</h3><h4 id="配置第一个master节点"><a href="#配置第一个master节点" class="headerlink" title="配置第一个master节点"></a>配置第一个master节点</h4><blockquote><p>如下操作在<code>lab1</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.11.0 版本 centos 下使用 ipvs 模式会出问题</span></span><br><span class="line"><span class="comment"># 参考 https://github.com/kubernetes/kubernetes/issues/65461</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line">CP0_IP=<span class="string">"11.11.11.111"</span></span><br><span class="line">CP0_HOSTNAME=<span class="string">"lab1"</span></span><br><span class="line">cat &gt;kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha2</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.11.2</span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line"></span><br><span class="line">apiServerCertSANs:</span><br><span class="line">- <span class="string">"lab1"</span></span><br><span class="line">- <span class="string">"lab2"</span></span><br><span class="line">- <span class="string">"lab3"</span></span><br><span class="line">- <span class="string">"11.11.11.111"</span></span><br><span class="line">- <span class="string">"11.11.11.112"</span></span><br><span class="line">- <span class="string">"11.11.11.113"</span></span><br><span class="line">- <span class="string">"11.11.11.110"</span></span><br><span class="line">- <span class="string">"127.0.0.1"</span></span><br><span class="line"></span><br><span class="line">api:</span><br><span class="line">  advertiseAddress: <span class="variable">$CP0_IP</span></span><br><span class="line">  controlPlaneEndpoint: 11.11.11.110:8443</span><br><span class="line"></span><br><span class="line">etcd:</span><br><span class="line">  <span class="built_in">local</span>:</span><br><span class="line">    extraArgs:</span><br><span class="line">      listen-client-urls: <span class="string">"https://127.0.0.1:2379,https://<span class="variable">$CP0_IP</span>:2379"</span></span><br><span class="line">      advertise-client-urls: <span class="string">"https://<span class="variable">$CP0_IP</span>:2379"</span></span><br><span class="line">      listen-peer-urls: <span class="string">"https://<span class="variable">$CP0_IP</span>:2380"</span></span><br><span class="line">      initial-advertise-peer-urls: <span class="string">"https://<span class="variable">$CP0_IP</span>:2380"</span></span><br><span class="line">      initial-cluster: <span class="string">"<span class="variable">$CP0_HOSTNAME</span>=https://<span class="variable">$CP0_IP</span>:2380"</span></span><br><span class="line">    serverCertSANs:</span><br><span class="line">      - <span class="variable">$CP0_HOSTNAME</span></span><br><span class="line">      - <span class="variable">$CP0_IP</span></span><br><span class="line">    peerCertSANs:</span><br><span class="line">      - <span class="variable">$CP0_HOSTNAME</span></span><br><span class="line">      - <span class="variable">$CP0_IP</span></span><br><span class="line"></span><br><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  node-monitor-grace-period: 10s</span><br><span class="line">  pod-eviction-timeout: 10s</span><br><span class="line"></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line">  </span><br><span class="line">kubeProxy:</span><br><span class="line">  config:</span><br><span class="line">    <span class="comment"># mode: ipvs</span></span><br><span class="line">    mode: iptables</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提前拉取镜像</span></span><br><span class="line"><span class="comment"># 如果执行失败 可以多次执行</span></span><br><span class="line">kubeadm config images pull --config kubeadm-master.config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line"><span class="comment"># 注意保存返回的 join 命令</span></span><br><span class="line">kubeadm init --config kubeadm-master.config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包ca相关文件上传至其他master节点</span></span><br><span class="line"><span class="built_in">cd</span> /etc/kubernetes &amp;&amp; tar cvzf k8s-key.tgz admin.conf pki/ca.* pki/sa.* pki/front-proxy-ca.* pki/etcd/ca.*</span><br><span class="line">scp k8s-key.tgz lab2:~/</span><br><span class="line">scp k8s-key.tgz lab3:~/</span><br><span class="line">ssh lab2 <span class="string">'tar xf k8s-key.tgz -C /etc/kubernetes/'</span></span><br><span class="line">ssh lab3 <span class="string">'tar xf k8s-key.tgz -C /etc/kubernetes/'</span></span><br></pre></td></tr></table></figure><h4 id="配置第二个master节点"><a href="#配置第二个master节点" class="headerlink" title="配置第二个master节点"></a>配置第二个master节点</h4><blockquote><p>如下操作在<code>lab2</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.11.0 版本 centos 下使用 ipvs 模式会出问题</span></span><br><span class="line"><span class="comment"># 参考 https://github.com/kubernetes/kubernetes/issues/65461</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line">CP0_IP=<span class="string">"11.11.11.111"</span></span><br><span class="line">CP0_HOSTNAME=<span class="string">"lab1"</span></span><br><span class="line">CP1_IP=<span class="string">"11.11.11.112"</span></span><br><span class="line">CP1_HOSTNAME=<span class="string">"lab2"</span></span><br><span class="line">cat &gt;kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha2</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.11.2</span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line"></span><br><span class="line">apiServerCertSANs:</span><br><span class="line">- <span class="string">"lab1"</span></span><br><span class="line">- <span class="string">"lab2"</span></span><br><span class="line">- <span class="string">"lab3"</span></span><br><span class="line">- <span class="string">"11.11.11.111"</span></span><br><span class="line">- <span class="string">"11.11.11.112"</span></span><br><span class="line">- <span class="string">"11.11.11.113"</span></span><br><span class="line">- <span class="string">"11.11.11.110"</span></span><br><span class="line">- <span class="string">"127.0.0.1"</span></span><br><span class="line"></span><br><span class="line">api:</span><br><span class="line">  advertiseAddress: <span class="variable">$CP1_IP</span></span><br><span class="line">  controlPlaneEndpoint: 11.11.11.110:8443</span><br><span class="line"></span><br><span class="line">etcd:</span><br><span class="line">  <span class="built_in">local</span>:</span><br><span class="line">    extraArgs:</span><br><span class="line">      listen-client-urls: <span class="string">"https://127.0.0.1:2379,https://<span class="variable">$CP1_IP</span>:2379"</span></span><br><span class="line">      advertise-client-urls: <span class="string">"https://<span class="variable">$CP1_IP</span>:2379"</span></span><br><span class="line">      listen-peer-urls: <span class="string">"https://<span class="variable">$CP1_IP</span>:2380"</span></span><br><span class="line">      initial-advertise-peer-urls: <span class="string">"https://<span class="variable">$CP1_IP</span>:2380"</span></span><br><span class="line">      initial-cluster: <span class="string">"<span class="variable">$CP0_HOSTNAME</span>=https://<span class="variable">$CP0_IP</span>:2380,<span class="variable">$CP1_HOSTNAME</span>=https://<span class="variable">$CP1_IP</span>:2380"</span></span><br><span class="line">      initial-cluster-state: existing</span><br><span class="line">    serverCertSANs:</span><br><span class="line">      - <span class="variable">$CP1_HOSTNAME</span></span><br><span class="line">      - <span class="variable">$CP1_IP</span></span><br><span class="line">    peerCertSANs:</span><br><span class="line">      - <span class="variable">$CP1_HOSTNAME</span></span><br><span class="line">      - <span class="variable">$CP1_IP</span></span><br><span class="line"></span><br><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  node-monitor-grace-period: 10s</span><br><span class="line">  pod-eviction-timeout: 10s</span><br><span class="line"></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line">  </span><br><span class="line">kubeProxy:</span><br><span class="line">  config:</span><br><span class="line">    <span class="comment"># mode: ipvs</span></span><br><span class="line">    mode: iptables</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置kubelet</span></span><br><span class="line">kubeadm alpha phase certs all --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase kubelet config write-to-disk --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase kubelet write-env-file --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase kubeconfig kubelet --config kubeadm-master.config</span><br><span class="line">systemctl restart kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加etcd到集群中</span></span><br><span class="line">CP0_IP=<span class="string">"11.11.11.111"</span></span><br><span class="line">CP0_HOSTNAME=<span class="string">"lab1"</span></span><br><span class="line">CP1_IP=<span class="string">"11.11.11.112"</span></span><br><span class="line">CP1_HOSTNAME=<span class="string">"lab2"</span></span><br><span class="line">KUBECONFIG=/etc/kubernetes/admin.conf kubectl <span class="built_in">exec</span> -n kube-system etcd-<span class="variable">$&#123;CP0_HOSTNAME&#125;</span> -- etcdctl --ca-file /etc/kubernetes/pki/etcd/ca.crt --cert-file /etc/kubernetes/pki/etcd/peer.crt --key-file /etc/kubernetes/pki/etcd/peer.key --endpoints=https://<span class="variable">$&#123;CP0_IP&#125;</span>:2379 member add <span class="variable">$&#123;CP1_HOSTNAME&#125;</span> https://<span class="variable">$&#123;CP1_IP&#125;</span>:2380</span><br><span class="line">kubeadm alpha phase etcd <span class="built_in">local</span> --config kubeadm-master.config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提前拉取镜像</span></span><br><span class="line"><span class="comment"># 如果执行失败 可以多次执行</span></span><br><span class="line">kubeadm config images pull --config kubeadm-master.config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubeadm alpha phase kubeconfig all --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase controlplane all --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase mark-master --config kubeadm-master.config</span><br></pre></td></tr></table></figure><h4 id="配置第三个master节点"><a href="#配置第三个master节点" class="headerlink" title="配置第三个master节点"></a>配置第三个master节点</h4><blockquote><p>如下操作在<code>lab3</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.11.0 版本 centos 下使用 ipvs 模式会出问题</span></span><br><span class="line"><span class="comment"># 参考 https://github.com/kubernetes/kubernetes/issues/65461</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line">CP0_IP=<span class="string">"11.11.11.111"</span></span><br><span class="line">CP0_HOSTNAME=<span class="string">"lab1"</span></span><br><span class="line">CP1_IP=<span class="string">"11.11.11.112"</span></span><br><span class="line">CP1_HOSTNAME=<span class="string">"lab2"</span></span><br><span class="line">CP2_IP=<span class="string">"11.11.11.113"</span></span><br><span class="line">CP2_HOSTNAME=<span class="string">"lab3"</span></span><br><span class="line">cat &gt;kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha2</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.11.2</span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line"></span><br><span class="line">apiServerCertSANs:</span><br><span class="line">- <span class="string">"lab1"</span></span><br><span class="line">- <span class="string">"lab2"</span></span><br><span class="line">- <span class="string">"lab3"</span></span><br><span class="line">- <span class="string">"11.11.11.111"</span></span><br><span class="line">- <span class="string">"11.11.11.112"</span></span><br><span class="line">- <span class="string">"11.11.11.113"</span></span><br><span class="line">- <span class="string">"11.11.11.110"</span></span><br><span class="line">- <span class="string">"127.0.0.1"</span></span><br><span class="line"></span><br><span class="line">api:</span><br><span class="line">  advertiseAddress: <span class="variable">$CP2_IP</span></span><br><span class="line">  controlPlaneEndpoint: 11.11.11.110:8443</span><br><span class="line"></span><br><span class="line">etcd:</span><br><span class="line">  <span class="built_in">local</span>:</span><br><span class="line">    extraArgs:</span><br><span class="line">      listen-client-urls: <span class="string">"https://127.0.0.1:2379,https://<span class="variable">$CP2_IP</span>:2379"</span></span><br><span class="line">      advertise-client-urls: <span class="string">"https://<span class="variable">$CP2_IP</span>:2379"</span></span><br><span class="line">      listen-peer-urls: <span class="string">"https://<span class="variable">$CP2_IP</span>:2380"</span></span><br><span class="line">      initial-advertise-peer-urls: <span class="string">"https://<span class="variable">$CP2_IP</span>:2380"</span></span><br><span class="line">      initial-cluster: <span class="string">"<span class="variable">$CP0_HOSTNAME</span>=https://<span class="variable">$CP0_IP</span>:2380,<span class="variable">$CP1_HOSTNAME</span>=https://<span class="variable">$CP1_IP</span>:2380,<span class="variable">$CP2_HOSTNAME</span>=https://<span class="variable">$CP2_IP</span>:2380"</span></span><br><span class="line">      initial-cluster-state: existing</span><br><span class="line">    serverCertSANs:</span><br><span class="line">      - <span class="variable">$CP2_HOSTNAME</span></span><br><span class="line">      - <span class="variable">$CP2_IP</span></span><br><span class="line">    peerCertSANs:</span><br><span class="line">      - <span class="variable">$CP2_HOSTNAME</span></span><br><span class="line">      - <span class="variable">$CP2_IP</span></span><br><span class="line"></span><br><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  node-monitor-grace-period: 10s</span><br><span class="line">  pod-eviction-timeout: 10s</span><br><span class="line"></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line">  </span><br><span class="line">kubeProxy:</span><br><span class="line">  config:</span><br><span class="line">    <span class="comment"># mode: ipvs</span></span><br><span class="line">    mode: iptables</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置kubelet</span></span><br><span class="line">kubeadm alpha phase certs all --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase kubelet config write-to-disk --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase kubelet write-env-file --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase kubeconfig kubelet --config kubeadm-master.config</span><br><span class="line">systemctl restart kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加etcd到集群中</span></span><br><span class="line">CP0_IP=<span class="string">"11.11.11.111"</span></span><br><span class="line">CP0_HOSTNAME=<span class="string">"lab1"</span></span><br><span class="line">CP2_IP=<span class="string">"11.11.11.113"</span></span><br><span class="line">CP2_HOSTNAME=<span class="string">"lab3"</span></span><br><span class="line">KUBECONFIG=/etc/kubernetes/admin.conf kubectl <span class="built_in">exec</span> -n kube-system etcd-<span class="variable">$&#123;CP0_HOSTNAME&#125;</span> -- etcdctl --ca-file /etc/kubernetes/pki/etcd/ca.crt --cert-file /etc/kubernetes/pki/etcd/peer.crt --key-file /etc/kubernetes/pki/etcd/peer.key --endpoints=https://<span class="variable">$&#123;CP0_IP&#125;</span>:2379 member add <span class="variable">$&#123;CP2_HOSTNAME&#125;</span> https://<span class="variable">$&#123;CP2_IP&#125;</span>:2380</span><br><span class="line">kubeadm alpha phase etcd <span class="built_in">local</span> --config kubeadm-master.config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提前拉取镜像</span></span><br><span class="line"><span class="comment"># 如果执行失败 可以多次执行</span></span><br><span class="line">kubeadm config images pull --config kubeadm-master.config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubeadm alpha phase kubeconfig all --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase controlplane all --config kubeadm-master.config</span><br><span class="line">kubeadm alpha phase mark-master --config kubeadm-master.config</span><br></pre></td></tr></table></figure><h3 id="配置使用kubectl"><a href="#配置使用kubectl" class="headerlink" title="配置使用kubectl"></a>配置使用kubectl</h3><blockquote><p>如下操作在任意<code>master</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rm -rf <span class="variable">$HOME</span>/.kube</span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看node节点</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有网络插件也安装配置完成之后，才能会显示为ready状态</span></span><br><span class="line"><span class="comment"># 设置master允许部署应用pod，参与工作负载，现在可以部署其他系统组件</span></span><br><span class="line"><span class="comment"># 如 dashboard, heapster, efk等</span></span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure><h3 id="配置使用网络插件"><a href="#配置使用网络插件" class="headerlink" title="配置使用网络插件"></a>配置使用网络插件</h3><blockquote><p>如下操作在任意<code>master</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载配置</span></span><br><span class="line">mkdir flannel &amp;&amp; <span class="built_in">cd</span> flannel</span><br><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line"><span class="comment"># 此处的ip配置要与上面kubeadm的pod-network一致</span></span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"Network"</span>: <span class="string">"10.244.0.0/16"</span>,</span><br><span class="line">      <span class="string">"Backend"</span>: &#123;</span><br><span class="line">        <span class="string">"Type"</span>: <span class="string">"vxlan"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像</span></span><br><span class="line">image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果Node有多个网卡的话，参考flannel issues 39701，</span></span><br><span class="line"><span class="comment"># https://github.com/kubernetes/kubernetes/issues/39701</span></span><br><span class="line"><span class="comment"># 目前需要在kube-flannel.yml中使用--iface参数指定集群主机内网网卡的名称，</span></span><br><span class="line"><span class="comment"># 否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，</span></span><br><span class="line"><span class="comment"># flanneld启动参数加上--iface=&lt;iface-name&gt;</span></span><br><span class="line">    containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        - --iface=eth1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br></pre></td></tr></table></figure><h3 id="配置node节点加入集群"><a href="#配置node节点加入集群" class="headerlink" title="配置node节点加入集群"></a>配置node节点加入集群</h3><blockquote><p>如下操作在所有<code>node</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此命令为初始化master成功后返回的结果</span></span><br><span class="line">kubeadm join 11.11.11.110:8443 --token yzb7v7.dy40mhlljt1d48i9 --discovery-token-ca-cert-hash sha256:61ec309e6f942305006e6622dcadedcc64420e361231eff23cb535a183c0e77a</span><br></pre></td></tr></table></figure><h3 id="基础测试"><a href="#基础测试" class="headerlink" title="基础测试"></a>基础测试</h3><h4 id="测试容器间的通信和DNS"><a href="#测试容器间的通信和DNS" class="headerlink" title="测试容器间的通信和DNS"></a>测试容器间的通信和DNS</h4><blockquote><p>配置好网络之后，kubeadm会自动部署coredns</p><p>如下测试可以在配置kubectl的节点上操作</p></blockquote><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl run nginx --replicas=2 --image=nginx:alpine --port=80</span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --name=example-service-nodeport</span><br><span class="line">kubectl expose deployment nginx --name=example-service</span><br></pre></td></tr></table></figure><h5 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deploy</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line">kubectl describe svc example-service</span><br></pre></td></tr></table></figure><h5 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl run curl --image=radial/busyboxplus:curl -i --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br></pre></td></tr></table></figure><h5 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10.96.59.56 为查看svc时获取到的clusterip</span></span><br><span class="line">curl <span class="string">"10.96.59.56:80"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 32223 为查看svc时获取到的 nodeport</span></span><br><span class="line">http://11.11.11.112:32223/</span><br><span class="line">http://11.11.11.113:32223/</span><br></pre></td></tr></table></figure><h5 id="清理删除"><a href="#清理删除" class="headerlink" title="清理删除"></a>清理删除</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete svc example-service example-service-nodeport</span><br><span class="line">kubectl delete deploy nginx curl</span><br></pre></td></tr></table></figure><h3 id="高可用测试"><a href="#高可用测试" class="headerlink" title="高可用测试"></a>高可用测试</h3><p>关闭任一<code>master</code>节点测试集群是能否正常执行上一步的<code>基础测试</code>，查看相关信息，不能同时关闭两个节点，因为3个节点组成的<code>etcd</code>集群，最多只能有一个当机。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看组件状态</span></span><br><span class="line">kubectl get pod --all-namespaces -o wide</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab1</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab2</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab3</span><br><span class="line">kubectl get nodes -o wide</span><br><span class="line">kubectl get deploy</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问测试</span></span><br><span class="line">CURL_POD=$(kubectl get pods | grep curl | grep Running | cut -d <span class="string">' '</span> -f1)</span><br><span class="line">kubectl <span class="built_in">exec</span> -ti <span class="variable">$CURL_POD</span> -- sh --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br></pre></td></tr></table></figure><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><p><strong>忘记初始master节点时的node节点加入集群命令怎么办</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单方法</span></span><br><span class="line">kubeadm token create --<span class="built_in">print</span>-join-command</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方法</span></span><br><span class="line">token=$(kubeadm token generate)</span><br><span class="line">kubeadm token create <span class="variable">$token</span> --<span class="built_in">print</span>-join-command --ttl=0</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://kubernetes.io/docs/setup/independent/install-kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/independent/install-kubeadm/</a></li><li><a href="https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/</a></li><li><a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/</a></li><li><a href="https://kubernetes.io/docs/setup/independent/high-availability/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/independent/high-availability/</a></li><li><a href="https://sealyun.com/post/k8s-ipvs/" target="_blank" rel="noopener">https://sealyun.com/post/k8s-ipvs/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7使用kubeadm安装k8s-1.11版本</title>
      <link href="/posts/32/"/>
      <url>/posts/32/</url>
      
        <content type="html"><![CDATA[<h3 id="实验环境说明"><a href="#实验环境说明" class="headerlink" title="实验环境说明"></a>实验环境说明</h3><h4 id="实验架构"><a href="#实验架构" class="headerlink" title="实验架构"></a>实验架构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lab1: master 11.11.11.111</span><br><span class="line">lab2: node 11.11.11.112</span><br><span class="line">lab3: node 11.11.11.113</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="实验使用的Vagrantfile"><a href="#实验使用的Vagrantfile" class="headerlink" title="实验使用的Vagrantfile"></a>实验使用的<code>Vagrantfile</code></h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">    (<span class="number">1</span>..<span class="number">3</span>).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      config.vm.define <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span> <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">        node.vm.box = <span class="string">"centos-7.4-docker-17"</span></span><br><span class="line">        node.ssh.insert_key = <span class="literal">false</span></span><br><span class="line">        node.vm.hostname = <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.network <span class="string">"private_network"</span>, <span class="symbol">ip:</span> <span class="string">"11.11.11.11<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provision <span class="string">"shell"</span>,</span><br><span class="line">          <span class="symbol">inline:</span> <span class="string">"echo hello from node <span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> <span class="params">|v|</span></span><br><span class="line">          v.cpus = <span class="number">2</span></span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, <span class="symbol">:id</span>, <span class="string">"--name"</span>, <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span>, <span class="string">"--memory"</span>, <span class="string">"2048"</span>]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><h3 id="安装配置docker"><a href="#安装配置docker" class="headerlink" title="安装配置docker"></a>安装配置docker</h3><blockquote><p>v1.11.0版本推荐使用docker v17.03,<br>v1.11,v1.12,v1.13, 也可以使用，再高版本的docker可能无法正常使用。<br>测试发现17.09无法正常使用，不能使用资源限制(内存CPU)</p><p>如下操作在所有节点操作</p></blockquote><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载安装指定版本docker-ce</span></span><br><span class="line">yum remove -y docker-ce docker-ce-selinux container-selinux</span><br><span class="line">yum install -y --<span class="built_in">setopt</span>=obsoletes=0 \</span><br><span class="line">docker-ce-17.03.1.ce-1.el7.centos \</span><br><span class="line">docker-ce-selinux-17.03.1.ce-1.el7.centos</span><br></pre></td></tr></table></figure><h4 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="安装-kubeadm-kubelet-和-kubectl"><a href="#安装-kubeadm-kubelet-和-kubectl" class="headerlink" title="安装 kubeadm, kubelet 和 kubectl"></a>安装 kubeadm, kubelet 和 kubectl</h3><blockquote><p>如下操作在所有节点操作</p></blockquote><h4 id="使用阿里镜像安装"><a href="#使用阿里镜像安装" class="headerlink" title="使用阿里镜像安装"></a>使用阿里镜像安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置源</span></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install -y kubelet-1.11.2 kubeadm-1.11.2 kubectl-1.11.2 ipvsadm</span><br></pre></td></tr></table></figure><h3 id="配置系统相关参数"><a href="#配置系统相关参数" class="headerlink" title="配置系统相关参数"></a>配置系统相关参数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时禁用selinux</span></span><br><span class="line"><span class="comment"># 永久关闭 修改/etc/sysconfig/selinux文件设置</span></span><br><span class="line">sed -i <span class="string">'s/SELINUX=permissive/SELINUX=disabled/'</span> /etc/sysconfig/selinux</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时关闭swap</span></span><br><span class="line"><span class="comment"># 永久关闭 注释/etc/fstab文件里swap相关的行</span></span><br><span class="line">swapoff -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启forward</span></span><br><span class="line"><span class="comment"># Docker从1.13版本开始调整了默认的防火墙规则</span></span><br><span class="line"><span class="comment"># 禁用了iptables filter表中FOWARD链</span></span><br><span class="line"><span class="comment"># 这样会引起Kubernetes集群中跨Node的Pod无法通信</span></span><br><span class="line"></span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置转发相关参数，否则可能会出错</span></span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">vm.swappiness=0</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载ipvs相关内核模块</span></span><br><span class="line"><span class="comment"># 如果重新开机，需要重新加载</span></span><br><span class="line">modprobe ip_vs</span><br><span class="line">modprobe ip_vs_rr</span><br><span class="line">modprobe ip_vs_wrr</span><br><span class="line">modprobe ip_vs_sh</span><br><span class="line">modprobe nf_conntrack_ipv4</span><br><span class="line">lsmod | grep ip_vs</span><br></pre></td></tr></table></figure><h3 id="配置hosts解析"><a href="#配置hosts解析" class="headerlink" title="配置hosts解析"></a>配置hosts解析</h3><blockquote><p>如下操作在所有节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt;/etc/hosts&lt;&lt;EOF</span><br><span class="line">11.11.11.111 lab1</span><br><span class="line">11.11.11.112 lab2</span><br><span class="line">11.11.11.113 lab3</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="配置启动kubelet"><a href="#配置启动kubelet" class="headerlink" title="配置启动kubelet"></a>配置启动kubelet</h3><blockquote><p>如下操作在所有节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置kubelet使用国内pause镜像</span></span><br><span class="line"><span class="comment"># 配置kubelet的cgroups</span></span><br><span class="line"><span class="comment"># 获取docker的cgroups</span></span><br><span class="line">DOCKER_CGROUPS=$(docker info | grep <span class="string">'Cgroup'</span> | cut -d<span class="string">' '</span> -f3)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$DOCKER_CGROUPS</span></span><br><span class="line">cat &gt;/etc/sysconfig/kubelet&lt;&lt;EOF</span><br><span class="line">KUBELET_EXTRA_ARGS=<span class="string">"--cgroup-driver=<span class="variable">$DOCKER_CGROUPS</span> --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure><h3 id="配置master节点"><a href="#配置master节点" class="headerlink" title="配置master节点"></a>配置master节点</h3><blockquote><p>如下操作在<code>master</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.11.0 版本 centos 下使用 ipvs 模式会出问题</span></span><br><span class="line"><span class="comment"># 参考 https://github.com/kubernetes/kubernetes/issues/65461</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line">cat &gt;kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha2</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.11.2</span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line">api:</span><br><span class="line">  advertiseAddress: 11.11.11.111</span><br><span class="line"></span><br><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  node-monitor-grace-period: 10s</span><br><span class="line">  pod-eviction-timeout: 10s</span><br><span class="line"></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line">  </span><br><span class="line">kubeProxy:</span><br><span class="line">  config:</span><br><span class="line">    mode: ipvs</span><br><span class="line">    <span class="comment"># mode: iptables</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提前拉取镜像</span></span><br><span class="line"><span class="comment"># 如果执行失败 可以多次执行</span></span><br><span class="line">kubeadm config images pull --config kubeadm-master.config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">kubeadm init --config kubeadm-master.config</span><br></pre></td></tr></table></figure><h3 id="配置使用kubectl"><a href="#配置使用kubectl" class="headerlink" title="配置使用kubectl"></a>配置使用kubectl</h3><blockquote><p>如下操作在<code>master</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rm -rf <span class="variable">$HOME</span>/.kube</span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看node节点</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有网络插件也安装配置完成之后，才能会显示为ready状态</span></span><br><span class="line"><span class="comment"># 设置master允许部署应用pod，参与工作负载，现在可以部署其他系统组件</span></span><br><span class="line"><span class="comment"># 如 dashboard, heapster, efk等</span></span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure><h3 id="配置使用网络插件"><a href="#配置使用网络插件" class="headerlink" title="配置使用网络插件"></a>配置使用网络插件</h3><blockquote><p>如下操作在<code>master</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载配置</span></span><br><span class="line">mkdir flannel &amp;&amp; <span class="built_in">cd</span> flannel</span><br><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/v0.10.0/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line"><span class="comment"># 此处的ip配置要与上面kubeadm的pod-network一致</span></span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"Network"</span>: <span class="string">"10.244.0.0/16"</span>,</span><br><span class="line">      <span class="string">"Backend"</span>: &#123;</span><br><span class="line">        <span class="string">"Type"</span>: <span class="string">"vxlan"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像</span></span><br><span class="line">image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果Node有多个网卡的话，参考flannel issues 39701，</span></span><br><span class="line"><span class="comment"># https://github.com/kubernetes/kubernetes/issues/39701</span></span><br><span class="line"><span class="comment"># 目前需要在kube-flannel.yml中使用--iface参数指定集群主机内网网卡的名称，</span></span><br><span class="line"><span class="comment"># 否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，</span></span><br><span class="line"><span class="comment"># flanneld启动参数加上--iface=&lt;iface-name&gt;</span></span><br><span class="line">    containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        - --iface=eth1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br></pre></td></tr></table></figure><h3 id="配置node节点加入集群"><a href="#配置node节点加入集群" class="headerlink" title="配置node节点加入集群"></a>配置node节点加入集群</h3><blockquote><p>如下操作在所有<code>node</code>节点操作</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此命令为初始化master成功后返回的结果</span></span><br><span class="line">kubeadm join 11.11.11.111:6443 --token yl53pn.wpx4mvx6a6jfkjhw --discovery-token-ca-cert-hash sha256:17751fcda3e79da63f5d0c4a3586e97de8b8b1d017c1a6977c88136409af5240</span><br></pre></td></tr></table></figure><h3 id="测试容器间的通信和DNS"><a href="#测试容器间的通信和DNS" class="headerlink" title="测试容器间的通信和DNS"></a>测试容器间的通信和DNS</h3><blockquote><p>配置好网络之后，kubeadm会自动部署coredns</p></blockquote><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl run nginx --replicas=2 --image=nginx:alpine --port=80</span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --name=example-service-nodeport</span><br><span class="line">kubectl expose deployment nginx --name=example-service</span><br></pre></td></tr></table></figure><h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deploy</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line">kubectl describe svc example-service</span><br></pre></td></tr></table></figure><h4 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl run curl --image=radial/busyboxplus:curl -i --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br></pre></td></tr></table></figure><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10.96.59.56 为查看svc时获取到的clusterip</span></span><br><span class="line">curl <span class="string">"10.96.59.56:80"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 32223 为查看svc时获取到的 nodeport</span></span><br><span class="line">http://11.11.11.112:32223/</span><br><span class="line">http://11.11.11.113:32223/</span><br></pre></td></tr></table></figure><h4 id="清理删除"><a href="#清理删除" class="headerlink" title="清理删除"></a>清理删除</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete svc example-service example-service-nodeport</span><br><span class="line">kubectl delete deploy nginx curl</span><br></pre></td></tr></table></figure><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><p><strong>忘记初始master节点时的node节点加入集群命令怎么办</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单方法</span></span><br><span class="line">kubeadm token create --<span class="built_in">print</span>-join-command</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方法</span></span><br><span class="line">token=$(kubeadm token generate)</span><br><span class="line">kubeadm token create <span class="variable">$token</span> --<span class="built_in">print</span>-join-command --ttl=0</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://kubernetes.io/docs/setup/independent/install-kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/independent/install-kubeadm/</a></li><li><a href="https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/</a></li><li><a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/</a></li><li><a href="https://sealyun.com/post/k8s-ipvs/" target="_blank" rel="noopener">https://sealyun.com/post/k8s-ipvs/</a></li><li><a href="https://blog.frognew.com/2017/12/kubeadm-install-kubernetes-1.9.html" target="_blank" rel="noopener">https://blog.frognew.com/2017/12/kubeadm-install-kubernetes-1.9.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>istio-0.8长期支持版微服务实验</title>
      <link href="/posts/31/"/>
      <url>/posts/31/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本实验通过在k8s上部署istio，实现微服务的基础功能。其中会涉及到服务的限流，超时，熔断，降级，流量分隔，A/B测试等功能。实验之前需要安装k8s和istio，请参考之前文章。注意开启istio的自动注入功能，并在 default namespace 启用自动注入功能。</p><a id="more"></a><p>本实验的服务间调用关系如下：</p><blockquote><p>本实验采用时下流行的前后端分离模式</p><p>前端项目基于vue/react实现</p><p>前端调用python实现的API接口</p><p>python服务调用后端node实现的服务和lua实现的服务</p><p>node服务调用go实现的服务</p><ul><li>—-&gt;service-js</li><li>—-&gt;service-python<ul><li>—-&gt;service-lua</li><li>—-&gt;service-node<ul><li>—-&gt;service-go</li></ul></li></ul></li></ul></blockquote><p>本实验使用的语言技术栈：</p><ul><li>vue/react</li><li>python2/3</li><li>node8/10</li><li>openresty1.11 /1.13</li><li>go1.10/1.9</li></ul><p>架构图如下：</p><p><img src="/posts/31/istio-test-arch2.png" alt=""></p><p><code>istio-0.8</code>版本配置发生很大的变化，由原来的<code>v1alpha1</code>升级到了<code>v1alpha3</code>，主要变化如下</p><ul><li>使用<code>virtualservice</code>和<code>destinationrule</code> 代替原来的<code>routerule</code></li><li>使用<code>gateway</code>代替了原来的<code>ingress</code></li></ul><p>每个<code>virtualservice</code>都要指定要去向哪一个<code>destinationrule</code> ，<code>virtualservice</code>指定访问哪个地址时会使用这个路由，相当于<code>nginx</code>上配置的<code>vhosts</code></p><h3 id="下载实验仓库"><a href="#下载实验仓库" class="headerlink" title="下载实验仓库"></a>下载实验仓库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/mgxian/istio-test</span><br><span class="line"><span class="built_in">cd</span> istio-test &amp;&amp; git checkout v2</span><br></pre></td></tr></table></figure><h3 id="部署服务"><a href="#部署服务" class="headerlink" title="部署服务"></a>部署服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f service/go/v1/go-v1.yml</span><br><span class="line">kubectl apply -f service/go/v2/go-v2.yml</span><br><span class="line">kubectl apply -f service/python/v1/python-v1.yml</span><br><span class="line">kubectl apply -f service/python/v2/python-v2.yml</span><br><span class="line">kubectl apply -f service/js/v1/js-v1.yml</span><br><span class="line">kubectl apply -f service/js/v2/js-v2.yml</span><br><span class="line">kubectl apply -f service/node/v1/node-v1.yml</span><br><span class="line">kubectl apply -f service/node/v2/node-v2.yml</span><br><span class="line">kubectl apply -f service/lua/v1/lua-v1.yml</span><br><span class="line">kubectl apply -f service/lua/v2/lua-v2.yml</span><br></pre></td></tr></table></figure><h3 id="创建Gateway"><a href="#创建Gateway" class="headerlink" title="创建Gateway"></a>创建Gateway</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用istio提供的Gateway功能</span></span><br><span class="line"><span class="comment"># 暴露js和python服务让k8s集群外部访问</span></span><br><span class="line">istioctl create -f istio/gateway.yml</span><br><span class="line">istioctl create -f istio/gateway-virtualservice.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">istioctl get gateway</span><br><span class="line">istioctl get virtualservice</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试访问</span></span><br><span class="line">INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=<span class="string">'&#123;.spec.ports[?(@.name=="http2")].nodePort&#125;'</span>)</span><br><span class="line">NODE_NAME=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">NODE_IP=$(ping -c 1 <span class="variable">$NODE_NAME</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">export</span> GATEWAY_URL=<span class="variable">$NODE_IP</span>:<span class="variable">$INGRESS_PORT</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"curl -I http://<span class="variable">$GATEWAY_URL</span>/"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"curl -I http://<span class="variable">$NODE_IP</span>/"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问返回404表示正确</span></span><br></pre></td></tr></table></figure><h3 id="配置测试访问环境"><a href="#配置测试访问环境" class="headerlink" title="配置测试访问环境"></a>配置测试访问环境</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置hosts解析</span></span><br><span class="line"><span class="comment"># 11.11.11.112为其中一个node的ip</span></span><br><span class="line">11.11.11.112 istio-test.will</span><br><span class="line"></span><br><span class="line">curl -I http://istio-test.will/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用curl</span></span><br><span class="line">curl -I istio-test.will</span><br><span class="line">curl -s istio-test.will | egrep <span class="string">"vue|React"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时如果用浏览器，可能会出会页面显示不正常的情况。</span></span><br><span class="line"><span class="comment"># 因为此时请求会轮流分发到后端js服务的v1/v2版本，因此css/js并不能正常加载</span></span><br></pre></td></tr></table></figure><h3 id="流量管理"><a href="#流量管理" class="headerlink" title="流量管理"></a>流量管理</h3><p>根据请求的信息，把流量路由到服务的不同版本。实验过程如果没有达到预期效果，很有可能是因为存在路由规则冲突，而且没有设置优先级，可以先删除之前设置的路由规则或者把优先级设置高一点。</p><h4 id="把所有流量导向v1版本"><a href="#把所有流量导向v1版本" class="headerlink" title="把所有流量导向v1版本"></a>把所有流量导向v1版本</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理之前创建的gateway相关的路由规则</span></span><br><span class="line">istioctl delete -f istio/gateway-virtualservice.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建路由规则</span></span><br><span class="line">istioctl create -f istio/gateway-virtualservice-v1.yml</span><br><span class="line">istioctl create -f istio/route-rule-all-v1.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看路由规则</span></span><br><span class="line">istioctl get virtualservice</span><br><span class="line">istioctl get destinationrule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问浏览器测试</span></span><br><span class="line">http://istio-test.will/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时你会看到react app的界面</span></span><br><span class="line"><span class="comment"># 点击发射按钮，会发送ajax请求到python服务</span></span><br><span class="line"><span class="comment"># 由于把所有流量都导向了v1版本</span></span><br><span class="line"><span class="comment"># 多次点击发射按钮会得到一样的内容</span></span><br><span class="line"><span class="comment"># react-----&gt;Python2.7.15-----&gt;Gogo1.9.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-all-v1.yml</span><br><span class="line">istioctl delete -f istio/gateway-virtualservice-v1.yml</span><br></pre></td></tr></table></figure><h4 id="根据请求把流量导向不同版本（A-B测试）"><a href="#根据请求把流量导向不同版本（A-B测试）" class="headerlink" title="根据请求把流量导向不同版本（A/B测试）"></a>根据请求把流量导向不同版本（A/B测试）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建路由规则</span></span><br><span class="line"><span class="comment"># 根据浏览器的不同返回不同内容</span></span><br><span class="line">istioctl create -f istio/route-rule-js-by-agent.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看路由规则</span></span><br><span class="line">istioctl get virtualservice</span><br><span class="line">istioctl get destinationrule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用访问浏览器</span></span><br><span class="line"><span class="comment"># 如果你用chrome浏览器你会看到react app的界面</span></span><br><span class="line"><span class="comment"># 如果你用firefox浏览器你会看到vue app的界面</span></span><br><span class="line"><span class="comment"># 多次点击发射按钮，会获取到不同的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-js-by-agent.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据前端app不同使用不同版本的python服务</span></span><br><span class="line">istioctl create -f istio/route-rule-python-by-header.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-python-by-header.yml</span><br></pre></td></tr></table></figure><h4 id="根据源服务把流量导向不同版本"><a href="#根据源服务把流量导向不同版本" class="headerlink" title="根据源服务把流量导向不同版本"></a>根据源服务把流量导向不同版本</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先创建如下路由方便测试访问</span></span><br><span class="line"><span class="comment"># 根据浏览器的不同返回不同内容</span></span><br><span class="line">istioctl create -f istio/route-rule-js-by-agent.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建路由规则</span></span><br><span class="line">istioctl create -f istio/route-rule-go-by-source.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-js-by-agent.yml</span><br><span class="line">istioctl delete -f istio/route-rule-go-by-source.yml</span><br></pre></td></tr></table></figure><h4 id="指定权重进行流量分隔"><a href="#指定权重进行流量分隔" class="headerlink" title="指定权重进行流量分隔"></a>指定权重进行流量分隔</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定权重把流量分隔</span></span><br><span class="line"><span class="comment"># 25%流量路由到v1版本</span></span><br><span class="line"><span class="comment"># 75%流量路由到v2版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 先创建如下路由方便测试访问</span></span><br><span class="line"><span class="comment"># 根据浏览器的不同返回不同内容</span></span><br><span class="line">istioctl create -f istio/route-rule-js-by-agent.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建路由规则</span></span><br><span class="line">istioctl create -f istio/route-rule-go-v1-v2.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-js-by-agent.yml</span><br><span class="line">istioctl delete -f istio/route-rule-go-v1-v2.yaml</span><br></pre></td></tr></table></figure><h4 id="集群内访问公开服务"><a href="#集群内访问公开服务" class="headerlink" title="集群内访问公开服务"></a>集群内访问公开服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认情况下，启用了istio的服务是无法访问外部url的</span></span><br><span class="line"><span class="comment"># 如果需要访问外部url，需要使用egress进行配置</span></span><br><span class="line"><span class="comment"># egress同样支持设置路由规则</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># http</span></span><br><span class="line">istioctl create -f istio/egress-rule-http-bin.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp</span></span><br><span class="line">istioctl create -f istio/egress-rule-tcp-wikipedia.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">istioctl get serviceentry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="comment"># 使用exec进入作为测试源使用的pod</span></span><br><span class="line">kubectl apply -f istio/sleep.yaml</span><br><span class="line">kubectl get pods</span><br><span class="line"><span class="built_in">export</span> SOURCE_POD=$(kubectl get pod -l app=sleep -o jsonpath=&#123;.items..metadata.name&#125;)</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$SOURCE_POD</span> -c sleep bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># http测试</span></span><br><span class="line">curl http://httpbin.org/headers</span><br><span class="line">curl http://httpbin.org/delay/5</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp测试</span></span><br><span class="line">curl -o /dev/null -s -w <span class="string">"%&#123;http_code&#125;\n"</span> https://www.wikipedia.org</span><br><span class="line">curl -s https://en.wikipedia.org/wiki/Main_Page | grep articlecount | grep <span class="string">'Special:Statistics'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">istioctl delete -f istio/egress-rule-http-bin.yml</span><br><span class="line">istioctl delete -f istio/egress-rule-tcp-wikipedia.yml</span><br><span class="line">kubectl delete -f istio/sleep.yaml</span><br></pre></td></tr></table></figure><h3 id="故障管理"><a href="#故障管理" class="headerlink" title="故障管理"></a>故障管理</h3><ul><li>调用超时设置和重试设置</li><li>故障注入，模拟服务故障</li></ul><h4 id="设置超时时间与模拟服务超时故障"><a href="#设置超时时间与模拟服务超时故障" class="headerlink" title="设置超时时间与模拟服务超时故障"></a>设置超时时间与模拟服务超时故障</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先创建如下路由方便测试访问</span></span><br><span class="line"><span class="comment"># 根据浏览器的不同返回不同内容</span></span><br><span class="line">istioctl create -f istio/route-rule-js-by-agent.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置python服务超时时间</span></span><br><span class="line">istioctl create -f istio/route-rule-node-timeout.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟go服务超时故障</span></span><br><span class="line">istioctl create -f istio/route-rule-go-delay.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用浏览器访问并打开调试面板查看网络标签（按F12键）</span></span><br><span class="line"><span class="comment"># 多次点击发射按钮观察响应时间</span></span><br><span class="line"><span class="comment"># 会看到部分50%的请求会返回500错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-js-by-agent.yml</span><br><span class="line">istioctl delete -f istio/route-rule-node-timeout.yml</span><br><span class="line">istioctl delete -f istio/route-rule-go-delay.yml</span><br></pre></td></tr></table></figure><p><img src="/posts/31/istio-timeout-delay-test.png" alt="超时模拟"></p><h4 id="设置重试与模拟服务500故障"><a href="#设置重试与模拟服务500故障" class="headerlink" title="设置重试与模拟服务500故障"></a>设置重试与模拟服务500故障</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先创建如下路由方便测试访问</span></span><br><span class="line"><span class="comment"># 根据浏览器的不同返回不同内容</span></span><br><span class="line">istioctl create -f istio/route-rule-js-by-agent.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置python服务超时时间</span></span><br><span class="line">istioctl create -f istio/route-rule-node-retry.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟go服务超时故障</span></span><br><span class="line">istioctl create -f istio/route-rule-go-abort.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用浏览器访问并打开调试面板查看网络标签（按F12键）</span></span><br><span class="line"><span class="comment"># 多次点击发射按钮观察响应时间</span></span><br><span class="line"><span class="comment"># 会看到部分请求会返回500错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-js-by-agent.yml</span><br><span class="line">istioctl delete -f istio/route-rule-node-retry.yml</span><br><span class="line">istioctl delete -f istio/route-rule-go-abort.yml</span><br></pre></td></tr></table></figure><p><img src="/posts/31/istio-retry-abort-test.png" alt="模拟服务500故障"></p><h4 id="超时和服务故障模拟配合使用"><a href="#超时和服务故障模拟配合使用" class="headerlink" title="超时和服务故障模拟配合使用"></a>超时和服务故障模拟配合使用</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有请求延迟5秒钟，然后失败其中的10％</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">  route:</span></span><br><span class="line"><span class="attr">  - labels:</span></span><br><span class="line"><span class="attr">      version:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">  httpFault:</span></span><br><span class="line"><span class="attr">    delay:</span></span><br><span class="line"><span class="attr">      fixedDelay:</span> <span class="number">5</span><span class="string">s</span></span><br><span class="line"><span class="attr">    abort:</span></span><br><span class="line"><span class="attr">      percent:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">      httpStatus:</span> <span class="number">400</span></span><br></pre></td></tr></table></figure><h4 id="熔断器"><a href="#熔断器" class="headerlink" title="熔断器"></a>熔断器</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置熔断规则</span></span><br><span class="line">istioctl create -f istio/route-rule-go-cb.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看规则</span></span><br><span class="line">istioctl get destinationrule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试用的fortio</span></span><br><span class="line">kubectl apply -f istio/fortio-deploy.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常访问测试</span></span><br><span class="line">FORTIO_POD=$(kubectl get pod | grep fortio | awk <span class="string">'&#123; print $1 &#125;'</span>)</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -curl http://service-go/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试熔断 2并发</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -c 2 -qps 0 -n 20 -loglevel Warning http://service-go/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试熔断 3并发</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -c 3 -qps 0 -n 20 -loglevel Warning http://service-go/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加并发会看到失败的请求占比增高</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line"><span class="comment"># upstream_rq_pending_overflow 表示被熔断的请求数</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c istio-proxy  -- sh -c <span class="string">'curl localhost:15000/stats'</span> | grep service-go | grep pending</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f istio/fortio-deploy.yaml</span><br><span class="line">istioctl delete -f istio/route-rule-go-cb.yml</span><br></pre></td></tr></table></figure><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><p>动态设置服务qps</p><ul><li><a href="https://github.com/istio/istio/blob/master/samples/bookinfo/kube/mixer-rule-ratings-ratelimit.yaml" target="_blank" rel="noopener">https://github.com/istio/istio/blob/master/samples/bookinfo/kube/mixer-rule-ratings-ratelimit.yaml</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 memquota, quota, rule, QuotaSpec, QuotaSpecBinding 启用限速</span></span><br><span class="line"><span class="comment"># 默认设置500qps</span></span><br><span class="line">istioctl create -f istio/ratelimit-handler.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置速率限制实例和规则</span></span><br><span class="line">istioctl create -f istio/ratelimit-rule-service-go.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get memquota -n istio-system</span><br><span class="line">kubectl get quota -n istio-system</span><br><span class="line">kubectl get rule -n istio-system</span><br><span class="line">kubectl get quotaspec -n istio-system</span><br><span class="line">kubectl get quotaspecbinding -n istio-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试用的fortio</span></span><br><span class="line">kubectl apply -f istio/fortio-deploy.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常访问测试</span></span><br><span class="line">FORTIO_POD=$(kubectl get pod | grep fortio | awk <span class="string">'&#123; print $1 &#125;'</span>)</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -curl http://service-node/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="comment"># 会出现部分请求不正常</span></span><br><span class="line"><span class="comment"># node 返回 code 500</span></span><br><span class="line"><span class="comment"># go 返回 code 429</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -qps 20 -n 100 -loglevel Warning http://service-node/env</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -qps 50 -n 100 -loglevel Warning http://service-go/env</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">istioctl delete -f istio/ratelimit-handler.yaml</span><br><span class="line">istioctl delete -f istio/ratelimit-rule-service-go.yaml</span><br><span class="line">kubectl delete -f istio/fortio-deploy.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带条件的速率限制</span></span><br><span class="line">apiVersion: config.istio.io/v1alpha2</span><br><span class="line">kind: rule</span><br><span class="line">metadata:</span><br><span class="line"> name: quota</span><br><span class="line"> namespace: istio-system</span><br><span class="line">spec:</span><br><span class="line"> match: source.namespace != destination.namespace</span><br><span class="line"> actions:</span><br><span class="line"> - handler: handler.memquota</span><br><span class="line">   instances:</span><br><span class="line">   - requestcount.quota</span><br></pre></td></tr></table></figure><h3 id="流量镜像"><a href="#流量镜像" class="headerlink" title="流量镜像"></a>流量镜像</h3><p>复制服务的流量到别一个镜像服务，一般用于线上新上服务的测试。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建测试用的fortio</span></span><br><span class="line">kubectl apply -f istio/fortio-deploy.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常访问测试</span></span><br><span class="line">FORTIO_POD=$(kubectl get pod | grep fortio | awk <span class="string">'&#123; print $1 &#125;'</span>)</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -curl http://service-go/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看v1的日志</span></span><br><span class="line">kubectl logs -f $(kubectl get pods | grep service-go-v1 | awk <span class="string">'&#123;print $1&#125;'</span>| head -n 1) -c service-go</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看v2的日志</span></span><br><span class="line"><span class="comment"># 再开一个终端查看日志</span></span><br><span class="line">kubectl logs -f $(kubectl get pods | grep service-go-v2 | awk <span class="string">'&#123;print $1&#125;'</span>| head -n 1) -c service-go</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建镜像规则</span></span><br><span class="line">istioctl create -f istio/route-rule-go-mirror.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试多次访问</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -c 10 -qps 0 -t 10s -loglevel Warning http://service-go/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f istio/fortio-deploy.yaml</span><br><span class="line">istioctl delete -f istio/route-rule-go-mirror.yml</span><br></pre></td></tr></table></figure><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除相关deploy和svc</span></span><br><span class="line">kubectl delete -f service/go/v1/go-v1.yml</span><br><span class="line">kubectl delete -f service/go/v2/go-v2.yml</span><br><span class="line">kubectl delete -f service/python/v1/python-v1.yml</span><br><span class="line">kubectl delete -f service/python/v2/python-v2.yml</span><br><span class="line">kubectl delete -f service/js/v1/js-v1.yml</span><br><span class="line">kubectl delete -f service/js/v2/js-v2.yml</span><br><span class="line">kubectl delete -f service/node/v1/node-v1.yml</span><br><span class="line">kubectl delete -f service/node/v2/node-v2.yml</span><br><span class="line">kubectl delete -f service/lua/v1/lua-v1.yml</span><br><span class="line">kubectl delete -f service/lua/v2/lua-v2.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">kubectl delete -f istio/gateway.yml</span><br><span class="line">kubectl delete -f istio/gateway-virtualservice.yml</span><br><span class="line">istioctl delete destinationrule $(istioctl get destinationrule | grep <span class="string">'service-'</span> | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">istioctl delete virtualservice $(istioctl get virtualservice | grep <span class="string">'service-'</span> | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="http://istio.doczh.cn" target="_blank" rel="noopener">http://istio.doczh.cn</a></li><li><a href="https://istio.io/docs" target="_blank" rel="noopener">https://istio.io/docs</a></li><li><a href="https://istio.io/docs/reference/config/istio.networking.v1alpha3.html" target="_blank" rel="noopener">https://istio.io/docs/reference/config/istio.networking.v1alpha3.html</a></li><li><a href="https://istio.io/docs/reference/config/istio.routing.v1alpha1.html" target="_blank" rel="noopener">https://istio.io/docs/reference/config/istio.routing.v1alpha1.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> service mesh </tag>
            
            <tag> microservice </tag>
            
            <tag> istio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>istio-0.8长期支持版安装测试</title>
      <link href="/posts/30/"/>
      <url>/posts/30/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>istio</code>是一个<code>service mesh</code>开源实现，由Google/IBM/Lyft共同开发。与之类似的还有<code>conduit</code>，但是功能不如<code>istio</code>丰富稳定。架构图如下：</p><p><img src="/posts/30/istio-arch-0.8.png" alt="istio-arch"> </p><p><code>istio-0.8</code>版本是第一个长期支持版本，相对于之前的版本配置改动较大。<br><a id="more"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 去下面的地址下载压缩包</span></span><br><span class="line"><span class="comment"># https://github.com/istio/istio/releases</span></span><br><span class="line">wget https://github.com/istio/istio/releases/download/0.8.0/istio-0.8.0-linux.tar.gz</span><br><span class="line">tar xf istio-0.8.0-linux.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用官方的安装脚本安装</span></span><br><span class="line">curl -L https://git.io/getLatestIstio | sh -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装配置环境变量</span></span><br><span class="line">mv istio-0.8.0 /usr/<span class="built_in">local</span>/</span><br><span class="line">ln -sv /usr/<span class="built_in">local</span>/istio-0.8.0 /usr/<span class="built_in">local</span>/istio</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH=/usr/local/istio/bin:$PATH'</span> &gt; /etc/profile.d/istio.sh</span><br><span class="line"><span class="built_in">source</span> /etc/profile.d/istio.sh</span><br><span class="line">istioctl version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果环境不是云环境，不支持LoadBalancer</span></span><br><span class="line"><span class="comment"># 作如下修改，使得 ingressgateway 监听在80和443端口</span></span><br><span class="line"><span class="comment"># 修改使用主机端口映射</span></span><br><span class="line"><span class="comment"># 使用此修改版本之后，每台机器只能运行单个实例</span></span><br><span class="line"><span class="comment"># 大概在2661行左右</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/istio</span><br><span class="line">cp install/kubernetes/istio-demo.yaml install/kubernetes/istio-demo.yaml.ori</span><br><span class="line">vim install/kubernetes/istio-demo.yaml</span><br><span class="line">...</span><br><span class="line"><span class="comment"># Source: istio/charts/ingressgateway/templates/deployment.yaml</span></span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line"><span class="comment"># kind: Deployment</span></span><br><span class="line"><span class="comment"># 使用DaemonSet部署方式</span></span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: istio-ingressgateway</span><br><span class="line">  namespace: istio-system</span><br><span class="line">  labels:</span><br><span class="line">    app: ingressgateway</span><br><span class="line">    chart: ingressgateway-0.8.0</span><br><span class="line">    release: RELEASE-NAME</span><br><span class="line">    heritage: Tiller</span><br><span class="line">    istio: ingressgateway</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment"># DaemonSet不支持replicas</span></span><br><span class="line">  <span class="comment"># replicas: </span></span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        istio: ingressgateway</span><br><span class="line">      annotations:</span><br><span class="line">        sidecar.istio.io/inject: <span class="string">"false"</span></span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: istio-ingressgateway-service-account</span><br><span class="line">      containers:</span><br><span class="line">        - name: ingressgateway</span><br><span class="line">          image: <span class="string">"docker.io/istio/proxyv2:0.8.0"</span></span><br><span class="line">          imagePullPolicy: IfNotPresent</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 80</span><br><span class="line">              <span class="comment">#主机80端口映射</span></span><br><span class="line">              hostPort: 80</span><br><span class="line">            - containerPort: 443</span><br><span class="line">              <span class="comment">#主机443端口映射</span></span><br><span class="line">              hostPort: 443</span><br><span class="line">            - containerPort: 31400</span><br><span class="line">              <span class="comment">#主机443端口映射</span></span><br><span class="line">              hostPort: 31400</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于镜像问题，提前拉取镜像</span></span><br><span class="line"><span class="comment"># 在所有节点上执行如下命令输出的命令</span></span><br><span class="line"><span class="comment"># 可能会失败，需要多次执行</span></span><br><span class="line">image=$(grep <span class="string">'quay.io/coreos/hyperkube'</span> install/kubernetes/istio-demo.yaml | head -1 | awk <span class="string">'&#123;print $2&#125;'</span> | tr -d <span class="string">'"'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"docker pull <span class="variable">$image</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下两种选择一种安装方式</span></span><br><span class="line"><span class="comment"># 安装不使用认证（不使用tls）</span></span><br><span class="line">kubectl apply -f install/kubernetes/istio-demo.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装使用认证（使用tls）</span></span><br><span class="line">kubectl apply -f install/kubernetes/istio-demo-auth.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get svc -n istio-system</span><br><span class="line">kubectl get pods -n istio-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问测试</span></span><br><span class="line">nodeName=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">nodeIP=$(ping -c 1 <span class="variable">$nodeName</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"curl -I http://<span class="variable">$nodeIP</span>"</span></span><br></pre></td></tr></table></figure><blockquote><p>注意</p><p><code>istio-0.8.0</code> 默认已经开启了自动注入功能以及其他日志监控和追踪的相关组件如</p><ul><li>istio-tracing</li><li>istio-telemetry</li><li>grafana</li><li>prometheus</li><li>servicegraph</li></ul></blockquote><h3 id="启用自动注入-sidecar"><a href="#启用自动注入-sidecar" class="headerlink" title="启用自动注入 sidecar"></a>启用自动注入 sidecar</h3><ul><li><p>不开启自动注入部署应用需要使用如下方式的命令</p><p><code>kubectl apply -f &lt;(istioctl kube-inject -f samples/bookinfo/kube/bookinfo.yaml)</code></p></li><li><p>开启自动注入后，使用正常命令即可部署应用</p><p><code>kubectl apply -f samples/bookinfo/kube/bookinfo.yaml</code></p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># istio-0.8.0默认已经开启了自动注入功能</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># k8s 1.9 及之后的版本才能使用自动注入功能</span></span><br><span class="line"><span class="comment"># 查看是否支持</span></span><br><span class="line">kubectl api-versions | grep admissionregistration</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除了要满足以上条件外还需要检查kube-apiserver启动的参数</span></span><br><span class="line"><span class="comment"># k8s 1.9 版本要确保 --admission-control 里有 MutatingAdmissionWebhook,ValidatingAdmissionWebhook</span></span><br><span class="line"><span class="comment"># k8s 1.9 之后的版本要确保 --enable-admission-plugins 里有MutatingAdmissionWebhook,ValidatingAdmissionWebhook</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试自动注入</span></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl apply -f samples/sleep/sleep.yaml </span><br><span class="line">kubectl get deployment -o wide</span><br><span class="line">kubectl get pod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 default namespace 开启自动注入</span></span><br><span class="line">kubectl label namespace default istio-injection=enabled</span><br><span class="line">kubectl get namespace -L istio-injection</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除创建的pod，等待重建</span></span><br><span class="line">kubectl delete pod $(kubectl get pod | grep sleep | cut -d <span class="string">' '</span> -f 1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看重建后的pod</span></span><br><span class="line"><span class="comment"># 查看是否有istio-proxy容器</span></span><br><span class="line">kubectl get pod</span><br><span class="line">kubectl describe pod $(kubectl get pod | grep sleep | cut -d <span class="string">' '</span> -f 1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f samples/sleep/sleep.yaml </span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭自动注入</span></span><br><span class="line">kubectl label namespace default istio-injection-</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭部分pod的自动注入功能</span></span><br><span class="line">...</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      annotations:</span><br><span class="line">        sidecar.istio.io/inject: <span class="string">"false"</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="部署官方测试用例"><a href="#部署官方测试用例" class="headerlink" title="部署官方测试用例"></a>部署官方测试用例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动（未开启自动注入）</span></span><br><span class="line">kubectl apply -f &lt;(istioctl kube-inject -f samples/bookinfo/kube/bookinfo.yaml)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动（已开启自动注入）</span></span><br><span class="line">kubectl apply -f samples/bookinfo/kube/bookinfo.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建gateway</span></span><br><span class="line">istioctl create -f samples/bookinfo/routing/bookinfo-gateway.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get services</span><br><span class="line">kubectl get pods</span><br><span class="line">istioctl get gateway</span><br></pre></td></tr></table></figure><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令行访问测试</span></span><br><span class="line"><span class="built_in">export</span> INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=<span class="string">'&#123;.spec.ports[?(@.name=="http")].nodePort&#125;'</span>)</span><br><span class="line">NODE_NAME=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">NODE_IP=$(ping -c 1 <span class="variable">$NODE_NAME</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">export</span> GATEWAY_URL=<span class="variable">$NODE_IP</span>:<span class="variable">$INGRESS_PORT</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$GATEWAY_URL</span></span><br><span class="line"></span><br><span class="line">curl -o /dev/null -s -w <span class="string">"%&#123;http_code&#125;\n"</span> http://<span class="variable">$&#123;GATEWAY_URL&#125;</span>/productpage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问测试</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$&#123;GATEWAY_URL&#125;</span>/productpage"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用daemonset方式部署可以使用如下方式访问</span></span><br><span class="line"><span class="comment"># 11.11.11.112为其中一个node节点的ip</span></span><br><span class="line">curl http://11.11.11.112/productpage</span><br></pre></td></tr></table></figure><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理官方用例</span></span><br><span class="line">samples/bookinfo/kube/cleanup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理istio</span></span><br><span class="line">kubectl delete -f install/kubernetes/istio-demo.yaml</span><br><span class="line"><span class="comment"># kubectl delete -f install/kubernetes/istio-demo-auth.yaml</span></span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://istio.io/docs/setup/kubernetes/quick-start.html" target="_blank" rel="noopener">https://istio.io/docs/setup/kubernetes/quick-start.html</a></li><li><a href="https://istio.io/docs/guides/bookinfo.html" target="_blank" rel="noopener">https://istio.io/docs/guides/bookinfo.html</a></li><li><a href="https://istio.io/docs/setup/kubernetes/sidecar-injection.html#automatic-sidecar-injection" target="_blank" rel="noopener">https://istio.io/docs/setup/kubernetes/sidecar-injection.html#automatic-sidecar-injection</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> service mesh </tag>
            
            <tag> microservice </tag>
            
            <tag> istio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kata-containers安装配置</title>
      <link href="/posts/29/"/>
      <url>/posts/29/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>kata-containers是新的虚拟机实现，可以实现和现在容器生态无缝连接，与时下最流行的容器编排工具k8s完美结合，提供容器的快速启动，和虚拟机的安全隔离，与docker技术相比，容器之间不共用内核，使得隔离性更好。<br><a id="more"></a></p><blockquote><p>kata与docker对比图</p></blockquote><p><img src="/posts/29/docker-kata.png" alt=""></p><blockquote><p>与传统容器对比</p></blockquote><p><img src="/posts/29/kata3.png" alt=""></p><blockquote><p>架构图</p></blockquote><p><img src="/posts/29/kata2.png" alt=""></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>本实验在centos7环境下</p><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install yum-utils</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure><h4 id="安装kata-containers"><a href="#安装kata-containers" class="headerlink" title="安装kata-containers"></a>安装kata-containers</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/os-release</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$VERSION_ID</span></span><br><span class="line">VERSION_ID=<span class="variable">$VERSION_ID</span> yum-config-manager --add-repo \</span><br><span class="line"><span class="string">"http://download.opensuse.org/repositories/home:/katacontainers:/release/CentOS_<span class="variable">$&#123;VERSION_ID&#125;</span>/home:katacontainers:release.repo"</span></span><br><span class="line">yum -y install kata-runtime kata-proxy kata-shim</span><br></pre></td></tr></table></figure><h4 id="配置docker"><a href="#配置docker" class="headerlink" title="配置docker"></a>配置docker</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/systemd/system/docker.service.d/</span><br><span class="line">cat &lt;&lt;EOF | sudo tee /etc/systemd/system/docker.service.d/kata-containers.conf</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=</span><br><span class="line">ExecStart=/usr/bin/dockerd -D --add-runtime kata-runtime=/usr/bin/kata-runtime --default-runtime=kata-runtime</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h4 id="查看机器是否支持kata-containers"><a href="#查看机器是否支持kata-containers" class="headerlink" title="查看机器是否支持kata-containers"></a>查看机器是否支持kata-containers</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kata-runtime kata-check</span><br><span class="line"></span><br><span class="line"><span class="comment"># 经过测试使用virtualbox创建的虚拟机来进行实验都不能成功</span></span><br><span class="line"><span class="comment"># 因为virtualbox创建的虚拟机，不允许在虚拟机里再使用虚拟化</span></span><br><span class="line"><span class="comment"># 而kata-containers需要使用虚拟化</span></span><br><span class="line"><span class="comment"># 虽然使用vmware创建的虚拟机使用些步骤检查时，仍然会报部分错误</span></span><br><span class="line"><span class="comment"># 但是依然可以成功启动容器</span></span><br></pre></td></tr></table></figure><h3 id="使用测试"><a href="#使用测试" class="headerlink" title="使用测试"></a>使用测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">docker run -d busybox sh -c <span class="string">'sleep 9999999'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看qemu</span></span><br><span class="line">ps -ef | grep qemu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以看到启动了一个轻量的虚拟机</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7使用kubeadm配置高可用k8s集群的另一种方式</title>
      <link href="/posts/28/"/>
      <url>/posts/28/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>使用<code>kubeadm</code>配置多<code>master</code>节点，实现高可用。<br><a id="more"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="实验环境说明"><a href="#实验环境说明" class="headerlink" title="实验环境说明"></a>实验环境说明</h4><h5 id="实验架构"><a href="#实验架构" class="headerlink" title="实验架构"></a>实验架构</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lab1: etcd master keepalived 11.11.11.111</span><br><span class="line">lab2: etcd master keepalived 11.11.11.112</span><br><span class="line">lab3: etcd master keepalived 11.11.11.113</span><br><span class="line">lab4: node  11.11.11.114</span><br><span class="line">lab5: node  11.11.11.115</span><br><span class="line">lab6: node  11.11.11.116</span><br><span class="line"></span><br><span class="line">vip: 11.11.11.110</span><br></pre></td></tr></table></figure><h5 id="实验使用的Vagrantfile"><a href="#实验使用的Vagrantfile" class="headerlink" title="实验使用的Vagrantfile"></a>实验使用的<code>Vagrantfile</code></h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">    (<span class="number">1</span>..<span class="number">6</span>).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      config.vm.define <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span> <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">        node.vm.box = <span class="string">"centos-7.4-docker-17"</span></span><br><span class="line">        node.ssh.insert_key = <span class="literal">false</span></span><br><span class="line">        node.vm.hostname = <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.network <span class="string">"private_network"</span>, <span class="symbol">ip:</span> <span class="string">"11.11.11.11<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provision <span class="string">"shell"</span>,</span><br><span class="line">          <span class="symbol">inline:</span> <span class="string">"echo hello from node <span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> <span class="params">|v|</span></span><br><span class="line">          v.cpus = <span class="number">2</span></span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, <span class="symbol">:id</span>, <span class="string">"--name"</span>, <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span>, <span class="string">"--memory"</span>, <span class="string">"2048"</span>]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="在所有机器上安装kubeadm"><a href="#在所有机器上安装kubeadm" class="headerlink" title="在所有机器上安装kubeadm"></a>在所有机器上安装kubeadm</h4><p>参考之前的文章《centos7安装kubeadm》</p><h4 id="配置所有节点的kubelet"><a href="#配置所有节点的kubelet" class="headerlink" title="配置所有节点的kubelet"></a>配置所有节点的kubelet</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置kubelet使用国内可用镜像</span></span><br><span class="line"><span class="comment"># 修改/etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span></span><br><span class="line"><span class="comment"># 添加如下配置 </span></span><br><span class="line">Environment=<span class="string">"KUBELET_EXTRA_ARGS=--pod-infra-container-image=registry.cn-shanghai.aliyuncs.com/gcr-k8s/pause-amd64:3.0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用命令</span></span><br><span class="line">sed -i <span class="string">'/ExecStart=$/i Environment="KUBELET_EXTRA_ARGS=--pod-infra-container-image=registry.cn-shanghai.aliyuncs.com/gcr-k8s/pause-amd64:3.0"'</span>  /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新载入配置</span></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><h4 id="配置hosts"><a href="#配置hosts" class="headerlink" title="配置hosts"></a>配置hosts</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt;/etc/hosts&lt;&lt;EOF</span><br><span class="line">11.11.11.111 lab1</span><br><span class="line">11.11.11.112 lab2</span><br><span class="line">11.11.11.113 lab3</span><br><span class="line">11.11.11.114 lab4</span><br><span class="line">11.11.11.115 lab5</span><br><span class="line">11.11.11.116 lab6</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="启动etcd集群"><a href="#启动etcd集群" class="headerlink" title="启动etcd集群"></a>启动etcd集群</h4><p>在<code>lab1,lab2,lab3</code>节点上启动<code>etcd</code>集群</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lab1</span></span><br><span class="line">docker stop etcd &amp;&amp; docker rm etcd</span><br><span class="line">rm -rf /data/etcd</span><br><span class="line">mkdir -p /data/etcd</span><br><span class="line">docker run -d \</span><br><span class="line">--restart always \</span><br><span class="line">-v /etc/etcd/ssl/certs:/etc/ssl/certs \</span><br><span class="line">-v /data/etcd:/var/lib/etcd \</span><br><span class="line">-p 2380:2380 \</span><br><span class="line">-p 2379:2379 \</span><br><span class="line">--name etcd \</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/etcd-amd64:3.1.12 \</span><br><span class="line">etcd --name=etcd0 \</span><br><span class="line">--advertise-client-urls=http://11.11.11.111:2379 \</span><br><span class="line">--listen-client-urls=http://0.0.0.0:2379 \</span><br><span class="line">--initial-advertise-peer-urls=http://11.11.11.111:2380 \</span><br><span class="line">--listen-peer-urls=http://0.0.0.0:2380 \</span><br><span class="line">--initial-cluster-token=9477af68bbee1b9ae037d6fd9e7efefd \</span><br><span class="line">--initial-cluster=etcd0=http://11.11.11.111:2380,etcd1=http://11.11.11.112:2380,etcd2=http://11.11.11.113:2380 \</span><br><span class="line">--initial-cluster-state=new \</span><br><span class="line">--auto-tls \</span><br><span class="line">--peer-auto-tls \</span><br><span class="line">--data-dir=/var/lib/etcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># lab2</span></span><br><span class="line">docker stop etcd &amp;&amp; docker rm etcd</span><br><span class="line">rm -rf /data/etcd</span><br><span class="line">mkdir -p /data/etcd</span><br><span class="line">docker run -d \</span><br><span class="line">--restart always \</span><br><span class="line">-v /etc/etcd/ssl/certs:/etc/ssl/certs \</span><br><span class="line">-v /data/etcd:/var/lib/etcd \</span><br><span class="line">-p 2380:2380 \</span><br><span class="line">-p 2379:2379 \</span><br><span class="line">--name etcd \</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/etcd-amd64:3.1.12 \</span><br><span class="line">etcd --name=etcd1 \</span><br><span class="line">--advertise-client-urls=http://11.11.11.112:2379 \</span><br><span class="line">--listen-client-urls=http://0.0.0.0:2379 \</span><br><span class="line">--initial-advertise-peer-urls=http://11.11.11.112:2380 \</span><br><span class="line">--listen-peer-urls=http://0.0.0.0:2380 \</span><br><span class="line">--initial-cluster-token=9477af68bbee1b9ae037d6fd9e7efefd \</span><br><span class="line">--initial-cluster=etcd0=http://11.11.11.111:2380,etcd1=http://11.11.11.112:2380,etcd2=http://11.11.11.113:2380 \</span><br><span class="line">--initial-cluster-state=new \</span><br><span class="line">--auto-tls \</span><br><span class="line">--peer-auto-tls \</span><br><span class="line">--data-dir=/var/lib/etcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># lab3</span></span><br><span class="line">docker stop etcd &amp;&amp; docker rm etcd</span><br><span class="line">rm -rf /data/etcd</span><br><span class="line">mkdir -p /data/etcd</span><br><span class="line">docker run -d \</span><br><span class="line">--restart always \</span><br><span class="line">-v /etc/etcd/ssl/certs:/etc/ssl/certs \</span><br><span class="line">-v /data/etcd:/var/lib/etcd \</span><br><span class="line">-p 2380:2380 \</span><br><span class="line">-p 2379:2379 \</span><br><span class="line">--name etcd \</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/etcd-amd64:3.1.12 \</span><br><span class="line">etcd --name=etcd2 \</span><br><span class="line">--advertise-client-urls=http://11.11.11.113:2379 \</span><br><span class="line">--listen-client-urls=http://0.0.0.0:2379 \</span><br><span class="line">--initial-advertise-peer-urls=http://11.11.11.113:2380 \</span><br><span class="line">--listen-peer-urls=http://0.0.0.0:2380 \</span><br><span class="line">--initial-cluster-token=9477af68bbee1b9ae037d6fd9e7efefd \</span><br><span class="line">--initial-cluster=etcd0=http://11.11.11.111:2380,etcd1=http://11.11.11.112:2380,etcd2=http://11.11.11.113:2380 \</span><br><span class="line">--initial-cluster-state=new \</span><br><span class="line">--auto-tls \</span><br><span class="line">--peer-auto-tls \</span><br><span class="line">--data-dir=/var/lib/etcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证查看集群</span></span><br><span class="line">docker <span class="built_in">exec</span> -ti etcd ash</span><br><span class="line">etcdctl member list</span><br><span class="line">etcdctl cluster-health</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h4 id="配置keepalived"><a href="#配置keepalived" class="headerlink" title="配置keepalived"></a>配置keepalived</h4><p>在3台<code>master</code>节点操作</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 载入内核相关模块</span></span><br><span class="line">lsmod | grep ip_vs</span><br><span class="line">modprobe ip_vs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动keepalived</span></span><br><span class="line"><span class="comment"># eth1为本次实验11.11.11.0/24网段的所在网卡</span></span><br><span class="line">docker run --net=host --<span class="built_in">cap</span>-add=NET_ADMIN \</span><br><span class="line">-e KEEPALIVED_INTERFACE=eth1 \</span><br><span class="line">-e KEEPALIVED_VIRTUAL_IPS=<span class="string">"#PYTHON2BASH:['11.11.11.110']"</span> \</span><br><span class="line">-e KEEPALIVED_UNICAST_PEERS=<span class="string">"#PYTHON2BASH:['11.11.11.111','11.11.11.112','11.11.11.113']"</span> \</span><br><span class="line">-e KEEPALIVED_PASSWORD=hello \</span><br><span class="line">--name k8s-keepalived \</span><br><span class="line">--restart always \</span><br><span class="line">-d osixia/keepalived:1.4.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line"><span class="comment"># 会看到两个成为backup 一个成为master</span></span><br><span class="line">docker logs k8s-keepalived</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时会配置 11.11.11.110 到其中一台机器</span></span><br><span class="line"><span class="comment"># ping测试</span></span><br><span class="line">ping -c4 11.11.11.110</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果失败后清理后，重新实验</span></span><br><span class="line">docker rm -f k8s-keepalived</span><br><span class="line">ip a del 11.11.11.110/32 dev eth1</span><br></pre></td></tr></table></figure><h4 id="在第一台master节点初始化"><a href="#在第一台master节点初始化" class="headerlink" title="在第一台master节点初始化"></a>在第一台master节点初始化</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成token</span></span><br><span class="line"><span class="comment"># 保留token后面还要使用</span></span><br><span class="line">token=$(kubeadm token generate)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$token</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line"><span class="comment"># advertiseAddress 配置为VIP地址</span></span><br><span class="line">cat &gt;kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha1</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.10.3</span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line"></span><br><span class="line">api:</span><br><span class="line">  advertiseAddress: 11.11.11.110</span><br><span class="line"></span><br><span class="line">apiServerExtraArgs:</span><br><span class="line">  endpoint-reconciler-type: lease</span><br><span class="line"></span><br><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  node-monitor-grace-period: 10s</span><br><span class="line">  pod-eviction-timeout: 10s</span><br><span class="line"></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line"></span><br><span class="line">etcd:</span><br><span class="line">  endpoints:</span><br><span class="line">  - <span class="string">"http://11.11.11.111:2379"</span></span><br><span class="line">  - <span class="string">"http://11.11.11.112:2379"</span></span><br><span class="line">  - <span class="string">"http://11.11.11.113:2379"</span></span><br><span class="line"></span><br><span class="line">apiServerCertSANs:</span><br><span class="line">- <span class="string">"lab1"</span></span><br><span class="line">- <span class="string">"lab2"</span></span><br><span class="line">- <span class="string">"lab3"</span></span><br><span class="line">- <span class="string">"11.11.11.111"</span></span><br><span class="line">- <span class="string">"11.11.11.112"</span></span><br><span class="line">- <span class="string">"11.11.11.113"</span></span><br><span class="line">- <span class="string">"11.11.11.110"</span></span><br><span class="line">- <span class="string">"127.0.0.1"</span></span><br><span class="line"></span><br><span class="line">token: <span class="variable">$token</span></span><br><span class="line">tokenTTL: <span class="string">"0"</span></span><br><span class="line"></span><br><span class="line">featureGates:</span><br><span class="line">  CoreDNS: <span class="literal">true</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">kubeadm init --config kubeadm-master.config</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存初始化完成之后的join命令</span></span><br><span class="line"><span class="comment"># kubeadm join 11.11.11.110:6443 --token nevmjk.iuh214fc8i0k3iue --discovery-token-ca-cert-hash sha256:0e4f738348be836ff810bce754e059054845f44f01619a37b817eba83282d80f</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置kubectl使用</span></span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装网络插件</span></span><br><span class="line"><span class="comment"># 下载配置</span></span><br><span class="line">mkdir flannel &amp;&amp; <span class="built_in">cd</span> flannel</span><br><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line"><span class="comment"># 此处的ip配置要与上面kubeadm的pod-network一致</span></span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"Network"</span>: <span class="string">"10.244.0.0/16"</span>,</span><br><span class="line">      <span class="string">"Backend"</span>: &#123;</span><br><span class="line">        <span class="string">"Type"</span>: <span class="string">"vxlan"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像</span></span><br><span class="line">image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果Node有多个网卡的话，参考flannel issues 39701，</span></span><br><span class="line"><span class="comment"># https://github.com/kubernetes/kubernetes/issues/39701</span></span><br><span class="line"><span class="comment"># 目前需要在kube-flannel.yml中使用--iface参数指定集群主机内网网卡的名称，</span></span><br><span class="line"><span class="comment"># 否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，</span></span><br><span class="line"><span class="comment"># flanneld启动参数加上--iface=&lt;iface-name&gt;</span></span><br><span class="line">    containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        - --iface=eth1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get svc -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置master允许部署应用pod，参与工作负载，现在可以部署其他系统组件</span></span><br><span class="line"><span class="comment"># 如 dashboard, heapster, efk等</span></span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure><h4 id="启动其他master节点"><a href="#启动其他master节点" class="headerlink" title="启动其他master节点"></a>启动其他master节点</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包第一台master初始化之后的/etc/kubernetes/pki目录</span></span><br><span class="line"><span class="built_in">cd</span> /etc/kubernetes &amp;&amp; tar czvf /root/pki.tgz pki/ &amp;&amp; <span class="built_in">cd</span> ~</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传到其他master的/etc/kubernetes目录下</span></span><br><span class="line">tar xf pki.tgz -C /etc/kubernetes/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制启动第一台master时的配置文件到其他master节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">kubeadm init --config kubeadm-master.config</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置kubectl使用</span></span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在第一台配置master节点查看</span></span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab1</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab2</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab3</span><br><span class="line">kubectl get nodes -o wide</span><br></pre></td></tr></table></figure><h4 id="启动node节点"><a href="#启动node节点" class="headerlink" title="启动node节点"></a>启动node节点</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加入master节点</span></span><br><span class="line"><span class="comment"># 这个命令是之前初始化master完成时，输出的命令</span></span><br><span class="line">kubeadm join 11.11.11.110:6443 --token nevmjk.iuh214fc8i0k3iue --discovery-token-ca-cert-hash sha256:0e4f738348be836ff810bce754e059054845f44f01619a37b817eba83282d80f</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="重建多个coredns副本"><a href="#重建多个coredns副本" class="headerlink" title="重建多个coredns副本"></a>重建多个coredns副本</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除coredns的pods</span></span><br><span class="line">kubectl get pods -n kube-system -o wide | grep coredns</span><br><span class="line">all_coredns_pods=$(kubectl get pods -n kube-system -o wide | grep coredns | awk <span class="string">'&#123;print $1&#125;'</span> | xargs)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$all_coredns_pods</span></span><br><span class="line">kubectl delete pods <span class="variable">$all_coredns_pods</span> -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改副本数</span></span><br><span class="line"><span class="comment"># replicas: 3</span></span><br><span class="line"><span class="comment"># 可以修改为node节点的个数</span></span><br><span class="line">kubectl edit deploy coredns -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get pods -n kube-system -o wide | grep coredns</span><br></pre></td></tr></table></figure><h4 id="基础测试"><a href="#基础测试" class="headerlink" title="基础测试"></a>基础测试</h4><p><strong>1. 启动</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接使用命令测试</span></span><br><span class="line">kubectl run nginx --replicas=2 --image=nginx:alpine --port=80</span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --name=example-service-nodeport</span><br><span class="line">kubectl expose deployment nginx --name=example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用配置文件测试</span></span><br><span class="line">cat &gt;example-nginx.yml&lt;&lt;EOF</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:alpine</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /</span><br><span class="line">            port: 80</span><br><span class="line">          initialDelaySeconds: 10</span><br><span class="line">          periodSeconds: 3</span><br><span class="line">        readinessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /</span><br><span class="line">            port: 80</span><br><span class="line">          initialDelaySeconds: 10</span><br><span class="line">          periodSeconds: 3</span><br><span class="line">---</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: example-service</span><br><span class="line">spec:</span><br><span class="line">    selector:</span><br><span class="line">      app: nginx</span><br><span class="line">    ports:</span><br><span class="line">      - name: http</span><br><span class="line">        port: 80</span><br><span class="line">        targetPort: 80</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: example-service-nodeport</span><br><span class="line">spec:</span><br><span class="line">    selector:</span><br><span class="line">      app: nginx</span><br><span class="line">    <span class="built_in">type</span>: NodePort</span><br><span class="line">    ports:</span><br><span class="line">      - name: http-nodeport</span><br><span class="line">        port: 80</span><br><span class="line">        nodePort: 32223</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f example-nginx.yml</span><br></pre></td></tr></table></figure></p><p><strong>2. 查看状态</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deploy</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line">kubectl describe svc example-service</span><br></pre></td></tr></table></figure></p><p><strong>3. DNS解析</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kubectl run curl --image=radial/busyboxplus:curl -i --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果时间过长会返回错误，可以使用如下方式再进入测试</span></span><br><span class="line">curlPod=$(kubectl get pod | grep curl | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">kubectl <span class="built_in">exec</span> -ti <span class="variable">$curlPod</span> -- sh</span><br></pre></td></tr></table></figure></p><p><strong>4. 访问测试</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10.96.59.56 为查看svc时获取到的clusterip</span></span><br><span class="line">curl <span class="string">"10.96.59.56:80"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 32223 为查看svc时获取到的 nodeport</span></span><br><span class="line">http://11.11.11.114:32223/</span><br><span class="line">http://11.11.11.115:32223/</span><br></pre></td></tr></table></figure></p><p><strong>3. 清理删除</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete svc example-service example-service-nodeport</span><br><span class="line">kubectl delete deploy nginx curl</span><br></pre></td></tr></table></figure></p><h4 id="高可用测试"><a href="#高可用测试" class="headerlink" title="高可用测试"></a>高可用测试</h4><p>任意关闭<code>master</code>节点测试集群是能否正常执行上一步的<code>基础测试</code>，查看相关信息，只关闭到只一台<code>master</code>，因为<code>etcd</code>部署在相应的<code>master</code>节点上，如果关闭了两台，会造成<code>etcd</code>不可用，进而让整个集群不可用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod --all-namespaces -o wide</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab1</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab2</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab3</span><br><span class="line">kubectl get nodes -o wide</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p>当直接把<code>node</code>节点关闭时，只有过了<code>5分钟</code>之后，上面的pod才会被检测到有问题，并迁移到其他节点</p><blockquote><p>如果想快速迁移可以执行 <code>kubectl delete node</code></p><p>也可以修改<code>controller-manager的</code>的<code>pod-eviction-timeout</code>参数，默认5m</p><p><code>node-monitor-grace-period</code>参数，默认40s</p></blockquote></li><li><p>此方案和之前文章中写的高可用方案相比，缺点就是不能使用 <code>kube-apiserver</code> 多节点负载均衡的功能。所有对<code>kube-apiserver</code>的请求都只会发给一个<code>master</code>节点，只有当这个<code>master</code>节点挂掉之后，才会把所有有请求发给另外的<code>master</code>。</p></li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://www.kubernetes.org.cn/3808.html" target="_blank" rel="noopener">https://www.kubernetes.org.cn/3808.html</a></li><li><a href="https://kubernetes.io/docs/admin/high-availability/" target="_blank" rel="noopener">https://kubernetes.io/docs/admin/high-availability/</a></li><li><a href="https://www.kubernetes.org.cn/3536.html" target="_blank" rel="noopener">https://www.kubernetes.org.cn/3536.html</a></li><li><a href="https://github.com/indiketa/kubeadm-ha" target="_blank" rel="noopener">https://github.com/indiketa/kubeadm-ha</a></li><li><a href="https://zhuanlan.zhihu.com/p/34740013" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/34740013</a></li><li><a href="https://github.com/cookeem/kubeadm-ha/blob/master/README_CN.md" target="_blank" rel="noopener">https://github.com/cookeem/kubeadm-ha/blob/master/README_CN.md</a></li><li><a href="https://blog.frognew.com/2017/04/install-etcd-cluster.html" target="_blank" rel="noopener">https://blog.frognew.com/2017/04/install-etcd-cluster.html</a></li><li><a href="https://blog.frognew.com/2017/04/install-ha-kubernetes-1.6-cluster.html" target="_blank" rel="noopener">https://blog.frognew.com/2017/04/install-ha-kubernetes-1.6-cluster.html</a></li><li><a href="https://medium.com/@bambash/ha-kubernetes-cluster-via-kubeadm-b2133360b198" target="_blank" rel="noopener">https://medium.com/@bambash/ha-kubernetes-cluster-via-kubeadm-b2133360b198</a></li><li><a href="https://github.com/kubernetes/kubeadm/issues/546" target="_blank" rel="noopener">https://github.com/kubernetes/kubeadm/issues/546</a></li><li><a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/#config-file" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/#config-file</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s使用kube-router网络插件并监控流量状态</title>
      <link href="/posts/27/"/>
      <url>/posts/27/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>kube-router</code>是一个新的k8s的网络插件，使用<code>lvs</code>做服务的代理及负载均衡，使用<code>iptables</code>来做网络的隔离策略。部署简单，只需要在每个节点部署一个daemonset即可，高性能，易维护。支持pod间通信，以及服务的代理。<br><a id="more"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本次实验重新创建了集群，使用之前测试其他网络插件的集群环境没有成功</span></span><br><span class="line"><span class="comment"># 可能是由于环境干扰，实验时需要注意</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建kube-router目录下载相关文件</span></span><br><span class="line">mkdir kube-router &amp;&amp; <span class="built_in">cd</span> kube-router</span><br><span class="line">wget https://raw.githubusercontent.com/cloudnativelabs/kube-router/master/daemonset/kubeadm-kuberouter.yaml</span><br><span class="line">wget https://raw.githubusercontent.com/cloudnativelabs/kube-router/master/daemonset/kubeadm-kuberouter-all-features.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下两种部署方式任选其一</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 只启用 pod网络通信，网络隔离策略 功能</span></span><br><span class="line">kubectl apply -f kubeadm-kuberouter.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 启用 pod网络通信，网络隔离策略，服务代理 所有功能</span></span><br><span class="line"><span class="comment"># 删除kube-proxy和其之前配置的服务代理</span></span><br><span class="line">kubectl apply -f kubeadm-kuberouter-all-features.yaml</span><br><span class="line">kubectl -n kube-system delete ds kube-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个节点上执行</span></span><br><span class="line">docker run --privileged --net=host registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64:v1.10.2 kube-proxy --cleanup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动用于测试的deployment</span></span><br><span class="line">kubectl run nginx --replicas=2 --image=nginx:alpine --port=80</span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --name=example-service-nodeport</span><br><span class="line">kubectl expose deployment nginx --name=example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># dns及访问测试</span></span><br><span class="line">kubectl run curl --image=radial/busyboxplus:curl -i --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete svc example-service example-service-nodeport</span><br><span class="line">kubectl delete deploy nginx curl</span><br></pre></td></tr></table></figure><h3 id="监控相关数据并可视化"><a href="#监控相关数据并可视化" class="headerlink" title="监控相关数据并可视化"></a>监控相关数据并可视化</h3><h4 id="重新部署kube-router"><a href="#重新部署kube-router" class="headerlink" title="重新部署kube-router"></a>重新部署kube-router</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改yml文件</span></span><br><span class="line">cp kubeadm-kuberouter-all-features.yaml kubeadm-kuberouter-all-features.yaml.ori</span><br><span class="line">vim kubeadm-kuberouter-all-features.yaml</span><br><span class="line">...</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: kube-router</span><br><span class="line">        tier: node</span><br><span class="line">      annotations:</span><br><span class="line">        scheduler.alpha.kubernetes.io/critical-pod: <span class="string">''</span></span><br><span class="line">        <span class="comment"># 添加如下参数，让prometheus收集数据</span></span><br><span class="line">        prometheus.io/scrape: <span class="string">"true"</span></span><br><span class="line">        prometheus.io/path: <span class="string">"/metrics"</span></span><br><span class="line">        prometheus.io/port: <span class="string">"8080"</span></span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: kube-router</span><br><span class="line">      serviceAccount: kube-router</span><br><span class="line">      containers:</span><br><span class="line">      - name: kube-router</span><br><span class="line">        image: cloudnativelabs/kube-router</span><br><span class="line">        imagePullPolicy: Always</span><br><span class="line">        args:</span><br><span class="line">        <span class="comment"># 添加如下参数开启metrics</span></span><br><span class="line">        - --metrics-path=/metrics</span><br><span class="line">        - --metrics-port=8080</span><br><span class="line">        - --run-router=<span class="literal">true</span></span><br><span class="line">        - --run-firewall=<span class="literal">true</span></span><br><span class="line">        - --run-service-proxy=<span class="literal">true</span></span><br><span class="line">        - --kubeconfig=/var/lib/kube-router/kubeconfig</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新部署</span></span><br><span class="line">kubectl delete ds kube-router -n kube-system</span><br><span class="line">kubectl apply -f kubeadm-kuberouter-all-features.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试获取metrics</span></span><br><span class="line">curl http://127.0.0.1:8080/metrics</span><br></pre></td></tr></table></figure><h4 id="部署prometheus"><a href="#部署prometheus" class="headerlink" title="部署prometheus"></a>部署prometheus</h4><p>复制如下内容到<code>prometheus.yml</code>文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="string">prometheus.yml:</span> <span class="string">|-</span></span><br><span class="line"><span class="attr">    global:</span></span><br><span class="line"><span class="attr">      scrape_interval:</span> <span class="number">15</span><span class="string">s</span></span><br><span class="line"><span class="attr">    scrape_configs:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># scrape config for API servers</span></span><br><span class="line"><span class="attr">    - job_name:</span> <span class="string">'kubernetes-apiservers'</span></span><br><span class="line"><span class="attr">      kubernetes_sd_configs:</span></span><br><span class="line"><span class="attr">      - role:</span> <span class="string">endpoints</span></span><br><span class="line"><span class="attr">      scheme:</span> <span class="string">https</span></span><br><span class="line"><span class="attr">      tls_config:</span></span><br><span class="line"><span class="attr">        ca_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class="line"><span class="attr">      bearer_token_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class="line"><span class="attr">      relabel_configs:</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_namespace,</span> <span class="string">__meta_kubernetes_service_name,</span> <span class="string">__meta_kubernetes_endpoint_port_name]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">keep</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">default;kubernetes;https</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># scrape config for nodes (kubelet)</span></span><br><span class="line"><span class="attr">    - job_name:</span> <span class="string">'kubernetes-nodes'</span></span><br><span class="line"><span class="attr">      scheme:</span> <span class="string">https</span></span><br><span class="line"><span class="attr">      tls_config:</span></span><br><span class="line"><span class="attr">        ca_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class="line"><span class="attr">      bearer_token_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class="line"><span class="attr">      kubernetes_sd_configs:</span></span><br><span class="line"><span class="attr">      - role:</span> <span class="string">node</span></span><br><span class="line"><span class="attr">      relabel_configs:</span></span><br><span class="line"><span class="attr">      - action:</span> <span class="string">labelmap</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">__meta_kubernetes_node_label_(.+)</span></span><br><span class="line"><span class="attr">      - target_label:</span> <span class="string">__address__</span></span><br><span class="line"><span class="attr">        replacement:</span> <span class="string">kubernetes.default.svc:443</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_node_name]</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">(.+)</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">__metrics_path__</span></span><br><span class="line"><span class="attr">        replacement:</span> <span class="string">/api/v1/nodes/$&#123;1&#125;/proxy/metrics</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Scrape config for Kubelet cAdvisor.</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># This is required for Kubernetes 1.7.3 and later, where cAdvisor metrics</span></span><br><span class="line">    <span class="comment"># (those whose names begin with 'container_') have been removed from the</span></span><br><span class="line">    <span class="comment"># Kubelet metrics endpoint.  This job scrapes the cAdvisor endpoint to</span></span><br><span class="line">    <span class="comment"># retrieve those metrics.</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># In Kubernetes 1.7.0-1.7.2, these metrics are only exposed on the cAdvisor</span></span><br><span class="line">    <span class="comment"># HTTP endpoint; use "replacement: /api/v1/nodes/$&#123;1&#125;:4194/proxy/metrics"</span></span><br><span class="line">    <span class="comment"># in that case (and ensure cAdvisor's HTTP server hasn't been disabled with</span></span><br><span class="line">    <span class="comment"># the --cadvisor-port=0 Kubelet flag).</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># This job is not necessary and should be removed in Kubernetes 1.6 and</span></span><br><span class="line">    <span class="comment"># earlier versions, or it will cause the metrics to be scraped twice.</span></span><br><span class="line"><span class="attr">    - job_name:</span> <span class="string">'kubernetes-cadvisor'</span></span><br><span class="line"><span class="attr">      scheme:</span> <span class="string">https</span></span><br><span class="line"><span class="attr">      tls_config:</span></span><br><span class="line"><span class="attr">        ca_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span></span><br><span class="line"><span class="attr">      bearer_token_file:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class="line"><span class="attr">      kubernetes_sd_configs:</span></span><br><span class="line"><span class="attr">      - role:</span> <span class="string">node</span></span><br><span class="line"><span class="attr">      relabel_configs:</span></span><br><span class="line"><span class="attr">      - action:</span> <span class="string">labelmap</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">__meta_kubernetes_node_label_(.+)</span></span><br><span class="line"><span class="attr">      - target_label:</span> <span class="string">__address__</span></span><br><span class="line"><span class="attr">        replacement:</span> <span class="string">kubernetes.default.svc:443</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_node_name]</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">(.+)</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">__metrics_path__</span></span><br><span class="line"><span class="attr">        replacement:</span> <span class="string">/api/v1/nodes/$&#123;1&#125;/proxy/metrics/cadvisor</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># scrape config for service endpoints.</span></span><br><span class="line"><span class="attr">    - job_name:</span> <span class="string">'kubernetes-service-endpoints'</span></span><br><span class="line"><span class="attr">      kubernetes_sd_configs:</span></span><br><span class="line"><span class="attr">      - role:</span> <span class="string">endpoints</span></span><br><span class="line"><span class="attr">      relabel_configs:</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_service_annotation_prometheus_io_scrape]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">keep</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_service_annotation_prometheus_io_scheme]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">replace</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">__scheme__</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">(https?)</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_service_annotation_prometheus_io_path]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">replace</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">__metrics_path__</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">(.+)</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__address__,</span> <span class="string">__meta_kubernetes_service_annotation_prometheus_io_port]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">replace</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">__address__</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">([^:]+)(?::\d+)?;(\d+)</span></span><br><span class="line"><span class="attr">        replacement:</span> <span class="string">$1:$2</span></span><br><span class="line"><span class="attr">      - action:</span> <span class="string">labelmap</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">__meta_kubernetes_service_label_(.+)</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_namespace]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">replace</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">kubernetes_namespace</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_service_name]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">replace</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">kubernetes_name</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Example scrape config for pods</span></span><br><span class="line"><span class="attr">    - job_name:</span> <span class="string">'kubernetes-pods'</span></span><br><span class="line"><span class="attr">      kubernetes_sd_configs:</span></span><br><span class="line"><span class="attr">      - role:</span> <span class="string">pod</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      relabel_configs:</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_pod_annotation_prometheus_io_scrape]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">keep</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_pod_annotation_prometheus_io_path]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">replace</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">__metrics_path__</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">(.+)</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__address__,</span> <span class="string">__meta_kubernetes_pod_annotation_prometheus_io_port]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">replace</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">([^:]+)(?::\d+)?;(\d+)</span></span><br><span class="line"><span class="attr">        replacement:</span> <span class="string">$1:$2</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">__address__</span></span><br><span class="line"><span class="attr">      - action:</span> <span class="string">labelmap</span></span><br><span class="line"><span class="attr">        regex:</span> <span class="string">__meta_kubernetes_pod_label_(.+)</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_namespace]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">replace</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">namespace</span></span><br><span class="line"><span class="attr">      - source_labels:</span> <span class="string">[__meta_kubernetes_pod_name]</span></span><br><span class="line"><span class="attr">        action:</span> <span class="string">replace</span></span><br><span class="line"><span class="attr">        target_label:</span> <span class="string">pod_name</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">prometheus.io/scrape:</span> <span class="string">'true'</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">9090</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">      annotations:</span></span><br><span class="line">        <span class="string">sidecar.istio.io/inject:</span> <span class="string">"false"</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      serviceAccountName:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">docker.io/prom/prometheus:v2.2.1</span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">        args:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">'--storage.tsdb.retention=6h'</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">'--config.file=/etc/prometheus/prometheus.yml'</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">          containerPort:</span> <span class="number">9090</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">config-volume</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/prometheus</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">config-volume</span></span><br><span class="line"><span class="attr">        configMap:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="attr">- apiGroups:</span> <span class="string">[""]</span></span><br><span class="line"><span class="attr">  resources:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">nodes</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">services</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">endpoints</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">pods</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">nodes/proxy</span></span><br><span class="line"><span class="attr">  verbs:</span> <span class="string">["get",</span> <span class="string">"list"</span><span class="string">,</span> <span class="string">"watch"</span><span class="string">]</span></span><br><span class="line"><span class="attr">- apiGroups:</span> <span class="string">[""]</span></span><br><span class="line"><span class="attr">  resources:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">configmaps</span></span><br><span class="line"><span class="attr">  verbs:</span> <span class="string">["get"]</span></span><br><span class="line"><span class="attr">- nonResourceURLs:</span> <span class="string">["/metrics"]</span></span><br><span class="line"><span class="attr">  verbs:</span> <span class="string">["get"]</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line"><span class="attr">  apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">  kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="attr">- kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">prometheus</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>部署测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f prometheus.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问prometheus</span></span><br><span class="line"><span class="comment"># 输入 kube_router 关键字查找 看有无提示出现</span></span><br><span class="line">prometheusNodePort=$(kubectl get svc -n kube-system | grep prometheus | awk <span class="string">'&#123;print $5&#125;'</span> | cut -d <span class="string">'/'</span> -f 1 | cut -d <span class="string">':'</span> -f 2)</span><br><span class="line">nodeName=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">nodeIP=$(ping -c 1 <span class="variable">$nodeName</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$nodeIP</span>:"</span><span class="variable">$prometheusNodePort</span></span><br></pre></td></tr></table></figure><h4 id="部署grafana"><a href="#部署grafana" class="headerlink" title="部署grafana"></a>部署grafana</h4><p>复制如下内容到<code>grafana.yml</code>文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">grafana</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - port:</span> <span class="number">3000</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">grafana</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">grafana</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">grafana</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      serviceAccountName:</span> <span class="string">grafana</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">grafana</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">grafana/grafana</span></span><br><span class="line"><span class="attr">        imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="attr">          - containerPort:</span> <span class="number">3000</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - mountPath:</span> <span class="string">/var/lib/grafana</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">grafana-data</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">grafana-data</span></span><br><span class="line"><span class="attr">        emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">grafana</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>部署测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f grafana.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问grafana</span></span><br><span class="line">grafanaNodePort=$(kubectl get svc -n kube-system | grep grafana | awk <span class="string">'&#123;print $5&#125;'</span> | cut -d <span class="string">'/'</span> -f 1 | cut -d <span class="string">':'</span> -f 2)</span><br><span class="line">nodeName=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">nodeIP=$(ping -c 1 <span class="variable">$nodeName</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$nodeIP</span>:"</span><span class="variable">$grafanaNodePort</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认用户密码</span></span><br><span class="line">admin/admin</span><br></pre></td></tr></table></figure><h4 id="导入并查看dashboard"><a href="#导入并查看dashboard" class="headerlink" title="导入并查看dashboard"></a>导入并查看dashboard</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载官方dashboard的json文件</span></span><br><span class="line">wget https://raw.githubusercontent.com/cloudnativelabs/kube-router/master/dashboard/kube-router.json</span><br></pre></td></tr></table></figure><p>创建名为<code>Prometheus</code>类型也为<code>Prometheus</code>的数据源，连接地址为<code>http://prometheus:9090/</code></p><p><img src="/posts/27/kube-router-metric-grafana.png" alt=""></p><p>选择刚刚下载的<code>json</code>文件导入<code>dashboard</code></p><p><img src="/posts/27/kube-router-dashboard-upload.png" alt=""></p><p>查看<code>dashboard</code></p><p><img src="/posts/27/kube-router-metric-dashboard.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>istio微服务实验之监控日志与可视化</title>
      <link href="/posts/26/"/>
      <url>/posts/26/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文是istio微服务实验的后续文章，实验前请先参考之前文章。<br><a id="more"></a></p><h3 id="分布式调用链追踪"><a href="#分布式调用链追踪" class="headerlink" title="分布式调用链追踪"></a>分布式调用链追踪</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载yml文件</span></span><br><span class="line">mkdir jaeger &amp;&amp; <span class="built_in">cd</span> jaeger</span><br><span class="line">wget https://raw.githubusercontent.com/jaegertracing/jaeger-kubernetes/master/all-in-one/jaeger-all-in-one-template.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实验环境不支持 LoadBalancer</span></span><br><span class="line"><span class="comment"># 可以修改jaeger-all-in-one-template.yml使用nodeport</span></span><br><span class="line"><span class="comment"># 也可以不修改，这样的会使用随机的nodeport</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -n istio-system -f jaeger-all-in-one-template.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n istio-system</span><br><span class="line">kubectl get svc -n istio-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多次访问之前的vue react界面并点击发射按钮</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">jaegerNodePort=$(kubectl get svc -n istio-system | grep jaeger-query | awk <span class="string">'&#123;print $5&#125;'</span> | cut -d <span class="string">'/'</span> -f 1 | cut -d <span class="string">':'</span> -f 2)</span><br><span class="line">nodeName=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">nodeIP=$(ping -c 1 <span class="variable">$nodeName</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$nodeIP</span>:"</span><span class="variable">$jaegerNodePort</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择 istio-ingress 可以方便查看整个调用链</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line"><span class="built_in">cd</span> jaeger</span><br><span class="line">kubectl delete -n istio-system -f jaeger-all-in-one-template.yml</span><br></pre></td></tr></table></figure><blockquote><p> jaeger的dashboard界面</p></blockquote><p><img src="/posts/26/jaeger-dashboard.png" alt=""></p><blockquote><p>调用链</p></blockquote><p><img src="/posts/26/jaeger-trace.png" alt=""></p><blockquote><p>服务树展示</p></blockquote><p><img src="/posts/26/jaeger-trace-map.png" alt=""></p><h3 id="日志与指标收集"><a href="#日志与指标收集" class="headerlink" title="日志与指标收集"></a>日志与指标收集</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装prometheus</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/istio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改支持nodeport</span></span><br><span class="line">cp install/kubernetes/addons/prometheus.yaml install/kubernetes/addons/prometheus.yaml.ori</span><br><span class="line">vim install/kubernetes/addons/prometheus.yaml</span><br><span class="line">...</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    prometheus.io/scrape: <span class="string">'true'</span></span><br><span class="line">  labels:</span><br><span class="line">    name: prometheus</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: istio-system</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus</span><br><span class="line">  ports:</span><br><span class="line">  - name: prometheus</span><br><span class="line">    protocol: TCP</span><br><span class="line">    port: 9090</span><br><span class="line">  <span class="comment"># 设置使用 nodeport</span></span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f install/kubernetes/addons/prometheus.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置收集</span></span><br><span class="line">istioctl create -f istio/new_telemetry.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多次访问之前的vue react界面并点击发射按钮</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问web测试</span></span><br><span class="line">prometheusNodePort=$(kubectl get svc -n istio-system | grep prometheus | awk <span class="string">'&#123;print $5&#125;'</span> | cut -d <span class="string">'/'</span> -f 1 | cut -d <span class="string">':'</span> -f 2)</span><br><span class="line">nodeName=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">nodeIP=$(ping -c 1 <span class="variable">$nodeName</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$nodeIP</span>:"</span><span class="variable">$prometheusNodePort</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 istio_double_request_count  关键字查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">kubectl -n istio-system logs $(kubectl -n istio-system get pods -l istio=mixer -o jsonpath=<span class="string">'&#123;.items[0].metadata.name&#125;'</span>) mixer | grep \<span class="string">"instance\":\"newlog.logentry.istio-system\"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 清理</span></span><br><span class="line"><span class="string">kubectl delete -f install/kubernetes/addons/prometheus.yaml</span></span><br><span class="line"><span class="string">istioctl delete -f istio/new_telemetry.yml</span></span><br></pre></td></tr></table></figure><h3 id="收集TCP服务的指标"><a href="#收集TCP服务的指标" class="headerlink" title="收集TCP服务的指标"></a>收集TCP服务的指标</h3><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装prometheus</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/istio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改支持nodeport</span></span><br><span class="line">cp install/kubernetes/addons/prometheus.yaml install/kubernetes/addons/prometheus.yaml.ori</span><br><span class="line">vim install/kubernetes/addons/prometheus.yaml</span><br><span class="line">...</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    prometheus.io/scrape: <span class="string">'true'</span></span><br><span class="line">  labels:</span><br><span class="line">    name: prometheus</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: istio-system</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus</span><br><span class="line">  ports:</span><br><span class="line">  - name: prometheus</span><br><span class="line">    protocol: TCP</span><br><span class="line">    port: 9090</span><br><span class="line">  <span class="comment"># 设置使用 nodeport</span></span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f install/kubernetes/addons/prometheus.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置收集</span></span><br><span class="line">istioctl create -f istio/tcp_telemetry.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署使用mongodb应用测试</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问web测试</span></span><br><span class="line">prometheusNodePort=$(kubectl get svc -n istio-system | grep prometheus | awk <span class="string">'&#123;print $5&#125;'</span> | cut -d <span class="string">'/'</span> -f 1 | cut -d <span class="string">':'</span> -f 2)</span><br><span class="line">nodeName=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">nodeIP=$(ping -c 1 <span class="variable">$nodeName</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$nodeIP</span>:"</span><span class="variable">$prometheusNodePort</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 istio_mongo_received_bytes  关键字查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f install/kubernetes/addons/prometheus.yaml</span><br><span class="line">istioctl delete -f istio/tcp_telemetry.yml</span><br></pre></td></tr></table></figure><blockquote><p>TCP数据流图</p></blockquote><p><img src="/posts/26/istio-tcp-attribute-flow.svg" alt=""></p><h3 id="使用grafana可视化指标"><a href="#使用grafana可视化指标" class="headerlink" title="使用grafana可视化指标"></a>使用grafana可视化指标</h3><h4 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装prometheus</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/istio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改支持nodeport</span></span><br><span class="line">cp install/kubernetes/addons/prometheus.yaml install/kubernetes/addons/prometheus.yaml.ori</span><br><span class="line">vim install/kubernetes/addons/prometheus.yaml</span><br><span class="line">...</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    prometheus.io/scrape: <span class="string">'true'</span></span><br><span class="line">  labels:</span><br><span class="line">    name: prometheus</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: istio-system</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus</span><br><span class="line">  ports:</span><br><span class="line">  - name: prometheus</span><br><span class="line">    protocol: TCP</span><br><span class="line">    port: 9090</span><br><span class="line">  <span class="comment"># 设置使用 nodeport</span></span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">...</span><br><span class="line">cp install/kubernetes/addons/grafana.yaml install/kubernetes/addons/grafana.yaml.ori</span><br><span class="line">vim install/kubernetes/addons/grafana.yaml</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: grafana</span><br><span class="line">  namespace: istio-system</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment"># 设置使用 nodeport</span></span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - port: 3000</span><br><span class="line">    protocol: TCP</span><br><span class="line">    name: http</span><br><span class="line">  selector:</span><br><span class="line">    app: grafana</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f install/kubernetes/addons/prometheus.yaml</span><br><span class="line">kubectl apply -f install/kubernetes/addons/grafana.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问web测试</span></span><br><span class="line">grafanaNodePort=$(kubectl get svc -n istio-system | grep grafana | awk <span class="string">'&#123;print $5&#125;'</span> | cut -d <span class="string">'/'</span> -f 1 | cut -d <span class="string">':'</span> -f 2)</span><br><span class="line">nodeName=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">nodeIP=$(ping -c 1 <span class="variable">$nodeName</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$nodeIP</span>:"</span><span class="variable">$grafanaNodePort</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 压力测试查看图表</span></span><br><span class="line"><span class="comment"># 创建测试用的fortio</span></span><br><span class="line">kubectl apply -f &lt;(istioctl kube-inject -f istio/fortio-deploy.yaml)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常访问测试</span></span><br><span class="line">FORTIO_POD=$(kubectl get pod | grep fortio | awk <span class="string">'&#123; print $1 &#125;'</span>)</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -curl http://service-python/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加大压力测试</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -qps 20 -t 100s -loglevel Warning http://service-python/env</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -qps 50 -t 100s -loglevel Warning http://service-go/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f install/kubernetes/addons/prometheus.yaml</span><br><span class="line">kubectl delete -f install/kubernetes/addons/grafana.yaml</span><br><span class="line">kubectl delete -f istio/fortio-deploy.yaml</span><br></pre></td></tr></table></figure><blockquote><p>service mesh 数据监控展示</p></blockquote><p><img src="/posts/26/service-mesh-dashboard.png" alt=""></p><blockquote><p>pilot数据监控展示</p></blockquote><p><img src="/posts/26/grafana-pilot.png" alt=""></p><h3 id="生成服务树"><a href="#生成服务树" class="headerlink" title="生成服务树"></a>生成服务树</h3><h4 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改使用nodeport</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/istio</span><br><span class="line">cp install/kubernetes/addons/servicegraph.yaml install/kubernetes/addons/servicegraph.yaml.ori</span><br><span class="line">vim install/kubernetes/addons/servicegraph.yaml</span><br><span class="line">...</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: servicegraph</span><br><span class="line">  namespace: istio-system</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment"># 设置使用 nodeport</span></span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - name: http</span><br><span class="line">    port: 8088</span><br><span class="line">  selector:</span><br><span class="line">    app: servicegraph</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装prometheus</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/istio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改支持nodeport</span></span><br><span class="line">cp install/kubernetes/addons/prometheus.yaml install/kubernetes/addons/prometheus.yaml.ori</span><br><span class="line">vim install/kubernetes/addons/prometheus.yaml</span><br><span class="line">...</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    prometheus.io/scrape: <span class="string">'true'</span></span><br><span class="line">  labels:</span><br><span class="line">    name: prometheus</span><br><span class="line">  name: prometheus</span><br><span class="line">  namespace: istio-system</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: prometheus</span><br><span class="line">  ports:</span><br><span class="line">  - name: prometheus</span><br><span class="line">    protocol: TCP</span><br><span class="line">    port: 9090</span><br><span class="line">  <span class="comment"># 设置使用 nodeport</span></span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">kubectl apply -f install/kubernetes/addons/prometheus.yaml</span><br><span class="line">kubectl apply -f install/kubernetes/addons/servicegraph.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多次访问之前的vue react界面并点击发射按钮</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问web测试</span></span><br><span class="line">servicegraphNodePort=$(kubectl get svc -n istio-system | grep servicegraph | awk <span class="string">'&#123;print $5&#125;'</span> | cut -d <span class="string">'/'</span> -f 1 | cut -d <span class="string">':'</span> -f 2)</span><br><span class="line">nodeName=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">nodeIP=$(ping -c 1 <span class="variable">$nodeName</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$nodeIP</span>:"</span><span class="variable">$servicegraphNodePort</span>/force/forcegraph.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可使用url</span></span><br><span class="line"><span class="comment"># /force/forcegraph.html</span></span><br><span class="line"><span class="comment"># /dotviz</span></span><br><span class="line"><span class="comment"># /dotgraph</span></span><br><span class="line"><span class="comment"># /d3graph</span></span><br><span class="line"><span class="comment"># /graph</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f install/kubernetes/addons/prometheus.yaml</span><br><span class="line">kubectl delete -f install/kubernetes/addons/servicegraph.yaml</span><br></pre></td></tr></table></figure><blockquote><p>服务树</p></blockquote><p><img src="/posts/26/servicegraph.png" alt=""></p><h3 id="使用Fluentd收集日志"><a href="#使用Fluentd收集日志" class="headerlink" title="使用Fluentd收集日志"></a>使用Fluentd收集日志</h3><h4 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装efk</span></span><br><span class="line">kubectl apply -f istio/logging-stack.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置istio使用efk</span></span><br><span class="line">istioctl create -f istio/fluentd-istio.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多次访问之前的vue react界面并点击发射按钮</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问web测试</span></span><br><span class="line">kibanaNodePort=$(kubectl get svc -n istio-system | grep kibana | awk <span class="string">'&#123;print $5&#125;'</span> | cut -d <span class="string">'/'</span> -f 1 | cut -d <span class="string">':'</span> -f 2)</span><br><span class="line">nodeName=$(kubectl get no | grep <span class="string">'&lt;none&gt;'</span> | head -1 | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">nodeIP=$(ping -c 1 <span class="variable">$nodeName</span> | grep PING | awk <span class="string">'&#123;print $3&#125;'</span> | tr -d <span class="string">'()'</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"http://<span class="variable">$nodeIP</span>:"</span><span class="variable">$kibanaNodePort</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f istio/logging-stack.yml</span><br><span class="line">istio delete -f istio/fluentd-istio.yml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> service mesh </tag>
            
            <tag> microservice </tag>
            
            <tag> istio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>istio微服务实验</title>
      <link href="/posts/25/"/>
      <url>/posts/25/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本实验通过在k8s上部署istio，实现微服务的基础功能。其中会涉及到服务的限流，超时，熔断，降级，流量分隔，A/B测试等功能。实验之前需要安装k8s和istio，请参考之前文章。注意开启istio的自动注入功能。<br><a id="more"></a><br>本实验的服务间调用关系如下：</p><blockquote><p>本实验采用时下流行的前后端分离模式</p><p>前端项目基于vue/react实现</p><p>前端调用python实现的API接口</p><p>python服务调用后端node实现的服务和lua实现的服务</p><p>node服务调用go实现的服务</p><ul><li>—-&gt;service-js</li><li>—-&gt;service-python<ul><li>—-&gt;service-lua</li><li>—-&gt;service-node<ul><li>—-&gt;service-go</li></ul></li></ul></li></ul></blockquote><p>本实验使用的语言技术栈：</p><ul><li>vue/react</li><li>python2/3</li><li>node8/10</li><li>openresty1.11 /1.13</li><li>go1.10/1.9</li></ul><p>架构图如下：</p><p><img src="/posts/25/istio-test-arch.png" alt=""></p><h3 id="下载实验仓库"><a href="#下载实验仓库" class="headerlink" title="下载实验仓库"></a>下载实验仓库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/mgxian/istio-test</span><br></pre></td></tr></table></figure><h3 id="部署服务"><a href="#部署服务" class="headerlink" title="部署服务"></a>部署服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> istio-test</span><br><span class="line">kubectl apply -f service/go/v1/go-v1.yml</span><br><span class="line">kubectl apply -f service/go/v2/go-v2.yml</span><br><span class="line">kubectl apply -f service/python/v1/python-v1.yml</span><br><span class="line">kubectl apply -f service/python/v2/python-v2.yml</span><br><span class="line">kubectl apply -f service/js/v1/js-v1.yml</span><br><span class="line">kubectl apply -f service/js/v2/js-v2.yml</span><br><span class="line">kubectl apply -f service/node/v1/node-v1.yml</span><br><span class="line">kubectl apply -f service/node/v2/node-v2.yml</span><br><span class="line">kubectl apply -f service/lua/v1/lua-v1.yml</span><br><span class="line">kubectl apply -f service/lua/v2/lua-v2.yml</span><br></pre></td></tr></table></figure><h3 id="暴露服务"><a href="#暴露服务" class="headerlink" title="暴露服务"></a>暴露服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用istio提供的ingress功能</span></span><br><span class="line"><span class="comment"># 暴露js和python服务让k8s集群外部访问</span></span><br><span class="line">kubectl apply -f istio/ingress-python.yml</span><br><span class="line">kubectl apply -f istio/ingress-js.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get ingress</span><br></pre></td></tr></table></figure><h3 id="测试访问"><a href="#测试访问" class="headerlink" title="测试访问"></a>测试访问</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置hosts解析</span></span><br><span class="line"><span class="comment"># 11.11.11.112为其中一个node的ip</span></span><br><span class="line">11.11.11.112 istio-test.will</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用curl</span></span><br><span class="line">curl -I istio-test.will</span><br><span class="line">curl -s istio-test.will | egrep <span class="string">"vue|React"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时如果作用浏览器，可能会出会页面显示不正常的情况。</span></span><br><span class="line"><span class="comment"># 因为此时请求会轮流分发到后端js服务的v1/v2版本，因此css/js并不能正常加载</span></span><br></pre></td></tr></table></figure><h3 id="流量管理"><a href="#流量管理" class="headerlink" title="流量管理"></a>流量管理</h3><p>根据请求的信息，把流量路由到服务的不同版本。实验过程如果没有达到预期效果，很有可能是因为存在路由规则冲突，而且没有设置优先级，可以先删除之前设置的路由规则或者把优先级设置高一点。</p><h4 id="把所有流量导向v1版本"><a href="#把所有流量导向v1版本" class="headerlink" title="把所有流量导向v1版本"></a>把所有流量导向v1版本</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建路由规则</span></span><br><span class="line">istioctl create -f istio/route-rule-all-v1.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看路由规则</span></span><br><span class="line">istioctl get routerule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问浏览器测试</span></span><br><span class="line">http://istio-test.will/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时你会看到react app的界面</span></span><br><span class="line"><span class="comment"># 点击发射按钮，会发送ajax请求到python服务</span></span><br><span class="line"><span class="comment"># 由于把所有流量都导向了v1版本</span></span><br><span class="line"><span class="comment"># 多次点击发射按钮会得到一样的内容</span></span><br><span class="line"><span class="comment"># react-----&gt;Python2.7.15-----&gt;Gogo1.9.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-all-v1.yml</span><br></pre></td></tr></table></figure><h4 id="根据请求把流量导向不同版本（A-B测试）"><a href="#根据请求把流量导向不同版本（A-B测试）" class="headerlink" title="根据请求把流量导向不同版本（A/B测试）"></a>根据请求把流量导向不同版本（A/B测试）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建路由规则</span></span><br><span class="line"><span class="comment"># 根据浏览器的不同返回不同内容</span></span><br><span class="line">istioctl create -f istio/route-rule-js-by-agent.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用访问浏览器</span></span><br><span class="line"><span class="comment"># 如果你用chrome浏览器你会看到react app的界面</span></span><br><span class="line"><span class="comment"># 如果你用firefox浏览器你会看到vue app的界面</span></span><br><span class="line"><span class="comment"># 多次点击发射按钮，会获取到不同的内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据前端app不同使用不同版本的python服务</span></span><br><span class="line">istioctl create -f istio/route-rule-python-by-header.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此步骤创建的第一个路由规则保留不删除，为下面做实验提供方便</span></span><br><span class="line">istioctl delete -f istio/route-rule-python-by-header.yml</span><br></pre></td></tr></table></figure><h4 id="根据源服务把流量导向不同版本"><a href="#根据源服务把流量导向不同版本" class="headerlink" title="根据源服务把流量导向不同版本"></a>根据源服务把流量导向不同版本</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建路由规则</span></span><br><span class="line">istioctl create -f istio/route-rule-go-by-source.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时规则如下</span></span><br><span class="line"><span class="comment"># 所有chrome浏览器都走v1版本服务</span></span><br><span class="line"><span class="comment"># 所有firefox浏览器都走v2版本服务</span></span><br><span class="line"><span class="comment"># react-----&gt;Python2.7.15-----&gt;Gogo1.9.6</span></span><br><span class="line"><span class="comment"># vue-----&gt;Python3.6.5-----&gt;Gogo1.10.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-go-by-source.yml</span><br></pre></td></tr></table></figure><h4 id="指定权重进行流量分隔"><a href="#指定权重进行流量分隔" class="headerlink" title="指定权重进行流量分隔"></a>指定权重进行流量分隔</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定权重把流量分隔</span></span><br><span class="line"><span class="comment"># 25%流量路由到v1版本</span></span><br><span class="line"><span class="comment"># 75%流量路由到v2版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建路由规则</span></span><br><span class="line">istioctl create -f istio/route-rule-go-v1-v2.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-go-v1-v2.yaml</span><br></pre></td></tr></table></figure><h4 id="集群内访问公开服务"><a href="#集群内访问公开服务" class="headerlink" title="集群内访问公开服务"></a>集群内访问公开服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认情况下，启用了istio的服务是无法访问外部url的</span></span><br><span class="line"><span class="comment"># 如果需要访问外部url，需要使用egress进行配置</span></span><br><span class="line"><span class="comment"># egress同样支持设置路由规则</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># http</span></span><br><span class="line">istioctl create -f istio/egress-rule-http-bin.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp</span></span><br><span class="line">istioctl create -f istio/egress-rule-tcp-wikipedia.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">istioctl get egressrule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="comment"># 使用exec进入作为测试源使用的pod</span></span><br><span class="line">kubectl apply -f istio/sleep.yaml</span><br><span class="line">kubectl get pods</span><br><span class="line"><span class="built_in">export</span> SOURCE_POD=$(kubectl get pod -l app=sleep -o jsonpath=&#123;.items..metadata.name&#125;)</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$SOURCE_POD</span> -c sleep bash</span><br><span class="line"><span class="comment"># http测试</span></span><br><span class="line">curl http://httpbin.org/headers</span><br><span class="line"><span class="comment"># tcp测试</span></span><br><span class="line">curl -o /dev/null -s -w <span class="string">"%&#123;http_code&#125;\n"</span> https://www.wikipedia.org</span><br><span class="line">curl -s https://en.wikipedia.org/wiki/Main_Page | grep articlecount | grep <span class="string">'Special:Statistics'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">istioctl delete -f istio/egress-rule-http-bin.yml</span><br><span class="line">istioctl delete -f istio/egress-rule-tcp-wikipedia.yml</span><br><span class="line">kubectl delete -f istio/sleep.yaml</span><br></pre></td></tr></table></figure><h3 id="故障管理"><a href="#故障管理" class="headerlink" title="故障管理"></a>故障管理</h3><ul><li>调用超时设置和重试设置</li><li>故障注入，模拟服务故障</li></ul><h4 id="设置超时时间与模拟服务超时故障"><a href="#设置超时时间与模拟服务超时故障" class="headerlink" title="设置超时时间与模拟服务超时故障"></a>设置超时时间与模拟服务超时故障</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置python服务超时时间</span></span><br><span class="line">istioctl create -f istio/route-rule-python-timeout.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟go服务超时故障</span></span><br><span class="line">istioctl create -f istio/route-rule-go-delay.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用浏览器访问并打开调试面板查看网络标签（按F12键）</span></span><br><span class="line"><span class="comment"># 多次点击发射按钮观察响应时间</span></span><br><span class="line"><span class="comment"># 会看到平均50%的请求会返回504超时</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-python-timeout.yml</span><br><span class="line">istioctl delete -f istio/route-rule-go-delay.yml</span><br></pre></td></tr></table></figure><p><img src="/posts/25/istio-timeout-delay-test.png" alt="超时模拟"></p><h4 id="设置重试与模拟服务500故障"><a href="#设置重试与模拟服务500故障" class="headerlink" title="设置重试与模拟服务500故障"></a>设置重试与模拟服务500故障</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置python服务超时时间</span></span><br><span class="line">istioctl create -f istio/route-rule-python-retry.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟go服务超时故障</span></span><br><span class="line">istioctl create -f istio/route-rule-go-abort.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用浏览器访问并打开调试面板查看网络标签（按F12键）</span></span><br><span class="line"><span class="comment"># 多次点击发射按钮观察响应时间</span></span><br><span class="line"><span class="comment"># 会看到部分请求会返回500错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">istioctl delete -f istio/route-rule-python-retry.yml</span><br><span class="line">istioctl delete -f istio/route-rule-go-abort.yml</span><br></pre></td></tr></table></figure><p><img src="/posts/25/istio-retry-abort-test.png" alt="模拟服务500故障"></p><h4 id="超时和服务故障模拟配合使用"><a href="#超时和服务故障模拟配合使用" class="headerlink" title="超时和服务故障模拟配合使用"></a>超时和服务故障模拟配合使用</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有请求延迟5秒钟，然后失败其中的10％</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">  route:</span></span><br><span class="line"><span class="attr">  - labels:</span></span><br><span class="line"><span class="attr">      version:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">  httpFault:</span></span><br><span class="line"><span class="attr">    delay:</span></span><br><span class="line"><span class="attr">      fixedDelay:</span> <span class="number">5</span><span class="string">s</span></span><br><span class="line"><span class="attr">    abort:</span></span><br><span class="line"><span class="attr">      percent:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">      httpStatus:</span> <span class="number">400</span></span><br></pre></td></tr></table></figure><h4 id="熔断器"><a href="#熔断器" class="headerlink" title="熔断器"></a>熔断器</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 熔断器规则需要应用到路由规则上</span></span><br><span class="line"><span class="comment"># 需要先配置至少一个路由规则</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置路由规则</span></span><br><span class="line">istioctl create -f istio/route-rule-go-default.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置熔断规则</span></span><br><span class="line">istioctl create -f istio/route-rule-go-cb.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看规则</span></span><br><span class="line">istioctl get destinationpolicy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试用的fortio</span></span><br><span class="line">kubectl apply -f &lt;(istioctl kube-inject --debug -f istio/fortio-deploy.yaml)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常访问测试</span></span><br><span class="line">FORTIO_POD=$(kubectl get pod | grep fortio | awk <span class="string">'&#123; print $1 &#125;'</span>)</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -curl http://service-go/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试熔断 2并发</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -c 2 -qps 0 -n 20 -loglevel Warning http://service-go/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试熔断 3并发</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -c 3 -qps 0 -n 20 -loglevel Warning http://service-go/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加并发会看到失败的请求占比增高</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line"><span class="comment"># upstream_rq_pending_overflow 表示被熔断的请求数</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c istio-proxy  -- sh -c <span class="string">'curl localhost:15000/stats'</span> | grep service-go | grep pending</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f istio/fortio-deploy.yaml</span><br><span class="line">istioctl delete -f istio/route-rule-go-default.yml</span><br><span class="line">istioctl delete -f istio/route-rule-go-cb.yml</span><br></pre></td></tr></table></figure><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><p>动态设置服务qps</p><ul><li><a href="https://github.com/istio/istio/blob/master/samples/bookinfo/kube/mixer-rule-ratings-ratelimit.yaml" target="_blank" rel="noopener">https://github.com/istio/istio/blob/master/samples/bookinfo/kube/mixer-rule-ratings-ratelimit.yaml</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建service-python默认路由</span></span><br><span class="line"><span class="comment"># 经测试，一定要配置路由规则，否则无法完成限流</span></span><br><span class="line"><span class="comment"># 所以极有可能限流是配置在路由规则上的</span></span><br><span class="line"><span class="comment"># 在路由时进行限流统计</span></span><br><span class="line">istioctl create -f istio/route-rule-python-default.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置一个速率限制的memquota适配器</span></span><br><span class="line"><span class="comment"># 默认设置500qps</span></span><br><span class="line">istioctl create -f istio/ratelimit-handler.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置速率限制实例和规则</span></span><br><span class="line">istioctl create -f istio/ratelimit-rule-service-go.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get memquota -n istio-system</span><br><span class="line">kubectl get quota -n istio-system</span><br><span class="line">kubectl get rule -n istio-system</span><br><span class="line">kubectl get quotaspec -n istio-system</span><br><span class="line">kubectl get quotaspecbinding -n istio-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试用的fortio</span></span><br><span class="line">kubectl apply -f &lt;(istioctl kube-inject -f istio/fortio-deploy.yaml)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常访问测试</span></span><br><span class="line">FORTIO_POD=$(kubectl get pod | grep fortio | awk <span class="string">'&#123; print $1 &#125;'</span>)</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -curl http://service-python/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="comment"># 会出现部分请求不正常</span></span><br><span class="line"><span class="comment"># python 返回 code 500</span></span><br><span class="line"><span class="comment"># go 返回 code 429</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -qps 20 -n 100 -loglevel Warning http://service-python/env</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -qps 50 -n 100 -loglevel Warning http://service-go/env</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">istioctl delete -f istio/route-rule-python-default.yml</span><br><span class="line">istioctl delete -f istio/ratelimit-handler.yaml</span><br><span class="line">istioctl delete -f istio/ratelimit-rule-service-go.yaml</span><br><span class="line">kubectl delete -f istio/fortio-deploy.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带条件的速率限制</span></span><br><span class="line">apiVersion: config.istio.io/v1alpha2</span><br><span class="line">kind: rule</span><br><span class="line">metadata:</span><br><span class="line"> name: quota</span><br><span class="line"> namespace: istio-system</span><br><span class="line">spec:</span><br><span class="line"> match: source.namespace != destination.namespace</span><br><span class="line"> actions:</span><br><span class="line"> - handler: handler.memquota</span><br><span class="line">   instances:</span><br><span class="line">   - requestcount.quota</span><br></pre></td></tr></table></figure><h3 id="流量镜像"><a href="#流量镜像" class="headerlink" title="流量镜像"></a>流量镜像</h3><p>复制服务的流量到别一个镜像服务，一般用于线上新上服务的测试。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建默认策略</span></span><br><span class="line"><span class="comment"># 默认所有流量路由到v1</span></span><br><span class="line">istioctl create -f istio/route-rule-go-default.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试用的fortio</span></span><br><span class="line">kubectl apply -f &lt;(istioctl kube-inject -f istio/fortio-deploy.yaml)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常访问测试</span></span><br><span class="line">FORTIO_POD=$(kubectl get pod | grep fortio | awk <span class="string">'&#123; print $1 &#125;'</span>)</span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -curl http://service-go/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看v1的日志</span></span><br><span class="line">kubectl logs -f $(kubectl get pods | grep service-go-v1 | awk <span class="string">'&#123;print $1&#125;'</span>| head -n 1) -c service-go</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看v2的日志</span></span><br><span class="line"><span class="comment"># 再开一个终端查看日志</span></span><br><span class="line">kubectl logs -f $(kubectl get pods | grep service-go-v2 | awk <span class="string">'&#123;print $1&#125;'</span>| head -n 1) -c service-go</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建镜像规则</span></span><br><span class="line">istioctl create -f istio/route-rule-go-mirror.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试多次访问</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it <span class="variable">$FORTIO_POD</span>  -c fortio /usr/<span class="built_in">local</span>/bin/fortio -- load -c 10 -qps 0 -t 10s -loglevel Warning http://service-go/env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f istio/fortio-deploy.yaml</span><br><span class="line">istioctl delete -f istio/route-rule-go-default.yml</span><br><span class="line">istioctl delete -f istio/route-rule-go-mirror.yml</span><br></pre></td></tr></table></figure><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除相关deploy和svc</span></span><br><span class="line">kubectl delete -f service/go/v1/go-v1.yml</span><br><span class="line">kubectl delete -f service/go/v2/go-v2.yml</span><br><span class="line">kubectl delete -f service/python/v1/python-v1.yml</span><br><span class="line">kubectl delete -f service/python/v2/python-v2.yml</span><br><span class="line">kubectl delete -f service/js/v1/js-v1.yml</span><br><span class="line">kubectl delete -f service/js/v2/js-v2.yml</span><br><span class="line">kubectl delete -f service/node/v1/node-v1.yml</span><br><span class="line">kubectl delete -f service/node/v2/node-v2.yml</span><br><span class="line">kubectl delete -f service/lua/v1/lua-v1.yml</span><br><span class="line">kubectl delete -f service/lua/v2/lua-v2.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除路由规则</span></span><br><span class="line">kubectl delete -f istio/ingress-python.yml</span><br><span class="line">kubectl delete -f istio/ingress-js.yml</span><br><span class="line">istioctl delete routerule $(istioctl get routerule | grep RouteRule | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="http://istio.doczh.cn" target="_blank" rel="noopener">http://istio.doczh.cn</a></li><li><a href="https://istio.io/docs" target="_blank" rel="noopener">https://istio.io/docs</a></li><li><a href="https://istio.io/docs/reference/config/istio.networking.v1alpha3.html" target="_blank" rel="noopener">https://istio.io/docs/reference/config/istio.networking.v1alpha3.html</a></li><li><a href="https://istio.io/docs/reference/config/istio.routing.v1alpha1.html" target="_blank" rel="noopener">https://istio.io/docs/reference/config/istio.routing.v1alpha1.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> service mesh </tag>
            
            <tag> microservice </tag>
            
            <tag> istio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>istio安装测试</title>
      <link href="/posts/24/"/>
      <url>/posts/24/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>istio</code>是一个<code>service mesh</code>开源实现，由Google/IBM/Lyft共同开发。与之类似的还有<code>conduit</code>，但是功能不如<code>istio</code>丰富稳定。架构图如下：<br><a id="more"></a><br><img src="/posts/24/istio-arch.svg" alt="istio-arch"> </p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 去下面的地址下载压缩包</span></span><br><span class="line"><span class="comment"># https://github.com/istio/istio/releases</span></span><br><span class="line">wget https://github.com/istio/istio/releases/download/0.7.1/istio-0.7.1-linux.tar.gz</span><br><span class="line">tar xf istio-0.7.1-linux.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用官方的安装脚本安装</span></span><br><span class="line">curl -L https://git.io/getLatestIstio | sh -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装配置环境变量</span></span><br><span class="line">mv istio-0.7.1 /usr/<span class="built_in">local</span>/</span><br><span class="line">ln -sv /usr/<span class="built_in">local</span>/istio-0.7.1 /usr/<span class="built_in">local</span>/istio</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH=/usr/local/istio/bin:$PATH'</span> &gt; /etc/profile.d/istio.sh</span><br><span class="line"><span class="built_in">source</span> /etc/profile.d/istio.sh</span><br><span class="line">istioctl version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果环境不是云环境，不支持LoadBalancer</span></span><br><span class="line"><span class="comment"># 作如下修改，使得 ingress 监听在80和443端口</span></span><br><span class="line"><span class="comment"># 修改 Istio ingress 使用 NodePort</span></span><br><span class="line"><span class="comment"># 修改使用主机端口映射</span></span><br><span class="line"><span class="comment"># 使用此修改版本之后，每台机器只能运行单个实例</span></span><br><span class="line"><span class="comment"># 大概在1548-1590行左右</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/istio</span><br><span class="line">cp install/kubernetes/istio.yaml install/kubernetes/istio.yaml.ori</span><br><span class="line">vim install/kubernetes/istio.yaml</span><br><span class="line">...</span><br><span class="line"><span class="comment">################################</span></span><br><span class="line"><span class="comment"># Istio ingress</span></span><br><span class="line"><span class="comment">################################</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: istio-ingress</span><br><span class="line">  namespace: istio-system</span><br><span class="line">  labels:</span><br><span class="line">    istio: ingress</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment">#type: LoadBalancer</span></span><br><span class="line">  <span class="comment"># 使用NodePort方式</span></span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line"><span class="comment">#   nodePort: 32000</span></span><br><span class="line">    name: http</span><br><span class="line">  - port: 443</span><br><span class="line">    name: https</span><br><span class="line">  selector:</span><br><span class="line">    istio: ingress</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line"><span class="comment">#kind: Deployment</span></span><br><span class="line"><span class="comment"># 使用DaemonSet部署方式</span></span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: istio-ingress</span><br><span class="line">  namespace: istio-system</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment">#DaemonSet不支持replicas</span></span><br><span class="line">  <span class="comment">#replicas: 1</span></span><br><span class="line">  template:</span><br><span class="line">...</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">          <span class="comment">#主机80端口映射</span></span><br><span class="line">          hostPort: 80</span><br><span class="line">        - containerPort: 443</span><br><span class="line">          <span class="comment">#主机443端口映射</span></span><br><span class="line">          hostPort: 443</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下两种选择一种安装方式</span></span><br><span class="line"><span class="comment"># 安装不使用认证（不使用tls）</span></span><br><span class="line">kubectl apply -f install/kubernetes/istio.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装使用认证（使用tls）</span></span><br><span class="line">kubectl apply -f install/kubernetes/istio-auth.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get svc -n istio-system</span><br><span class="line">kubectl get pods -n istio-system</span><br></pre></td></tr></table></figure><h3 id="启用自动注入-sidecar"><a href="#启用自动注入-sidecar" class="headerlink" title="启用自动注入 sidecar"></a>启用自动注入 sidecar</h3><ul><li><p>不开启自动注入部署应用需要使用如下方式的命令</p><p><code>kubectl apply -f &lt;(istioctl kube-inject -f samples/bookinfo/kube/bookinfo.yaml)</code></p></li><li><p>开启自动注入后，使用正常命令即可部署应用</p><p><code>kubectl apply -f samples/bookinfo/kube/bookinfo.yaml</code></p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># k8s 1.9 版本以后才能使用</span></span><br><span class="line"><span class="comment"># 查看是否支持</span></span><br><span class="line">kubectl api-versions | grep admissionregistration</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除了要满足以上条件外还需要检查kube-apiserver启动的参数</span></span><br><span class="line"><span class="comment"># k8s 1.9 版本要确保 --admission-control 里有 MutatingAdmissionWebhook,ValidatingAdmissionWebhook</span></span><br><span class="line"><span class="comment"># k8s 1.9 之后的版本要确保 --enable-admission-plugins 里有MutatingAdmissionWebhook,ValidatingAdmissionWebhook</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成所需要的证书</span></span><br><span class="line">./install/kubernetes/webhook-create-signed-cert.sh \</span><br><span class="line">    --service istio-sidecar-injector \</span><br><span class="line">    --namespace istio-system \</span><br><span class="line">    --secret sidecar-injector-certs</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 创建配置configmap</span></span><br><span class="line">kubectl apply -f install/kubernetes/istio-sidecar-injector-configmap-release.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成相关yaml</span></span><br><span class="line">cat install/kubernetes/istio-sidecar-injector.yaml | \</span><br><span class="line">     ./install/kubernetes/webhook-patch-ca-bundle.sh &gt; \</span><br><span class="line">     install/kubernetes/istio-sidecar-injector-with-ca-bundle.yaml</span><br><span class="line">     </span><br><span class="line"><span class="comment"># 安装webhook</span></span><br><span class="line">kubectl apply -f install/kubernetes/istio-sidecar-injector-with-ca-bundle.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl -n istio-system get deployment -listio=sidecar-injector</span><br><span class="line">kubectl get namespace -L istio-injection</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试自动注入</span></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl apply -f samples/sleep/sleep.yaml </span><br><span class="line">kubectl get deployment -o wide</span><br><span class="line">kubectl get pod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 default namespace 开启自动注入</span></span><br><span class="line">kubectl label namespace default istio-injection=enabled</span><br><span class="line">kubectl get namespace -L istio-injection</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除创建的pod，等待重建</span></span><br><span class="line">kubectl delete pod $(kubectl get pod | grep sleep | cut -d <span class="string">' '</span> -f 1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看重建后的pod</span></span><br><span class="line"><span class="comment"># 查看是否有istio-proxy容器</span></span><br><span class="line">kubectl get pod</span><br><span class="line">kubectl describe pod $(kubectl get pod | grep sleep | cut -d <span class="string">' '</span> -f 1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete -f samples/sleep/sleep.yaml </span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭自动注入</span></span><br><span class="line">kubectl label namespace default istio-injection-</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭部分pod的自动注入功能</span></span><br><span class="line">...</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      annotations:</span><br><span class="line">        sidecar.istio.io/inject: <span class="string">"false"</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="部署官方测试用例"><a href="#部署官方测试用例" class="headerlink" title="部署官方测试用例"></a>部署官方测试用例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动（未开启自动注入）</span></span><br><span class="line">kubectl apply -f &lt;(istioctl kube-inject -f samples/bookinfo/kube/bookinfo.yaml)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动（已开启自动注入）</span></span><br><span class="line">kubectl apply -f samples/bookinfo/kube/bookinfo.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get services</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get ingress -o wide</span><br></pre></td></tr></table></figure><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令行访问测试</span></span><br><span class="line">GATEWAY_URL=$(kubectl get po -l istio=ingress -n istio-system -o <span class="string">'jsonpath=&#123;.items[0].status.hostIP&#125;'</span>):$(kubectl get svc istio-ingress -n istio-system -o <span class="string">'jsonpath=&#123;.spec.ports[0].nodePort&#125;'</span>)</span><br><span class="line"></span><br><span class="line">curl -o /dev/null -s -w <span class="string">"%&#123;http_code&#125;\n"</span> http://<span class="variable">$&#123;GATEWAY_URL&#125;</span>/productpage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问测试</span></span><br><span class="line">NODE_PORT=$(kubectl get svc istio-ingress -n istio-system -o jsonpath=<span class="string">'&#123;.spec.ports[0].nodePort&#125;'</span>)</span><br><span class="line">NODE_IP=<span class="string">'11.11.11.112'</span></span><br><span class="line"><span class="built_in">echo</span> http://<span class="variable">$&#123;NODE_IP&#125;</span>:<span class="variable">$&#123;NODE_PORT&#125;</span>/productpage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用daemonset方式部署可以使用如下方式访问</span></span><br><span class="line"><span class="comment"># 11.11.11.112为其中一个node节点的ip</span></span><br><span class="line">curl http://11.11.11.112/productpage</span><br></pre></td></tr></table></figure><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理官方用例</span></span><br><span class="line">samples/bookinfo/kube/cleanup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理istio</span></span><br><span class="line">kubectl delete -f install/kubernetes/istio.yaml</span><br><span class="line"><span class="comment"># kubectl delete -f install/kubernetes/istio-auth.yaml</span></span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://istio.io/docs/setup/kubernetes/quick-start.html" target="_blank" rel="noopener">https://istio.io/docs/setup/kubernetes/quick-start.html</a></li><li><a href="https://istio.io/docs/guides/bookinfo.html" target="_blank" rel="noopener">https://istio.io/docs/guides/bookinfo.html</a></li><li><a href="https://istio.io/docs/setup/kubernetes/sidecar-injection.html#automatic-sidecar-injection" target="_blank" rel="noopener">https://istio.io/docs/setup/kubernetes/sidecar-injection.html#automatic-sidecar-injection</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> service mesh </tag>
            
            <tag> microservice </tag>
            
            <tag> istio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s安装traefik作为ingress</title>
      <link href="/posts/23/"/>
      <url>/posts/23/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>traefik 是一个前端负载均衡器，对于微服务架构尤其是 kubernetes 等编排工具具有良好的支持；同 nginx 等相比，traefik 能够自动感知后端容器变化，从而实现自动服务发现。</p><p>traefik部署在k8s上分为daemonset和deployment两种方式各有优缺点：</p><ul><li>daemonset  能确定有哪些node在运行traefik，所以可以确定的知道后端ip，但是不能方便的伸缩</li><li>deployment 可以更方便的伸缩，但是不能确定有哪些node在运行traefik所以不能确定的知道后端ip</li></ul><a id="more"></a><p>一般部署两种不同类型的traefik:</p><ul><li>面向内部(internal)服务的traefik，建议可以使用deployment的方式</li><li>面向外部(external)服务的traefik，建议可以使用daemonset的方式</li></ul><p>建议使用traffic-type标签</p><ul><li>traffic-type: external</li><li>traffic-type: internal</li></ul><p>traefik相应地使用labelSelector</p><ul><li>traffic-type=internal</li><li>traffic-type=external</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">mkdir traefik &amp;&amp; <span class="built_in">cd</span> traefik</span><br><span class="line">wget https://raw.githubusercontent.com/containous/traefik/master/examples/k8s/traefik-rbac.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置rbac</span></span><br><span class="line">kubectl apply -f traefik-rbac.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下两种方式选择一个</span></span><br><span class="line"><span class="comment"># 80 提供正常服务，8080 是其自带的 UI 界面</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以daemonset方式启动traefik</span></span><br><span class="line"><span class="comment"># 会在所有node节点启动一个traefik并监听在80端口</span></span><br><span class="line"><span class="comment"># master节点不会启动traefik</span></span><br><span class="line">wget https://raw.githubusercontent.com/containous/traefik/master/examples/k8s/traefik-ds.yaml</span><br><span class="line">kubectl apply -f traefik-ds.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以deployment方式启动traefik</span></span><br><span class="line">wget https://raw.githubusercontent.com/containous/traefik/master/examples/k8s/traefik-deployment.yaml</span><br><span class="line">kubectl apply -f traefik-deployment.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问测试，如果有响应说明安装正确</span></span><br><span class="line"><span class="comment"># 应该返回404</span></span><br><span class="line"><span class="comment"># 如果以daemonset方式启动traefik使用如下方式验证</span></span><br><span class="line"><span class="comment"># 11.11.11.112为任何一个node节点的ip</span></span><br><span class="line">curl 11.11.11.112</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果以deployment方式启动traefik</span></span><br><span class="line"><span class="comment"># 访问node:nodeport或者集群ip验证</span></span><br></pre></td></tr></table></figure><h3 id="部署Traefik-Web-UI"><a href="#部署Traefik-Web-UI" class="headerlink" title="部署Træfik Web UI"></a>部署Træfik Web UI</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/containous/traefik/master/examples/k8s/ui.yaml</span><br><span class="line">kubectl apply -f ui.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问webui</span></span><br><span class="line"><span class="comment"># 需要先配置host</span></span><br><span class="line"><span class="comment"># 11.11.11.112为任何一个node节点的ip</span></span><br><span class="line">11.11.11.112 traefik-ui.minikube</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问如下地址</span></span><br><span class="line">http://traefik-ui.minikube/</span><br></pre></td></tr></table></figure><h3 id="使用basic验证"><a href="#使用basic验证" class="headerlink" title="使用basic验证"></a>使用basic验证</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成加密密码，如果没有安装htpasswd可以在线生成</span></span><br><span class="line"><span class="comment"># https://tool.lu/htpasswd/</span></span><br><span class="line">htpasswd -c ./auth myusername</span><br><span class="line">cat auth</span><br><span class="line">myusername:<span class="variable">$apr1</span><span class="variable">$78Jyn</span>/1K<span class="variable">$ERHKVRPPlzAX8eBtLuvRZ0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从密码文件创建secret</span></span><br><span class="line"><span class="comment"># monitoring必须和ingress rule处于同一个namespace </span></span><br><span class="line">kubectl create secret generic mysecret --from-file auth --namespace=monitoring</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建ingress</span></span><br><span class="line">cat &gt;prometheus-ingress.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line"> name: prometheus-dashboard</span><br><span class="line"> namespace: monitoring</span><br><span class="line"> annotations:</span><br><span class="line">   kubernetes.io/ingress.class: traefik</span><br><span class="line">   ingress.kubernetes.io/auth-type: <span class="string">"basic"</span></span><br><span class="line">   ingress.kubernetes.io/auth-secret: <span class="string">"mysecret"</span></span><br><span class="line">spec:</span><br><span class="line"> rules:</span><br><span class="line"> - host: dashboard.prometheus.example.com</span><br><span class="line">   http:</span><br><span class="line">     paths:</span><br><span class="line">     - backend:</span><br><span class="line">         serviceName: prometheus</span><br><span class="line">         servicePort: 9090</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">kubectl create -f prometheus-ingress.yaml -n monitoring</span><br></pre></td></tr></table></figure><h3 id="官方实例"><a href="#官方实例" class="headerlink" title="官方实例"></a>官方实例</h3><p><strong>1. 根据域名(host)路由</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># deployment</span></span><br><span class="line">wget https://raw.githubusercontent.com/containous/traefik/master/examples/k8s/cheese-deployments.yaml</span><br><span class="line">kubectl apply -f cheese-deployments.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># service</span></span><br><span class="line">wget https://raw.githubusercontent.com/containous/traefik/master/examples/k8s/cheese-services.yaml</span><br><span class="line">kubectl apply -f cheese-services.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># ingress</span></span><br><span class="line">wget https://raw.githubusercontent.com/containous/traefik/master/examples/k8s/cheese-ingress.yaml</span><br><span class="line">kubectl apply -f cheese-ingress.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line">kubectl get ingress</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="comment"># 配置hosts</span></span><br><span class="line">11.11.11.112 stilton.minikube cheddar.minikube wensleydale.minikube</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问测试</span></span><br><span class="line">http://stilton.minikube/</span><br><span class="line">http://cheddar.minikube/</span><br><span class="line">http://wensleydale.minikube/</span><br></pre></td></tr></table></figure></p><p><strong>2. 根据路径(path)路由</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用新的ingress</span></span><br><span class="line">wget https://raw.githubusercontent.com/containous/traefik/master/examples/k8s/cheeses-ingress.yaml</span><br><span class="line">kubectl apply -f cheeses-ingress.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="comment"># 配置hosts</span></span><br><span class="line">11.11.11.112 cheeses.minikube</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问测试</span></span><br><span class="line">http://cheeses.minikube/stilton/</span><br><span class="line">http://cheeses.minikube/cheddar/</span><br><span class="line">http://cheeses.minikube/wensleydale/</span><br></pre></td></tr></table></figure></p><p><strong>3. 指定路由优先级</strong><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">wildcard-cheeses</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">traefik.frontend.priority:</span> <span class="string">"1"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - host:</span> <span class="string">*.minikube</span></span><br><span class="line"><span class="attr">    http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">        backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">stilton</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="string">http</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">specific-cheeses</span></span><br><span class="line"><span class="attr">  annotations:</span></span><br><span class="line">    <span class="string">traefik.frontend.priority:</span> <span class="string">"2"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  rules:</span></span><br><span class="line"><span class="attr">  - host:</span> <span class="string">specific.minikube</span></span><br><span class="line"><span class="attr">    http:</span></span><br><span class="line"><span class="attr">      paths:</span></span><br><span class="line"><span class="attr">      - path:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">        backend:</span></span><br><span class="line"><span class="attr">          serviceName:</span> <span class="string">stilton</span></span><br><span class="line"><span class="attr">          servicePort:</span> <span class="string">http</span></span><br></pre></td></tr></table></figure></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://docs.traefik.io/user-guide/kubernetes/" target="_blank" rel="noopener">https://docs.traefik.io/user-guide/kubernetes/</a></li><li><a href="https://mritd.me/2016/12/06/try-traefik-on-kubernetes/" target="_blank" rel="noopener">https://mritd.me/2016/12/06/try-traefik-on-kubernetes/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> ingress </tag>
            
            <tag> traefik </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10安装配置minikube</title>
      <link href="/posts/22/"/>
      <url>/posts/22/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>minukube</code>是一个可以让开发人员在本地环境运行k8s的软件，便于开发人员在本地测试运行k8s</p><a id="more"></a><blockquote><p>相关下载链接</p><p>链接：<a href="https://pan.baidu.com/s/10dJLJiUnXsZcA5c6HwWVqQ" target="_blank" rel="noopener">https://pan.baidu.com/s/10dJLJiUnXsZcA5c6HwWVqQ</a> 密码：qh6k</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong>1. 安装minikube</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 到 minikube release 页面下载 minikube 安装文件</span></span><br><span class="line">https://github.com/kubernetes/minikube/releases/download/v0.26.1/minikube-installer.exe</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接双击安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="comment"># 如果不设置，默认会在C盘中安装相关文件</span></span><br><span class="line">MINIKUBE_HOME=D:\minikube</span><br></pre></td></tr></table></figure><p><strong>2. 安装kubectl</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 如果不能正常下载 可能需要翻墙</span></span><br><span class="line">curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/windows/amd64/kubectl.exe</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把kubectl所在目录放在系统path中</span></span><br><span class="line"><span class="comment"># 也可以放在minikube的安装目录中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">kubectl version</span><br></pre></td></tr></table></figure><p><strong>3.安装virtualbox</strong></p><blockquote><p>官方下载<code>virtualbox</code>对应平台的软件包安装</p></blockquote><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取k8s可用版本</span></span><br><span class="line">minikube get-k8s-versions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动之前因为需要下载minikube-iso和localkube，所以需要使用代理</span></span><br><span class="line"><span class="comment"># 有时不需要使用代理也能下载，但是启动之后 由于需要拉取gcr.io上面的镜像</span></span><br><span class="line"><span class="comment"># 所以仍然需要配置docker的代理</span></span><br><span class="line"><span class="comment"># 使用minikube ssh连接到minikube主机里</span></span><br><span class="line"><span class="comment"># 下载好相关镜像，再重新打tag为gcr.io也是一种方法</span></span><br><span class="line"><span class="comment"># 下载存储在 MINIKUBE_HOME/.minikube/cache 目录下</span></span><br><span class="line"><span class="comment"># MINIKUBE_HOME 如果没有设置 默认为用户的家目录 </span></span><br><span class="line">https_proxy=http://127.0.0.1:1080 minikube start \</span><br><span class="line">--vm-driver virtualbox \</span><br><span class="line">--memory 2048 --<span class="built_in">disable</span>-driver-mounts \</span><br><span class="line">--registry-mirror https://tfhzn46h.mirror.aliyuncs.com \</span><br><span class="line">--docker-env http_proxy=http://172.16.0.10:1080 \</span><br><span class="line">--docker-env https_proxy=http://172.16.0.10:1080 \</span><br><span class="line">--docker-env no_proxy=<span class="string">'192.168.99.0/24,.docker.io,.aliyuncs.com'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后根据提示操作</span></span><br></pre></td></tr></table></figure><h3 id="基本测试使用"><a href="#基本测试使用" class="headerlink" title="基本测试使用"></a>基本测试使用</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取minikube的ip</span></span><br><span class="line">minikube ip</span><br><span class="line"></span><br><span class="line"><span class="comment"># ssh连接到minikube主机里</span></span><br><span class="line"><span class="comment"># 使用git-bash可能会无法正常连接</span></span><br><span class="line">minikube ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 官方示例</span></span><br><span class="line">kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.8 --port=8080</span><br><span class="line">kubectl expose deployment hello-minikube --<span class="built_in">type</span>=NodePort</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动nginx并创建服务</span></span><br><span class="line">kubectl run nginx --image=nginx:alpine --port=80</span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看访问</span></span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line">curl $(minikube service hello-minikube --url)</span><br><span class="line">curl $(minikube service nginx --url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理</span></span><br><span class="line">kubectl delete deployment nginx hello-minikube</span><br><span class="line">kubectl delete svc nginx hello-minikube</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止删除minikube集群</span></span><br><span class="line">minikube stop</span><br><span class="line">minikube delete</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看其他组件</span></span><br><span class="line">minikube addons list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用组件</span></span><br><span class="line">minikube addons <span class="built_in">enable</span> heapster</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在浏览器中打开组件</span></span><br><span class="line">minikube addons open heapster</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://kubernetes.io/docs/getting-started-guides/minikube/" target="_blank" rel="noopener">https://kubernetes.io/docs/getting-started-guides/minikube/</a></li><li><a href="https://github.com/kubernetes/minikube/blob/v0.24.1/README.md" target="_blank" rel="noopener">https://github.com/kubernetes/minikube/blob/v0.24.1/README.md</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> minikube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用vagrant基于官方的box制作自己的基础box</title>
      <link href="/posts/21/"/>
      <url>/posts/21/</url>
      
        <content type="html"><![CDATA[<h3 id="使用vagrant启动虚拟机"><a href="#使用vagrant启动虚拟机" class="headerlink" title="使用vagrant启动虚拟机"></a>使用vagrant启动虚拟机</h3><a id="more"></a><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mkdir base &amp;&amp; <span class="built_in">cd</span> base</span><br><span class="line">cat &gt;Vagrantfile&lt;&lt;EOF</span><br><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</span><br><span class="line">  <span class="comment"># centos-7.4-docker-17为你想使用的基础box</span></span><br><span class="line">  config.vm.box = <span class="string">"centos-7.4-docker-17"</span></span><br><span class="line">  config.ssh.insert_key = <span class="literal">false</span></span><br><span class="line">  config.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |v|</span><br><span class="line">    v.customize [<span class="string">"modifyvm"</span>, :id, <span class="string">"--name"</span>, <span class="string">"will"</span>]</span><br><span class="line">  end</span><br><span class="line">  config.vm.synced_folder <span class="string">"."</span>, <span class="string">"/vagrant"</span>, disabled: <span class="literal">true</span></span><br><span class="line">end</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">vagrant up</span><br></pre></td></tr></table></figure><h3 id="登录配置安装相关软件"><a href="#登录配置安装相关软件" class="headerlink" title="登录配置安装相关软件"></a>登录配置安装相关软件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用xshell等ssh工具登录</span></span><br><span class="line"><span class="comment"># 配置源</span></span><br><span class="line"><span class="comment"># 安装配置所需要的软件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完成关机前做如下清理操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除网卡mac信息</span></span><br><span class="line">rm -f /etc/udev/rules.d/70-persistent-net.rules</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除临时文件</span></span><br><span class="line">yum clean all</span><br><span class="line">apt-get clean</span><br><span class="line">rm -rf /tmp/*</span><br><span class="line">rm -f /var/<span class="built_in">log</span>/wtmp /var/<span class="built_in">log</span>/btmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除命令历史记录</span></span><br><span class="line"><span class="built_in">history</span> -c</span><br><span class="line">&gt; .bash_history</span><br><span class="line">sudo su - vagrant</span><br><span class="line"><span class="built_in">history</span> -c</span><br><span class="line">&gt; .bash_history</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关机</span></span><br><span class="line">vagrant halt</span><br></pre></td></tr></table></figure><h3 id="制作基础box"><a href="#制作基础box" class="headerlink" title="制作基础box"></a>制作基础box</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;Vagrantfile.base&lt;&lt;EOF</span><br><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(2) <span class="keyword">do</span> |config|</span><br><span class="line">    <span class="comment"># Disable synced folders</span></span><br><span class="line">    config.vm.synced_folder <span class="string">"."</span>, <span class="string">"/vagrant"</span>, disabled: <span class="literal">true</span></span><br><span class="line">end</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># will为之前启动时设置的vm名</span></span><br><span class="line">vagrant package --base will --vagrantfile Vagrantfile.base --output will-base.box</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加制作完成的box</span></span><br><span class="line">vagrant box add base will-base.box</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">vagrant init base</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">vagrant up</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line"><span class="comment"># 如果能ssh连接成功，表示基础box配置正确</span></span><br><span class="line">vagrant ssh-config</span><br><span class="line">vagrant ssh</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://thornelabs.net/2013/11/11/create-a-centos-6-vagrant-base-box-from-scratch-using-virtualbox.html" target="_blank" rel="noopener">https://thornelabs.net/2013/11/11/create-a-centos-6-vagrant-base-box-from-scratch-using-virtualbox.html</a></li><li><a href="https://www.dravetech.com/blog/2016/01/14/vagrant_box_ios_xr.html" target="_blank" rel="noopener">https://www.dravetech.com/blog/2016/01/14/vagrant_box_ios_xr.html</a></li><li><a href="http://blog.pangyanhan.com/posts/2015-11-10-creating-a-vagrant-base-box.html" target="_blank" rel="noopener">http://blog.pangyanhan.com/posts/2015-11-10-creating-a-vagrant-base-box.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> vagrant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用vagrant快速搭建linux实验环境</title>
      <link href="/posts/20/"/>
      <url>/posts/20/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本文主要介绍如何使用<code>vagrant</code>配合<code>virtualbox</code>快速搭建实验环境。<br><code>virtualbox</code>是一个开源跨平台虚拟机管理软件，功能类似收费的<code>vmware</code><br><code>vagrant</code>是一个开源的虚拟机配置编排软件，可以在命令行快速启动管理虚拟机。</p><a id="more"></a><blockquote><p>相关资源的百度云下载链接<br>链接：<a href="https://pan.baidu.com/s/1nt_b96SEOIIWl2gIrabPpg" target="_blank" rel="noopener">https://pan.baidu.com/s/1nt_b96SEOIIWl2gIrabPpg</a> 密码：6c3d</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong>1.安装<code>virtualbox</code></strong></p><blockquote><p>官方下载<code>virtualbox</code>对应平台的软件包安装</p></blockquote><p><strong>2.安装<code>vagrant</code></strong></p><blockquote><p>官方下载<code>vagrant</code>对应平台的软件包安装，由于官方网站在国外，可能下载比较慢。</p></blockquote><p><strong>3.设置<code>virtualbox</code>虚拟机存方目录</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认情况下 virtualbox 启动虚拟机会存放在用户的家目录里</span></span><br><span class="line"><span class="comment"># windows 下C盘可能过小，需要设置特定目录存储虚拟机</span></span><br><span class="line">VBoxManage setproperty machinefolder D:\virtualbox</span><br><span class="line">VBoxManage list systemproperties | grep machine</span><br></pre></td></tr></table></figure><h3 id="搭建实验环境"><a href="#搭建实验环境" class="headerlink" title="搭建实验环境"></a>搭建实验环境</h3><p><strong>1.下载导入相关box</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 由于需要从国外拉取box，可能会很慢。推荐使用我存储在百度云的box</span></span><br><span class="line"><span class="comment"># 导入box</span></span><br><span class="line">vagrant box add centos-7.4-base centos-7.4-base.box</span><br><span class="line">vagrant box list</span><br></pre></td></tr></table></figure><p><strong>2.启动单机</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">mkdir single &amp;&amp; <span class="built_in">cd</span> single</span><br><span class="line">cat &gt;Vagrantfile&lt;&lt;EOF</span><br><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</span><br><span class="line">    config.vm.box = <span class="string">"centos-7.4-base"</span></span><br><span class="line">    config.vm.hostname = <span class="string">"will"</span></span><br><span class="line">    config.ssh.insert_key = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 指定CPU和内存大小</span></span><br><span class="line">    config.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |v|</span><br><span class="line">      v.memory = 1024</span><br><span class="line">      v.cpus = 2</span><br><span class="line">      v.customize [<span class="string">"modifyvm"</span>, :id, <span class="string">"--name"</span>, <span class="string">"will"</span>]</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置网络</span></span><br><span class="line">    config.vm.network <span class="string">"private_network"</span>, ip: <span class="string">"11.11.11.111"</span></span><br><span class="line">    <span class="comment"># config.vm.network "private_network", ip: "192.168.22.10"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置启动后的操作</span></span><br><span class="line">    config.vm.provision <span class="string">"shell"</span>, inline: &lt;&lt;-SHELL</span><br><span class="line">      hostname</span><br><span class="line">    SHELL</span><br><span class="line">end</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">vagrant up</span><br></pre></td></tr></table></figure><p><strong>3.启动多主机</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mkdir double &amp;&amp; <span class="built_in">cd</span> double</span><br><span class="line">cat &gt;Vagrantfile&lt;&lt;EOF</span><br><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</span><br><span class="line">    config.vm.define <span class="string">"web"</span> <span class="keyword">do</span> |web|</span><br><span class="line">        web.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |v|</span><br><span class="line">            v.customize [<span class="string">"modifyvm"</span>, :id, <span class="string">"--name"</span>, <span class="string">"web"</span>, <span class="string">"--memory"</span>, <span class="string">"512"</span>]</span><br><span class="line">        end</span><br><span class="line">        web.vm.box = <span class="string">"centos-6.9"</span></span><br><span class="line">        web.vm.hostname = <span class="string">"web"</span></span><br><span class="line">        web.vm.network <span class="string">"private_network"</span>, ip: <span class="string">"11.11.11.11"</span></span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">    config.vm.define <span class="string">"db"</span> <span class="keyword">do</span> |db|</span><br><span class="line">        db.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |v|</span><br><span class="line">            v.customize [<span class="string">"modifyvm"</span>, :id, <span class="string">"--name"</span>, <span class="string">"db"</span>, <span class="string">"--memory"</span>, <span class="string">"512"</span>]</span><br><span class="line">        end</span><br><span class="line">        db.vm.box = <span class="string">"centos-6.9"</span></span><br><span class="line">        db.vm.hostname = <span class="string">"db"</span></span><br><span class="line">        db.vm.network <span class="string">"private_network"</span>, ip: <span class="string">"11.11.11.22"</span></span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">vagrant up</span><br></pre></td></tr></table></figure><p><strong>3.启动集群</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mkdir cluster &amp;&amp; <span class="built_in">cd</span> cluster</span><br><span class="line">cat &gt;Vagrantfile&lt;&lt;EOF</span><br><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</span><br><span class="line">    (1..6).each <span class="keyword">do</span> |i|</span><br><span class="line">      config.vm.define <span class="string">"lab#&#123;i&#125;"</span> <span class="keyword">do</span> |node|</span><br><span class="line">        node.vm.box = <span class="string">"centos-7.4-docker-17"</span></span><br><span class="line">        node.ssh.insert_key = <span class="literal">false</span></span><br><span class="line">        node.vm.hostname = <span class="string">"lab#&#123;i&#125;"</span></span><br><span class="line">        node.vm.network <span class="string">"private_network"</span>, ip: <span class="string">"11.11.11.11#&#123;i&#125;"</span></span><br><span class="line">        node.vm.network <span class="string">"private_network"</span>, ip: <span class="string">"11.11.12.11#&#123;i&#125;"</span></span><br><span class="line">        node.vm.provision <span class="string">"shell"</span>,</span><br><span class="line">          inline: <span class="string">"echo hello from node #&#123;i&#125;"</span></span><br><span class="line">        node.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |v|</span><br><span class="line">          v.cpus = 4</span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, :id, <span class="string">"--name"</span>, <span class="string">"lab#&#123;i&#125;"</span>, <span class="string">"--memory"</span>, <span class="string">"2048"</span>]</span><br><span class="line">        end</span><br><span class="line">      end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">vagrant up</span><br></pre></td></tr></table></figure><p><strong>4.连接虚拟机</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一般情况下虚拟机ssh连接用户名为 vagrant</span></span><br><span class="line"><span class="comment"># 一般情况下都不支持 密码登录， 可以登录之后自行配置支持密码登录</span></span><br><span class="line"><span class="comment"># 连接的sshkey存储在用户家目录下 .vagrant.d 目录下</span></span><br><span class="line"><span class="comment"># C:\Users\will\.vagrant.d\insecure_private_key</span></span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><blockquote><p>以下命令后面都可以接虚拟机名，只对指定虚拟机作操作</p><ul><li>启动虚拟机<ul><li>vagrant up</li></ul></li></ul></blockquote><ul><li><p>暂停虚拟机</p><ul><li>vagrant suspend</li></ul></li><li><p>关闭虚拟机</p><ul><li>vagrant halt</li></ul></li><li><p>删除虚拟机</p><ul><li>vagrant destroy</li></ul></li><li><p>存储快照</p><ul><li>vagrant snapshot save lab1 init</li></ul></li><li><p>恢复快照</p><ul><li>vagrant snapshot restore lab1 init</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> vagrant </tag>
            
            <tag> virtualbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7配置k8s集群使用coredns</title>
      <link href="/posts/19/"/>
      <url>/posts/19/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>CoreDNS</code>是一个<code>Go</code>语言实现的链式插件<code>DNS服务端</code>，是CNCF成员，是一个高性能、易扩展的<code>DNS服务端</code>。可以很方便的部署在k8s集群中，用来代替<code>kube-dns</code>。</p><a id="more"></a><h3 id="使用kubeadm初始化时指定"><a href="#使用kubeadm初始化时指定" class="headerlink" title="使用kubeadm初始化时指定"></a>使用kubeadm初始化时指定</h3><blockquote><p> 安装方法与《centos7使用kubeadm安装k8s集群》基本一致<br>只需要简单修改<code>kubeadm-master.config</code>配置文件</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">MasterConfiguration</span></span><br><span class="line"><span class="attr">kubernetesVersion:</span> <span class="string">v1.9.0</span></span><br><span class="line"><span class="attr">imageRepository:</span> <span class="string">registry.cn-shanghai.aliyuncs.com/gcr-k8s</span></span><br><span class="line"><span class="attr">etcd:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="string">registry.cn-shanghai.aliyuncs.com/gcr-k8s/etcd-amd64:3.1.10</span></span><br><span class="line"><span class="attr">api:</span></span><br><span class="line"><span class="attr">  advertiseAddress:</span> <span class="number">11.11</span><span class="number">.11</span><span class="number">.111</span></span><br><span class="line"><span class="attr">networking:</span></span><br><span class="line"><span class="attr">  podSubnet:</span> <span class="number">10.244</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line"><span class="attr">featureGates:</span></span><br><span class="line"><span class="attr">  CoreDNS:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="单独部署coredns"><a href="#单独部署coredns" class="headerlink" title="单独部署coredns"></a>单独部署coredns</h3><blockquote><p>不依赖kubeadm的方式，适用于不是使用kubeadm创建的k8s集群，或者kubeadm初始化集群之后，删除了dns相关部署。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在calico网络中也配置一个coredns</span></span><br><span class="line"><span class="comment"># 10.96.0.10 为k8s官方指定的kube-dns地址</span></span><br><span class="line">mkdir coredns &amp;&amp; <span class="built_in">cd</span> coredns</span><br><span class="line">wget https://raw.githubusercontent.com/coredns/deployment/master/kubernetes/coredns.yaml.sed</span><br><span class="line">wget https://raw.githubusercontent.com/coredns/deployment/master/kubernetes/deploy.sh</span><br><span class="line">chmod +x deploy.sh</span><br><span class="line">./deploy.sh -i 10.96.0.10 &gt; coredns.yml</span><br><span class="line">kubectl apply -f coredns.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s与各网络插件集成</title>
      <link href="/posts/18/"/>
      <url>/posts/18/</url>
      
        <content type="html"><![CDATA[<h3 id="通用说明"><a href="#通用说明" class="headerlink" title="通用说明"></a>通用说明</h3><ul><li><p>如果多次换不同网络插件实验，每次实验前先把<code>/etc/cni/net.d/</code>目录下文件清空</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /etc/cni/net.d/*</span><br></pre></td></tr></table></figure></li></ul><h3 id="flannel"><a href="#flannel" class="headerlink" title="flannel"></a>flannel</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建flannel目录下载相关文件</span></span><br><span class="line">mkdir flannel &amp;&amp; <span class="built_in">cd</span> flannel</span><br><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line"><span class="comment"># 此处的ip配置要与kubeadm的pod-network参数配置的一致</span></span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"Network"</span>: <span class="string">"192.168.0.0/16"</span>,</span><br><span class="line">      <span class="string">"Backend"</span>: &#123;</span><br><span class="line">        <span class="string">"Type"</span>: <span class="string">"vxlan"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像</span></span><br><span class="line">image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果Node有多个网卡的话，参考flannel issues 39701，</span></span><br><span class="line"><span class="comment"># https://github.com/kubernetes/kubernetes/issues/39701</span></span><br><span class="line"><span class="comment"># 目前需要在kube-flannel.yml中使用--iface参数指定集群主机内网网卡的名称，</span></span><br><span class="line"><span class="comment"># 否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，</span></span><br><span class="line"><span class="comment"># flanneld启动参数加上--iface=&lt;iface-name&gt;</span></span><br><span class="line">    containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        - --iface=eth1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="calico"><a href="#calico" class="headerlink" title="calico"></a>calico</h3><p><strong>1.配置启动etcd集群</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本次实验使用与k8s一个etcd集群</span></span><br><span class="line"><span class="comment"># 生境环境建议使用单独的一套集群</span></span><br></pre></td></tr></table></figure><p><strong>2.配置启动calico</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建calico目录下载相关文件</span></span><br><span class="line">mkdir calico &amp;&amp; <span class="built_in">cd</span> calico</span><br><span class="line">wget https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/rbac.yaml</span><br><span class="line">wget https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/calico.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果启用了RBAC（默认k8s集群启用），配置RBAC</span></span><br><span class="line">kubectl apply -f rbac.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改calico.yaml文件中名为calico-config的ConfigMap中的etcd_endpoints参数为自己的etcd集群</span></span><br><span class="line">etcd_endpoints: <span class="string">"http://11.11.11.111:2379,http://11.11.11.112:2379,http://11.11.11.113:2379"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像为国内镜像</span></span><br><span class="line">sed -i <span class="string">'s@image: quay.io/calico/@image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/calico-@g'</span> calico.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -f calico.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br></pre></td></tr></table></figure><p><strong>3.参考文档</strong></p><ul><li><a href="https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/calico#installing-with-the-etcd-datastore" target="_blank" rel="noopener">https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/calico#installing-with-the-etcd-datastore</a></li></ul><h3 id="canal"><a href="#canal" class="headerlink" title="canal"></a>canal</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建flannel目录下载相关文件</span></span><br><span class="line">mkdir canal &amp;&amp; <span class="built_in">cd</span> canal</span><br><span class="line">wget https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/canal/rbac.yaml</span><br><span class="line">wget https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/canal/canal.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line"><span class="comment"># 此处的ip配置要与kubeadm的pod-network参数配置的一致</span></span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"Network"</span>: <span class="string">"192.168.0.0/16"</span>,</span><br><span class="line">      <span class="string">"Backend"</span>: &#123;</span><br><span class="line">        <span class="string">"Type"</span>: <span class="string">"vxlan"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改calico镜像</span></span><br><span class="line">sed -i <span class="string">'s@image: quay.io/calico/@image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/calico-@g'</span> canal.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改flannel镜像</span></span><br><span class="line">image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果Node有多个网卡的话，参考flannel issues 39701，</span></span><br><span class="line"><span class="comment"># https://github.com/kubernetes/kubernetes/issues/39701</span></span><br><span class="line"><span class="comment"># 目前需要在kube-flannel.yml中使用--iface参数指定集群主机内网网卡的名称，</span></span><br><span class="line"><span class="comment"># 否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，</span></span><br><span class="line"><span class="comment"># flanneld启动参数加上--iface=&lt;iface-name&gt;</span></span><br><span class="line">    containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line">       <span class="built_in">command</span>: [ <span class="string">"/opt/bin/flanneld"</span>, <span class="string">"--ip-masq"</span>, <span class="string">"--kube-subnet-mgr"</span>, <span class="string">"--iface=eth1"</span> ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -f rbac.yaml</span><br><span class="line">kubectl apply -f canal.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br></pre></td></tr></table></figure><h3 id="kube-router"><a href="#kube-router" class="headerlink" title="kube-router"></a>kube-router</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本次实验重新创建了集群，使用之前测试其他网络插件的集群环境没有成功</span></span><br><span class="line"><span class="comment"># 可能是由于环境干扰，实验时需要注意</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建kube-router目录下载相关文件</span></span><br><span class="line">mkdir kube-router &amp;&amp; <span class="built_in">cd</span> kube-router</span><br><span class="line">wget https://raw.githubusercontent.com/cloudnativelabs/kube-router/master/daemonset/kubeadm-kuberouter.yaml</span><br><span class="line">wget https://raw.githubusercontent.com/cloudnativelabs/kube-router/master/daemonset/kubeadm-kuberouter-all-features.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下两种部署方式任选其一</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 只启用 pod网络通信，网络隔离策略 功能</span></span><br><span class="line">kubectl apply -f kubeadm-kuberouter.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 启用 pod网络通信，网络隔离策略，服务代理 所有功能</span></span><br><span class="line"><span class="comment"># 删除kube-proxy和其之前配置的服务代理</span></span><br><span class="line">kubectl apply -f kubeadm-kuberouter-all-features.yaml</span><br><span class="line">kubectl -n kube-system delete ds kube-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在每个节点上执行</span></span><br><span class="line">docker run --privileged --net=host registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy-amd64:v1.10.2 kube-proxy --cleanup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br></pre></td></tr></table></figure><h3 id="romana"><a href="#romana" class="headerlink" title="romana"></a>romana</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建flannel目录下载相关文件</span></span><br><span class="line">mkdir romana &amp;&amp; <span class="built_in">cd</span> romana</span><br><span class="line">wget https://raw.githubusercontent.com/romana/romana/master/containerize/specs/romana-kubeadm.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像</span></span><br><span class="line">sed -i <span class="string">'s@gcr.io/@registry.cn-hangzhou.aliyuncs.com/@g'</span> romana-kubeadm.yml</span><br><span class="line">sed -i <span class="string">'s@quay.io/romana/@registry.cn-shanghai.aliyuncs.com/gcr-k8s/romana-@g'</span> romana-kubeadm.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -f romana-kubeadm.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br></pre></td></tr></table></figure><h3 id="CNI-Genie"><a href="#CNI-Genie" class="headerlink" title="CNI-Genie"></a>CNI-Genie</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CNI-Genie是华为开源的网络组件，可以使k8s同时部署多个网络插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在k8s集群中安装calico组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在k8s集群中安装flannel组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在k8s集群中安装Genie组件</span></span><br><span class="line">mkdir CNI-Genie &amp;&amp; <span class="built_in">cd</span> CNI-Genie</span><br><span class="line">wget  https://raw.githubusercontent.com/Huawei-PaaS/CNI-Genie/master/conf/1.8/genie.yaml</span><br><span class="line">sed -i <span class="string">'s@image: quay.io/cnigenie/v1.5:latest@image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/cnigenie-v1.5:latest@g'</span> genie.yaml</span><br><span class="line">kubectl apply -f genie.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">cat &gt;nginx-calico.yml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-calico</span><br><span class="line">  labels:</span><br><span class="line">    app: web</span><br><span class="line">  annotations:</span><br><span class="line">    cni: <span class="string">"calico"</span></span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: nginx</span><br><span class="line">      image: nginx:alpine</span><br><span class="line">      imagePullPolicy: IfNotPresent</span><br><span class="line">      ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">EOF</span><br><span class="line">cat &gt;nginx-flannel.yml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-flannel</span><br><span class="line">  labels:</span><br><span class="line">    app: web</span><br><span class="line">  annotations:</span><br><span class="line">    cni: <span class="string">"flannel"</span></span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: nginx</span><br><span class="line">      image: nginx:alpine</span><br><span class="line">      imagePullPolicy: IfNotPresent</span><br><span class="line">      ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f nginx-calico.yml</span><br><span class="line">kubectl apply -f nginx-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试网络通信</span></span><br><span class="line">kubectl <span class="built_in">exec</span> nginx-calico -i -t -- ping -c4 1.1.1.1</span><br><span class="line">kubectl <span class="built_in">exec</span> nginx-flannel -i -t -- ping -c4 1.1.1.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于先启动的flannel，然后k8s创建了coredns，所以使用flannel cni的能正常使用dns</span></span><br><span class="line"><span class="comment"># 使用calico cni无法使用正常dns</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试dns</span></span><br><span class="line">kubectl <span class="built_in">exec</span> nginx-calico -i -t -- ping -c4 www.baidu.com</span><br><span class="line">kubectl <span class="built_in">exec</span> nginx-flannel -i -t -- ping -c4 www.baidu.com</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p> kube-router性能损失最小，时延最小，其他网络插件性能差距不大。除了flannel没有网络隔离策略，其他均支持网络隔离策略。CNI-Genie是一个可以让k8s使用多个cni网络插件的组件，暂时不支持隔离策略。</p><p>理论结果： kube-router &gt; calico &gt; canal = flannel = romana</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7使用kubeadm配置高可用k8s集群</title>
      <link href="/posts/17/"/>
      <url>/posts/17/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>使用<code>kubeadm</code>配置多<code>master</code>节点，实现高可用。<br><a id="more"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="实验环境说明"><a href="#实验环境说明" class="headerlink" title="实验环境说明"></a>实验环境说明</h4><h5 id="实验架构图"><a href="#实验架构图" class="headerlink" title="实验架构图"></a>实验架构图</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lab1: etcd master haproxy keepalived 11.11.11.111</span><br><span class="line">lab2: etcd master haproxy keepalived 11.11.11.112</span><br><span class="line">lab3: etcd master haproxy keepalived 11.11.11.113</span><br><span class="line">lab4: node  11.11.11.114</span><br><span class="line">lab5: node  11.11.11.115</span><br><span class="line">lab6: node  11.11.11.116</span><br><span class="line"></span><br><span class="line">vip(loadblancer ip): 11.11.11.110</span><br></pre></td></tr></table></figure><h5 id="实验使用的Vagrantfile"><a href="#实验使用的Vagrantfile" class="headerlink" title="实验使用的Vagrantfile"></a>实验使用的<code>Vagrantfile</code></h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">    (<span class="number">1</span>..<span class="number">6</span>).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      config.vm.define <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span> <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">        node.vm.box = <span class="string">"centos-7.4-docker-17"</span></span><br><span class="line">        node.ssh.insert_key = <span class="literal">false</span></span><br><span class="line">        node.vm.hostname = <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.network <span class="string">"private_network"</span>, <span class="symbol">ip:</span> <span class="string">"11.11.11.11<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provision <span class="string">"shell"</span>,</span><br><span class="line">          <span class="symbol">inline:</span> <span class="string">"echo hello from node <span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> <span class="params">|v|</span></span><br><span class="line">          v.cpus = <span class="number">2</span></span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, <span class="symbol">:id</span>, <span class="string">"--name"</span>, <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span>, <span class="string">"--memory"</span>, <span class="string">"2048"</span>]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="在所有机器上安装kubeadm"><a href="#在所有机器上安装kubeadm" class="headerlink" title="在所有机器上安装kubeadm"></a>在所有机器上安装kubeadm</h4><p>参考之前的文章《centos7安装kubeadm》</p><h4 id="配置所有节点的kubelet"><a href="#配置所有节点的kubelet" class="headerlink" title="配置所有节点的kubelet"></a>配置所有节点的kubelet</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置kubelet使用国内可用镜像</span></span><br><span class="line"><span class="comment"># 修改/etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span></span><br><span class="line"><span class="comment"># 添加如下配置 </span></span><br><span class="line">Environment=<span class="string">"KUBELET_EXTRA_ARGS=--pod-infra-container-image=registry.cn-shanghai.aliyuncs.com/gcr-k8s/pause-amd64:3.0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用命令</span></span><br><span class="line">sed -i <span class="string">'/ExecStart=$/i Environment="KUBELET_EXTRA_ARGS=--pod-infra-container-image=registry.cn-shanghai.aliyuncs.com/gcr-k8s/pause-amd64:3.0"'</span>  /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新载入配置</span></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><h4 id="配置所有节点的hosts"><a href="#配置所有节点的hosts" class="headerlink" title="配置所有节点的hosts"></a>配置所有节点的hosts</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt;/etc/hosts&lt;&lt;EOF</span><br><span class="line">11.11.11.111 lab1</span><br><span class="line">11.11.11.112 lab2</span><br><span class="line">11.11.11.113 lab3</span><br><span class="line">11.11.11.114 lab4</span><br><span class="line">11.11.11.115 lab5</span><br><span class="line">11.11.11.116 lab6</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="启动etcd集群"><a href="#启动etcd集群" class="headerlink" title="启动etcd集群"></a>启动etcd集群</h4><p>在<code>lab1,lab2,lab3</code>节点上启动<code>etcd</code>集群</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lab1</span></span><br><span class="line">docker stop etcd &amp;&amp; docker rm etcd</span><br><span class="line">rm -rf /data/etcd</span><br><span class="line">mkdir -p /data/etcd</span><br><span class="line">docker run -d \</span><br><span class="line">--restart always \</span><br><span class="line">-v /etc/etcd/ssl/certs:/etc/ssl/certs \</span><br><span class="line">-v /data/etcd:/var/lib/etcd \</span><br><span class="line">-p 2380:2380 \</span><br><span class="line">-p 2379:2379 \</span><br><span class="line">--name etcd \</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/etcd-amd64:3.1.12 \</span><br><span class="line">etcd --name=etcd0 \</span><br><span class="line">--advertise-client-urls=http://11.11.11.111:2379 \</span><br><span class="line">--listen-client-urls=http://0.0.0.0:2379 \</span><br><span class="line">--initial-advertise-peer-urls=http://11.11.11.111:2380 \</span><br><span class="line">--listen-peer-urls=http://0.0.0.0:2380 \</span><br><span class="line">--initial-cluster-token=9477af68bbee1b9ae037d6fd9e7efefd \</span><br><span class="line">--initial-cluster=etcd0=http://11.11.11.111:2380,etcd1=http://11.11.11.112:2380,etcd2=http://11.11.11.113:2380 \</span><br><span class="line">--initial-cluster-state=new \</span><br><span class="line">--auto-tls \</span><br><span class="line">--peer-auto-tls \</span><br><span class="line">--data-dir=/var/lib/etcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># lab2</span></span><br><span class="line">docker stop etcd &amp;&amp; docker rm etcd</span><br><span class="line">rm -rf /data/etcd</span><br><span class="line">mkdir -p /data/etcd</span><br><span class="line">docker run -d \</span><br><span class="line">--restart always \</span><br><span class="line">-v /etc/etcd/ssl/certs:/etc/ssl/certs \</span><br><span class="line">-v /data/etcd:/var/lib/etcd \</span><br><span class="line">-p 2380:2380 \</span><br><span class="line">-p 2379:2379 \</span><br><span class="line">--name etcd \</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/etcd-amd64:3.1.12 \</span><br><span class="line">etcd --name=etcd1 \</span><br><span class="line">--advertise-client-urls=http://11.11.11.112:2379 \</span><br><span class="line">--listen-client-urls=http://0.0.0.0:2379 \</span><br><span class="line">--initial-advertise-peer-urls=http://11.11.11.112:2380 \</span><br><span class="line">--listen-peer-urls=http://0.0.0.0:2380 \</span><br><span class="line">--initial-cluster-token=9477af68bbee1b9ae037d6fd9e7efefd \</span><br><span class="line">--initial-cluster=etcd0=http://11.11.11.111:2380,etcd1=http://11.11.11.112:2380,etcd2=http://11.11.11.113:2380 \</span><br><span class="line">--initial-cluster-state=new \</span><br><span class="line">--auto-tls \</span><br><span class="line">--peer-auto-tls \</span><br><span class="line">--data-dir=/var/lib/etcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># lab3</span></span><br><span class="line">docker stop etcd &amp;&amp; docker rm etcd</span><br><span class="line">rm -rf /data/etcd</span><br><span class="line">mkdir -p /data/etcd</span><br><span class="line">docker run -d \</span><br><span class="line">--restart always \</span><br><span class="line">-v /etc/etcd/ssl/certs:/etc/ssl/certs \</span><br><span class="line">-v /data/etcd:/var/lib/etcd \</span><br><span class="line">-p 2380:2380 \</span><br><span class="line">-p 2379:2379 \</span><br><span class="line">--name etcd \</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/etcd-amd64:3.1.12 \</span><br><span class="line">etcd --name=etcd2 \</span><br><span class="line">--advertise-client-urls=http://11.11.11.113:2379 \</span><br><span class="line">--listen-client-urls=http://0.0.0.0:2379 \</span><br><span class="line">--initial-advertise-peer-urls=http://11.11.11.113:2380 \</span><br><span class="line">--listen-peer-urls=http://0.0.0.0:2380 \</span><br><span class="line">--initial-cluster-token=9477af68bbee1b9ae037d6fd9e7efefd \</span><br><span class="line">--initial-cluster=etcd0=http://11.11.11.111:2380,etcd1=http://11.11.11.112:2380,etcd2=http://11.11.11.113:2380 \</span><br><span class="line">--initial-cluster-state=new \</span><br><span class="line">--auto-tls \</span><br><span class="line">--peer-auto-tls \</span><br><span class="line">--data-dir=/var/lib/etcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证查看集群</span></span><br><span class="line">docker <span class="built_in">exec</span> -ti etcd ash</span><br><span class="line">etcdctl member list</span><br><span class="line">etcdctl cluster-health</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h4 id="在第一台master节点初始化"><a href="#在第一台master节点初始化" class="headerlink" title="在第一台master节点初始化"></a>在第一台master节点初始化</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成token</span></span><br><span class="line"><span class="comment"># 保留token后面还要使用</span></span><br><span class="line">token=$(kubeadm token generate)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$token</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line">cat &gt;kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha1</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.10.1</span><br><span class="line"><span class="comment">#imageRepository: registry.cn-shanghai.aliyuncs.com/gcr-k8s</span></span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line"></span><br><span class="line">api:</span><br><span class="line">  advertiseAddress: 11.11.11.111</span><br><span class="line"></span><br><span class="line">apiServerExtraArgs:</span><br><span class="line">  endpoint-reconciler-type: lease</span><br><span class="line"></span><br><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  node-monitor-grace-period: 10s</span><br><span class="line">  pod-eviction-timeout: 10s</span><br><span class="line"></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 192.168.0.0/16</span><br><span class="line"></span><br><span class="line">etcd:</span><br><span class="line">  endpoints:</span><br><span class="line">  - <span class="string">"http://11.11.11.111:2379"</span></span><br><span class="line">  - <span class="string">"http://11.11.11.112:2379"</span></span><br><span class="line">  - <span class="string">"http://11.11.11.113:2379"</span></span><br><span class="line"></span><br><span class="line">apiServerCertSANs:</span><br><span class="line">- <span class="string">"lab1"</span></span><br><span class="line">- <span class="string">"lab2"</span></span><br><span class="line">- <span class="string">"lab3"</span></span><br><span class="line">- <span class="string">"11.11.11.111"</span></span><br><span class="line">- <span class="string">"11.11.11.112"</span></span><br><span class="line">- <span class="string">"11.11.11.113"</span></span><br><span class="line">- <span class="string">"11.11.11.110"</span></span><br><span class="line">- <span class="string">"127.0.0.1"</span></span><br><span class="line"></span><br><span class="line">token: <span class="variable">$token</span></span><br><span class="line">tokenTTL: <span class="string">"0"</span></span><br><span class="line"></span><br><span class="line">featureGates:</span><br><span class="line">  CoreDNS: <span class="literal">true</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">kubeadm init --config kubeadm-master.config</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存初始化完成之后的join命令</span></span><br><span class="line"><span class="comment"># 如果丢失可以使用命令"kubeadm token list"获取</span></span><br><span class="line"><span class="comment"># kubeadm join 11.11.11.111:6443 --token nevmjk.iuh214fc8i0k3iue --discovery-token-ca-cert-hash sha256:0e4f738348be836ff810bce754e059054845f44f01619a37b817eba83282d80f</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置kubectl使用</span></span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装网络插件</span></span><br><span class="line"><span class="comment"># 下载配置</span></span><br><span class="line">mkdir flannel &amp;&amp; <span class="built_in">cd</span> flannel</span><br><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line"><span class="comment"># 此处的ip配置要与上面kubeadm的pod-network一致</span></span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"Network"</span>: <span class="string">"192.168.0.0/16"</span>,</span><br><span class="line">      <span class="string">"Backend"</span>: &#123;</span><br><span class="line">        <span class="string">"Type"</span>: <span class="string">"vxlan"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像</span></span><br><span class="line">image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果Node有多个网卡的话，参考flannel issues 39701，</span></span><br><span class="line"><span class="comment"># https://github.com/kubernetes/kubernetes/issues/39701</span></span><br><span class="line"><span class="comment"># 目前需要在kube-flannel.yml中使用--iface参数指定集群主机内网网卡的名称，</span></span><br><span class="line"><span class="comment"># 否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，</span></span><br><span class="line"><span class="comment"># flanneld启动参数加上--iface=&lt;iface-name&gt;</span></span><br><span class="line">    containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        - --iface=eth1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置master允许部署应用pod，参与工作负载，现在可以部署其他系统组件</span></span><br><span class="line"><span class="comment"># 如 dashboard, heapster, efk等</span></span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure><h4 id="启动其他master节点"><a href="#启动其他master节点" class="headerlink" title="启动其他master节点"></a>启动其他master节点</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包第一台master初始化之后的/etc/kubernetes/pki目录</span></span><br><span class="line"><span class="built_in">cd</span> /etc/kubernetes &amp;&amp; tar czvf /root/pki.tgz pki/ &amp;&amp; <span class="built_in">cd</span> ~</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传到其他master的/etc/kubernetes目录下</span></span><br><span class="line">tar xf pki.tgz -C /etc/kubernetes/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除pki目录下的apiserver.crt 和 apiserver.key文件</span></span><br><span class="line">rm -rf /etc/kubernetes/pki/&#123;apiserver.crt,apiserver.key&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line"><span class="comment"># 使用和之前master一样的配置文件</span></span><br><span class="line"><span class="comment"># token保持一致</span></span><br><span class="line">cat &gt;kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha1</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.10.1</span><br><span class="line"><span class="comment">#imageRepository: registry.cn-shanghai.aliyuncs.com/gcr-k8s</span></span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意修改IP</span></span><br><span class="line">api:</span><br><span class="line">  advertiseAddress: 11.11.11.112</span><br><span class="line"></span><br><span class="line">apiServerExtraArgs:</span><br><span class="line">  endpoint-reconciler-type: lease</span><br><span class="line"></span><br><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  node-monitor-grace-period: 10s</span><br><span class="line">  pod-eviction-timeout: 10s</span><br><span class="line"></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 192.168.0.0/16</span><br><span class="line"></span><br><span class="line">etcd:</span><br><span class="line">  endpoints:</span><br><span class="line">  - <span class="string">"http://11.11.11.111:2379"</span></span><br><span class="line">  - <span class="string">"http://11.11.11.112:2379"</span></span><br><span class="line">  - <span class="string">"http://11.11.11.113:2379"</span></span><br><span class="line"></span><br><span class="line">apiServerCertSANs:</span><br><span class="line">- lab1</span><br><span class="line">- lab2</span><br><span class="line">- lab3</span><br><span class="line">- <span class="string">"11.11.11.111"</span></span><br><span class="line">- <span class="string">"11.11.11.112"</span></span><br><span class="line">- <span class="string">"11.11.11.113"</span></span><br><span class="line">- <span class="string">"11.11.11.110"</span></span><br><span class="line">- <span class="string">"127.0.0.1"</span></span><br><span class="line"></span><br><span class="line">token: nevmjk.iuh214fc8i0k3iue</span><br><span class="line">tokenTTL: <span class="string">"0"</span></span><br><span class="line"></span><br><span class="line">featureGates:</span><br><span class="line">  CoreDNS: <span class="literal">true</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">kubeadm init --config kubeadm-master.config</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab1</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab2</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab3</span><br><span class="line">kubectl get nodes -o wide</span><br></pre></td></tr></table></figure><h4 id="配置haproxy代理和keepalived"><a href="#配置haproxy代理和keepalived" class="headerlink" title="配置haproxy代理和keepalived"></a>配置haproxy代理和keepalived</h4><p>在<code>lab1,lab2,lab3</code>节点上启动<code>haproxy</code>和<code>keepalived</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取haproxy镜像</span></span><br><span class="line">docker pull haproxy:1.7.8-alpine</span><br><span class="line">mkdir /etc/haproxy</span><br><span class="line">cat &gt;/etc/haproxy/haproxy.cfg&lt;&lt;EOF</span><br><span class="line">global</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 err</span><br><span class="line">  maxconn 50000</span><br><span class="line">  uid 99</span><br><span class="line">  gid 99</span><br><span class="line">  <span class="comment">#daemon</span></span><br><span class="line">  nbproc 1</span><br><span class="line">  pidfile haproxy.pid</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 err</span><br><span class="line">  maxconn 50000</span><br><span class="line">  retries 3</span><br><span class="line">  timeout connect 5s</span><br><span class="line">  timeout client 30s</span><br><span class="line">  timeout server 30s</span><br><span class="line">  timeout check 2s</span><br><span class="line"></span><br><span class="line">listen admin_stats</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:1080</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 err</span><br><span class="line">  stats refresh 30s</span><br><span class="line">  stats uri     /haproxy-status</span><br><span class="line">  stats realm   Haproxy\ Statistics</span><br><span class="line">  stats auth    will:will</span><br><span class="line">  stats hide-version</span><br><span class="line">  stats admin <span class="keyword">if</span> TRUE</span><br><span class="line"></span><br><span class="line">frontend k8s-https</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:8443</span><br><span class="line">  mode tcp</span><br><span class="line">  <span class="comment">#maxconn 50000</span></span><br><span class="line">  default_backend k8s-https</span><br><span class="line"></span><br><span class="line">backend k8s-https</span><br><span class="line">  mode tcp</span><br><span class="line">  balance roundrobin</span><br><span class="line">  server lab1 11.11.11.111:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">  server lab2 11.11.11.112:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">  server lab3 11.11.11.113:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动haproxy</span></span><br><span class="line">docker run -d --name my-haproxy \</span><br><span class="line">-v /etc/haproxy:/usr/<span class="built_in">local</span>/etc/haproxy:ro \</span><br><span class="line">-p 8443:8443 \</span><br><span class="line">-p 1080:1080 \</span><br><span class="line">--restart always \</span><br><span class="line">haproxy:1.7.8-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">docker logs my-haproxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器查看状态</span></span><br><span class="line">http://11.11.11.111:1080/haproxy-status</span><br><span class="line">http://11.11.11.112:1080/haproxy-status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取keepalived镜像</span></span><br><span class="line">docker pull osixia/keepalived:1.4.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="comment"># 载入内核相关模块</span></span><br><span class="line">lsmod | grep ip_vs</span><br><span class="line">modprobe ip_vs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动keepalived</span></span><br><span class="line"><span class="comment"># eth1为本次实验11.11.11.0/24网段的所在网卡</span></span><br><span class="line">docker run --net=host --<span class="built_in">cap</span>-add=NET_ADMIN \</span><br><span class="line">-e KEEPALIVED_INTERFACE=eth1 \</span><br><span class="line">-e KEEPALIVED_VIRTUAL_IPS=<span class="string">"#PYTHON2BASH:['11.11.11.110']"</span> \</span><br><span class="line">-e KEEPALIVED_UNICAST_PEERS=<span class="string">"#PYTHON2BASH:['11.11.11.111','11.11.11.112','11.11.11.113']"</span> \</span><br><span class="line">-e KEEPALIVED_PASSWORD=hello \</span><br><span class="line">--name k8s-keepalived \</span><br><span class="line">--restart always \</span><br><span class="line">-d osixia/keepalived:1.4.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line"><span class="comment"># 会看到两个成为backup 一个成为master</span></span><br><span class="line">docker logs k8s-keepalived</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时会配置 11.11.11.110 到其中一台机器</span></span><br><span class="line"><span class="comment"># ping测试</span></span><br><span class="line">ping -c4 11.11.11.110</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果失败后清理后，重新实验</span></span><br><span class="line">docker rm -f k8s-keepalived</span><br><span class="line">ip a del 11.11.11.110/32 dev eth1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改~/.kube/config文件里ip和端口，然后使用kubectl测试</span></span><br><span class="line">rm -rf .kube/cache .kube/http-cache</span><br><span class="line">kubectl get pods -n kube-system -o wide</span><br></pre></td></tr></table></figure><h4 id="修改master节点相关组件配置指向vip"><a href="#修改master节点相关组件配置指向vip" class="headerlink" title="修改master节点相关组件配置指向vip"></a>修改master节点相关组件配置指向vip</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lab1 lab2 lab3</span></span><br><span class="line">sed -i <span class="string">'s@server: https://11.11.11.*:6443@server: https://11.11.11.110:8443@g'</span> /etc/kubernetes/&#123;admin.conf,kubelet.conf,scheduler.conf,controller-manager.conf&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启kubelet</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有节点状态</span></span><br><span class="line">kubectl get nodes -o wide</span><br></pre></td></tr></table></figure><h4 id="修改kube-proxy的配置"><a href="#修改kube-proxy的配置" class="headerlink" title="修改kube-proxy的配置"></a>修改kube-proxy的配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改kube-proxy的配置指定vip</span></span><br><span class="line"><span class="comment"># 执行命令之后修改为 server: https://11.11.11.110:8443</span></span><br><span class="line">kubectl edit -n kube-system configmap/kube-proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看设置</span></span><br><span class="line">kubectl get -n kube-system configmap/kube-proxy -o yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除重建kube-proxy</span></span><br><span class="line">kubectl get pods --all-namespaces -o wide | grep proxy</span><br><span class="line">all_proxy_pods=$(kubectl get pods --all-namespaces -o wide | grep proxy | awk <span class="string">'&#123;print $2&#125;'</span> | xargs)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$all_proxy_pods</span></span><br><span class="line">kubectl delete pods <span class="variable">$all_proxy_pods</span> -n kube-system</span><br><span class="line">kubectl get pods --all-namespaces -o wide | grep proxy</span><br></pre></td></tr></table></figure><h4 id="启动node节点"><a href="#启动node节点" class="headerlink" title="启动node节点"></a>启动node节点</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加入master节点</span></span><br><span class="line"><span class="comment"># 这个命令是之前初始化master完成时，输出的命令</span></span><br><span class="line">kubeadm join 11.11.11.110:8443 --token nevmjk.iuh214fc8i0k3iue --discovery-token-ca-cert-hash sha256:0e4f738348be836ff810bce754e059054845f44f01619a37b817eba83282d80f</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure><h4 id="修改node节点kubelet配置并重启"><a href="#修改node节点kubelet配置并重启" class="headerlink" title="修改node节点kubelet配置并重启"></a>修改node节点kubelet配置并重启</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line">sed -i <span class="string">'s@server: https://11.11.11.*:6443@server: https://11.11.11.110:8443@g'</span> /etc/kubernetes/kubelet.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启kubelet</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart kubelet docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有节点状态</span></span><br><span class="line">kubectl get nodes -o wide</span><br></pre></td></tr></table></figure><p><strong>禁止master节点发布应用</strong></p><blockquote><p>设置master不接受负载<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置</span></span><br><span class="line"><span class="comment"># kubectl patch node lab1 -p '&#123;"spec":&#123;"unschedulable":true&#125;&#125;'</span></span><br><span class="line">kubectl taint nodes lab1 lab2 lab3 node-role.kubernetes.io/master=<span class="literal">true</span>:NoSchedule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="重建多个coredns副本"><a href="#重建多个coredns副本" class="headerlink" title="重建多个coredns副本"></a>重建多个coredns副本</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除coredns的pods</span></span><br><span class="line">kubectl get pods -n kube-system -o wide | grep coredns</span><br><span class="line">all_coredns_pods=$(kubectl get pods -n kube-system -o wide | grep coredns | awk <span class="string">'&#123;print $1&#125;'</span> | xargs)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$all_coredns_pods</span></span><br><span class="line">kubectl delete pods <span class="variable">$all_coredns_pods</span> -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改副本数</span></span><br><span class="line"><span class="comment"># replicas: 3</span></span><br><span class="line"><span class="comment"># 可以修改为node节点的个数</span></span><br><span class="line">kubectl edit deploy coredns -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">kubectl get pods -n kube-system -o wide | grep coredns</span><br></pre></td></tr></table></figure><h4 id="基础测试"><a href="#基础测试" class="headerlink" title="基础测试"></a>基础测试</h4><p><strong>1. 启动</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接使用命令测试</span></span><br><span class="line">kubectl run nginx --replicas=2 --image=nginx:alpine --port=80</span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --name=example-service-nodeport</span><br><span class="line">kubectl expose deployment nginx --name=example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用配置文件测试</span></span><br><span class="line">cat &gt;example-nginx.yml&lt;&lt;EOF</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:alpine</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /</span><br><span class="line">            port: 80</span><br><span class="line">          initialDelaySeconds: 10</span><br><span class="line">          periodSeconds: 3</span><br><span class="line">        readinessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /</span><br><span class="line">            port: 80</span><br><span class="line">          initialDelaySeconds: 10</span><br><span class="line">          periodSeconds: 3</span><br><span class="line">---</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: example-service</span><br><span class="line">spec:</span><br><span class="line">    selector:</span><br><span class="line">      app: nginx</span><br><span class="line">    ports:</span><br><span class="line">      - name: http</span><br><span class="line">        port: 80</span><br><span class="line">        targetPort: 80</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: example-service-nodeport</span><br><span class="line">spec:</span><br><span class="line">    selector:</span><br><span class="line">      app: nginx</span><br><span class="line">    <span class="built_in">type</span>: NodePort</span><br><span class="line">    ports:</span><br><span class="line">      - name: http-nodeport</span><br><span class="line">        port: 80</span><br><span class="line">        nodePort: 32223</span><br><span class="line">EOF</span><br><span class="line">kubectl apply -f example-nginx.yml</span><br></pre></td></tr></table></figure></p><p><strong>2. 查看状态</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deploy</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line">kubectl describe svc example-service</span><br></pre></td></tr></table></figure></p><p><strong>3. DNS解析</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kubectl run curl --image=radial/busyboxplus:curl -i --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果时间过长会返回错误，可以使用如下方式再进入测试</span></span><br><span class="line">curlPod=$(kubectl get pod | grep curl | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">kubectl <span class="built_in">exec</span> -ti <span class="variable">$curlPod</span> -- sh</span><br></pre></td></tr></table></figure></p><p><strong>4. 访问测试</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10.96.59.56 为查看svc时获取到的clusterip</span></span><br><span class="line">curl <span class="string">"10.96.59.56:80"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 32223 为查看svc时获取到的 nodeport</span></span><br><span class="line">http://11.11.11.114:32223/</span><br><span class="line">http://11.11.11.115:32223/</span><br></pre></td></tr></table></figure></p><p><strong>3. 清理删除</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete svc example-service example-service-nodeport</span><br><span class="line">kubectl delete deploy nginx curl</span><br></pre></td></tr></table></figure></p><h4 id="高可用测试"><a href="#高可用测试" class="headerlink" title="高可用测试"></a>高可用测试</h4><p>关闭<code>master</code>节点测试集群是能否正常执行上一步的<code>基础测试</code>，查看相关信息，不能同时关闭<code>lab1</code>和<code>lab2</code>，因为上面有<code>haproxy</code>和<code>keepalived</code>服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod --all-namespaces -o wide</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab1</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab2</span><br><span class="line">kubectl get pod --all-namespaces -o wide | grep lab3</span><br><span class="line">kubectl get nodes -o wide</span><br><span class="line">kubectl get deploy</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line">kubectl describe svc example-service</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p>当直接把<code>node</code>节点关闭时，只有过了<code>5分钟</code>之后，上面的pod才会被检测到有问题，并迁移到其他节点</p><blockquote><p>如果想快速迁移可以执行 <code>kubectl delete node</code></p><p>也可以修改<code>controller-manager的</code>的<code>pod-eviction-timeout</code>参数，默认5m</p><p><code>node-monitor-grace-period</code>参数，默认40s</p></blockquote></li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://kubernetes.io/docs/admin/high-availability/" target="_blank" rel="noopener">https://kubernetes.io/docs/admin/high-availability/</a></li><li><a href="https://www.kubernetes.org.cn/3536.html" target="_blank" rel="noopener">https://www.kubernetes.org.cn/3536.html</a></li><li><a href="https://github.com/indiketa/kubeadm-ha" target="_blank" rel="noopener">https://github.com/indiketa/kubeadm-ha</a></li><li><a href="https://zhuanlan.zhihu.com/p/34740013" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/34740013</a></li><li><a href="https://github.com/cookeem/kubeadm-ha/blob/master/README_CN.md" target="_blank" rel="noopener">https://github.com/cookeem/kubeadm-ha/blob/master/README_CN.md</a></li><li><a href="https://blog.frognew.com/2017/04/install-etcd-cluster.html" target="_blank" rel="noopener">https://blog.frognew.com/2017/04/install-etcd-cluster.html</a></li><li><a href="https://blog.frognew.com/2017/04/install-ha-kubernetes-1.6-cluster.html" target="_blank" rel="noopener">https://blog.frognew.com/2017/04/install-ha-kubernetes-1.6-cluster.html</a></li><li><a href="https://medium.com/@bambash/ha-kubernetes-cluster-via-kubeadm-b2133360b198" target="_blank" rel="noopener">https://medium.com/@bambash/ha-kubernetes-cluster-via-kubeadm-b2133360b198</a></li><li><a href="https://github.com/kubernetes/kubeadm/issues/546" target="_blank" rel="noopener">https://github.com/kubernetes/kubeadm/issues/546</a></li><li><a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/#config-file" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/#config-file</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7使用kubeadm安装k8s集群</title>
      <link href="/posts/16/"/>
      <url>/posts/16/</url>
      
        <content type="html"><![CDATA[<h3 id="实验环境说明"><a href="#实验环境说明" class="headerlink" title="实验环境说明"></a>实验环境说明</h3><h4 id="实验架构"><a href="#实验架构" class="headerlink" title="实验架构"></a>实验架构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lab1: master 11.11.11.111</span><br><span class="line">lab2: node 11.11.11.112</span><br><span class="line">lab3: node 11.11.11.113</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="实验使用的Vagrantfile"><a href="#实验使用的Vagrantfile" class="headerlink" title="实验使用的Vagrantfile"></a>实验使用的<code>Vagrantfile</code></h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- mode: ruby -*-</span></span><br><span class="line"><span class="comment"># vi: set ft=ruby :</span></span><br><span class="line"></span><br><span class="line">ENV[<span class="string">"LC_ALL"</span>] = <span class="string">"en_US.UTF-8"</span></span><br><span class="line"></span><br><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">    (<span class="number">1</span>..<span class="number">3</span>).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">      config.vm.define <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span> <span class="keyword">do</span> <span class="params">|node|</span></span><br><span class="line">        node.vm.box = <span class="string">"centos-7.4-docker-17"</span></span><br><span class="line">        node.ssh.insert_key = <span class="literal">false</span></span><br><span class="line">        node.vm.hostname = <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.network <span class="string">"private_network"</span>, <span class="symbol">ip:</span> <span class="string">"11.11.11.11<span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provision <span class="string">"shell"</span>,</span><br><span class="line">          <span class="symbol">inline:</span> <span class="string">"echo hello from node <span class="subst">#&#123;i&#125;</span>"</span></span><br><span class="line">        node.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> <span class="params">|v|</span></span><br><span class="line">          v.cpus = <span class="number">2</span></span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, <span class="symbol">:id</span>, <span class="string">"--name"</span>, <span class="string">"lab<span class="subst">#&#123;i&#125;</span>"</span>, <span class="string">"--memory"</span>, <span class="string">"2048"</span>]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h4><ul><li>需要在每个节点上先安装好kubeadm</li><li>有每个节点配置好hosts解析 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt;/etc/hosts&lt;&lt;EOF</span><br><span class="line">11.11.11.111 lab1</span><br><span class="line">11.11.11.112 lab2</span><br><span class="line">11.11.11.113 lab3</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装配置master节点"><a href="#安装配置master节点" class="headerlink" title="安装配置master节点"></a>安装配置master节点</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><blockquote><p>由于kubeadm默认会去拉取gcr.io上的镜像来启动master相关的组件，由于在国内无法访问gcr.io所以会导致无法成功启动。有如下几种解决办法：</p><ul><li>在能翻墙的机器上拉取镜像，再打包导入到master机器上（docker save/load）</li><li>直接拉国内别人的镜像，然后打tag为gcr.io的镜像</li><li>启动配置集群的时候指定镜像相关配置，使用阿里镜像（本次实验采用）</li></ul></blockquote><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;kubeadm-master.config&lt;&lt;EOF</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1alpha1</span><br><span class="line">kind: MasterConfiguration</span><br><span class="line">kubernetesVersion: v1.10.7</span><br><span class="line">imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line">etcd:</span><br><span class="line">  image: registry.cn-hangzhou.aliyuncs.com/google_containers/etcd-amd64:3.1.12</span><br><span class="line">api:</span><br><span class="line">  advertiseAddress: 11.11.11.111</span><br><span class="line"></span><br><span class="line">controllerManagerExtraArgs:</span><br><span class="line">  node-monitor-grace-period: 10s</span><br><span class="line">  pod-eviction-timeout: 10s</span><br><span class="line"></span><br><span class="line">networking:</span><br><span class="line">  podSubnet: 10.244.0.0/16</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置kubelet使用国内可用pause镜像</span></span><br><span class="line"><span class="comment"># 修改/etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span></span><br><span class="line"><span class="comment"># 添加如下配置</span></span><br><span class="line">sed -i <span class="string">'/ExecStart=$/i Environment="KUBELET_EXTRA_ARGS=--pod-infra-container-image=registry.cn-shanghai.aliyuncs.com/gcr-k8s/pause-amd64:3.0"'</span>  /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新载入配置</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置kubelet开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用配置文件方式</span></span><br><span class="line">kubeadm init --config kubeadm-master.config</span><br></pre></td></tr></table></figure><blockquote><p>没有经过测试的另一种初始化方法<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用命令行方式</span></span><br><span class="line">KUBE_REPO_PREFIX=<span class="string">'registry.cn-hangzhou.aliyuncs.com/google_containers'</span> kubeadm init \</span><br><span class="line">--kubernetes-version=v1.10.3 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16 \</span><br><span class="line">--apiserver-advertise-address=11.11.11.111</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="配置kubectl使用"><a href="#配置kubectl使用" class="headerlink" title="配置kubectl使用"></a>配置kubectl使用</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rm -rf <span class="variable">$HOME</span>/.kube</span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看node节点</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有网络插件也安装配置完成之后，才能会显示为ready状态</span></span><br><span class="line"><span class="comment"># 设置master允许部署应用pod，参与工作负载，现在可以部署其他系统组件</span></span><br><span class="line"><span class="comment"># 如 dashboard, heapster, efk等</span></span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure><h3 id="配置使用网络插件"><a href="#配置使用网络插件" class="headerlink" title="配置使用网络插件"></a>配置使用网络插件</h3><p>配置使用<code>flannel</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载配置</span></span><br><span class="line">mkdir flannel &amp;&amp; <span class="built_in">cd</span> flannel</span><br><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line"><span class="comment"># 此处的ip配置要与上面kubeadm的pod-network一致</span></span><br><span class="line">  net-conf.json: |</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"Network"</span>: <span class="string">"10.244.0.0/16"</span>,</span><br><span class="line">      <span class="string">"Backend"</span>: &#123;</span><br><span class="line">        <span class="string">"Type"</span>: <span class="string">"vxlan"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像</span></span><br><span class="line">image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果Node有多个网卡的话，参考flannel issues 39701，</span></span><br><span class="line"><span class="comment"># https://github.com/kubernetes/kubernetes/issues/39701</span></span><br><span class="line"><span class="comment"># 目前需要在kube-flannel.yml中使用--iface参数指定集群主机内网网卡的名称，</span></span><br><span class="line"><span class="comment"># 否则可能会出现dns无法解析。容器无法通信的情况，需要将kube-flannel.yml下载到本地，</span></span><br><span class="line"><span class="comment"># flanneld启动参数加上--iface=&lt;iface-name&gt;</span></span><br><span class="line">    containers:</span><br><span class="line">      - name: kube-flannel</span><br><span class="line">        image: registry.cn-shanghai.aliyuncs.com/gcr-k8s/flannel:v0.10.0-amd64</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - /opt/bin/flanneld</span><br><span class="line">        args:</span><br><span class="line">        - --ip-masq</span><br><span class="line">        - --kube-subnet-mgr</span><br><span class="line">        - --iface=eth1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods --namespace kube-system</span><br><span class="line">kubectl get svc --namespace kube-system</span><br></pre></td></tr></table></figure><h3 id="安装配置node节点"><a href="#安装配置node节点" class="headerlink" title="安装配置node节点"></a>安装配置node节点</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置kubelet使用国内可用pause镜像</span></span><br><span class="line"><span class="comment"># 修改/etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span></span><br><span class="line"><span class="comment"># 添加如下配置</span></span><br><span class="line">sed -i <span class="string">'/ExecStart=$/i Environment="KUBELET_EXTRA_ARGS=--pod-infra-container-image=registry.cn-shanghai.aliyuncs.com/gcr-k8s/pause-amd64:3.0"'</span>  /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新载入配置</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置kubelet开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure><h4 id="加入集群"><a href="#加入集群" class="headerlink" title="加入集群"></a>加入集群</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此命令为启动master成功后返回的结果</span></span><br><span class="line">kubeadm join --token 55a6f8.1091208463fe1252 11.11.11.111:6443 --discovery-token-ca-cert-hash sha256:790c6b38b087b167c1f52c04526d8729115192a305eb91c01c0fd8dc7facbbcd</span><br></pre></td></tr></table></figure><h3 id="测试容器间的通信和DNS"><a href="#测试容器间的通信和DNS" class="headerlink" title="测试容器间的通信和DNS"></a>测试容器间的通信和DNS</h3><blockquote><p>配置好calico网络之后，kubeadm会自动部署kube-dns</p></blockquote><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl run nginx --replicas=2 --image=nginx:alpine --port=80</span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --name=example-service-nodeport</span><br><span class="line">kubectl expose deployment nginx --name=example-service</span><br></pre></td></tr></table></figure><h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deploy</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get svc</span><br><span class="line">kubectl describe svc example-service</span><br></pre></td></tr></table></figure><h4 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl run curl --image=radial/busyboxplus:curl -i --tty</span><br><span class="line">nslookup kubernetes</span><br><span class="line">nslookup example-service</span><br><span class="line">curl example-service</span><br></pre></td></tr></table></figure><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10.96.59.56 为查看svc时获取到的clusterip</span></span><br><span class="line">curl <span class="string">"10.96.59.56:80"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 32223 为查看svc时获取到的 nodeport</span></span><br><span class="line">http://11.11.11.112:32223/</span><br><span class="line">http://11.11.11.113:32223/</span><br></pre></td></tr></table></figure><h4 id="清理删除"><a href="#清理删除" class="headerlink" title="清理删除"></a>清理删除</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete svc example-service example-service-nodeport</span><br><span class="line">kubectl delete deploy nginx curl</span><br></pre></td></tr></table></figure><h3 id="挖坑记"><a href="#挖坑记" class="headerlink" title="挖坑记"></a>挖坑记</h3><p><strong>1. 如果删除kube-dns后怎么修复</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种方法</span></span><br><span class="line">kubeadm upgrade apply v1.10.3 --config kubeadm-master.config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方法</span></span><br><span class="line">kubeadm config upload from-file --config kubeadm-master.config</span><br><span class="line">kubeadm upgrade apply v1.10.3</span><br></pre></td></tr></table></figure></p><p><strong>2. 忘记初始master节点时的node节点加入集群命令怎么办</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单方法</span></span><br><span class="line">kubeadm token create --<span class="built_in">print</span>-join-command</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种方法</span></span><br><span class="line">token=$(kubeadm token generate)</span><br><span class="line">kubeadm token create <span class="variable">$token</span> --<span class="built_in">print</span>-join-command --ttl=0</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/</a></li><li><a href="https://blog.frognew.com/2017/12/kubeadm-install-kubernetes-1.9.html" target="_blank" rel="noopener">https://blog.frognew.com/2017/12/kubeadm-install-kubernetes-1.9.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装kubeadm</title>
      <link href="/posts/15/"/>
      <url>/posts/15/</url>
      
        <content type="html"><![CDATA[<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><h3 id="安装配置docker"><a href="#安装配置docker" class="headerlink" title="安装配置docker"></a>安装配置docker</h3><blockquote><p>v1.9.0版本推荐使用docker v1.12,<br>v1.11, v1.13, 17.03也可以使用，再高版本的docker可能无法正常使用。<br>测试发现17.09无法正常使用，不能使用资源限制(内存CPU)</p></blockquote><a id="more"></a><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载安装指定版本docker-ce</span></span><br><span class="line">yum remove -y docker-ce docker-ce-selinux container-selinux</span><br><span class="line">yum install -y --<span class="built_in">setopt</span>=obsoletes=0 \</span><br><span class="line">docker-ce-17.03.1.ce-1.el7.centos \</span><br><span class="line">docker-ce-selinux-17.03.1.ce-1.el7.centos</span><br></pre></td></tr></table></figure><h4 id="修改docker配置使用systemd"><a href="#修改docker配置使用systemd" class="headerlink" title="修改docker配置使用systemd"></a>修改docker配置使用systemd</h4><blockquote><p>在/etc/docker/daemon.json文件添加如下配置<br>centos7安装的docker12不能添加此参数，否则会无法启动<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果使用了加速器配置格式如下</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://tfhzn46h.mirror.aliyuncs.com"</span>],</span><br><span class="line">  <span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="安装-kubeadm-kubelet-和-kubectl"><a href="#安装-kubeadm-kubelet-和-kubectl" class="headerlink" title="安装 kubeadm, kubelet 和 kubectl"></a>安装 kubeadm, kubelet 和 kubectl</h3><p>如下的安装方法，选择其中一个即可。</p><h4 id="翻墙安装"><a href="#翻墙安装" class="headerlink" title="翻墙安装"></a>翻墙安装</h4><blockquote><p>需要翻墙才能正常安装，如果不能翻墙，可以使用阿里云或其他云提供的容器海外构建功能，下载好包。<br>启动容器，之后从容器中把文件获取出来安装即可。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yum install -y ebtables socat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在能翻墙的机器上下载rpm包</span></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line">yum install -y yum-utils</span><br><span class="line">k8s_version=$(yum info kubelet | grep Version | awk -F <span class="string">':'</span> <span class="string">'&#123;print $2&#125;'</span> | tr -d <span class="string">' '</span>)</span><br><span class="line">mkdir k8s-<span class="variable">$k8s_version</span> &amp;&amp; <span class="built_in">cd</span> k8s-<span class="variable">$k8s_version</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载最新版本</span></span><br><span class="line">yumdownloader kubelet kubeadm kubectl kubernetes-cni</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载指定版本</span></span><br><span class="line">yumdownloader kubelet-1.10.7 kubeadm-1.10.7 kubectl-1.10.7 kubernetes-cni</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包下载到要安装的机器上</span></span><br><span class="line"><span class="built_in">cd</span> .. &amp;&amp; tar cvzf k8s-<span class="variable">$&#123;k8s_version&#125;</span>.tgz k8s-<span class="variable">$k8s_version</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">tar xf k8s-*.tgz &amp;&amp; <span class="built_in">cd</span> k8s-* &amp;&amp; yum localinstall -y *.rpm</span><br></pre></td></tr></table></figure><h4 id="使用阿里镜像安装"><a href="#使用阿里镜像安装" class="headerlink" title="使用阿里镜像安装"></a>使用阿里镜像安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置源</span></span><br><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新版本</span></span><br><span class="line">yum install -y kubelet kubeadm kubectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">yum install -y kubelet-1.10.7 kubeadm-1.10.7 kubectl-1.10.7</span><br></pre></td></tr></table></figure><h4 id="二进制安装方法（不推荐）"><a href="#二进制安装方法（不推荐）" class="headerlink" title="二进制安装方法（不推荐）"></a>二进制安装方法（不推荐）</h4><p>此需要自己安装<code>kubernetes-cni</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载安装</span></span><br><span class="line">version=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)</span><br><span class="line">wget https://storage.googleapis.com/kubernetes-release/release/<span class="variable">$version</span>/bin/linux/amd64/kubectl</span><br><span class="line">wget https://storage.googleapis.com/kubernetes-release/release/<span class="variable">$version</span>/bin/linux/amd64/kubeadm</span><br><span class="line">wget https://storage.googleapis.com/kubernetes-release/release/<span class="variable">$version</span>/bin/linux/amd64/kubelet</span><br><span class="line">chmod +x kubectl kubeadm kubelet</span><br><span class="line">mv kubectl kubeadm kubelet /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure><blockquote><p>实验所用<code>kubeadm</code>相关文件已经上传到了百度网盘<br>链接：<a href="https://pan.baidu.com/s/1pl7YYUYZsPd98J0DhNLWEQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1pl7YYUYZsPd98J0DhNLWEQ</a> 密码：40na</p></blockquote><h3 id="配置系统相关参数"><a href="#配置系统相关参数" class="headerlink" title="配置系统相关参数"></a>配置系统相关参数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时禁用selinux</span></span><br><span class="line"><span class="comment"># 永久关闭 修改/etc/sysconfig/selinux文件设置</span></span><br><span class="line">sed -i <span class="string">'s/SELINUX=permissive/SELINUX=disabled/'</span> /etc/sysconfig/selinux</span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时关闭swap</span></span><br><span class="line"><span class="comment"># 永久关闭 注释/etc/fstab文件里swap相关的行</span></span><br><span class="line">swapoff -a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启forward</span></span><br><span class="line"><span class="comment"># Docker从1.13版本开始调整了默认的防火墙规则</span></span><br><span class="line"><span class="comment"># 禁用了iptables filter表中FOWARD链</span></span><br><span class="line"><span class="comment"># 这样会引起Kubernetes集群中跨Node的Pod无法通信</span></span><br><span class="line"></span><br><span class="line">iptables -P FORWARD ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置转发相关参数，否则可能会出错</span></span><br><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">vm.swappiness=0</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://kubernetes.io/docs/setup/independent/install-kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/independent/install-kubeadm/</a></li><li><a href="https://blog.frognew.com/2017/12/kubeadm-install-kubernetes-1.9.html" target="_blank" rel="noopener">https://blog.frognew.com/2017/12/kubeadm-install-kubernetes-1.9.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装终端记录回放器asciinema</title>
      <link href="/posts/14/"/>
      <url>/posts/14/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>终端记录器，可以记录你在终端的任务操作，然后回放。<br>官方示例网站<code>https://asciinema.org/</code></p><p><a href="https://asciinema.org/a/14" target="_blank" rel="noopener"><img src="https://asciinema.org/a/14.png" alt="asciicast"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y asciinema</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p><strong>1.简单记录并传到asciinema.org</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单</span></span><br><span class="line">asciinema rec</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定标题</span></span><br><span class="line">asciinema rec -t <span class="string">"My git tutorial"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录保存到本地 </span></span><br><span class="line">asciinema rec demo.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定最多等待间隔2.5s</span></span><br><span class="line">asciinema rec -w 2.5 demo.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重放操作</span></span><br><span class="line">asciinema play demo.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重放asciinema.org上的操作</span></span><br><span class="line">asciinema play https://asciinema.org/a/difqlgx86ym6emrmd8u62yqu8</span><br></pre></td></tr></table></figure></p><h3 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.config/asciinema/config</span><br><span class="line">[api]</span><br><span class="line">url = http://asciinema.example.com</span><br></pre></td></tr></table></figure><h3 id="安装配置自己的asciinema-server"><a href="#安装配置自己的asciinema-server" class="headerlink" title="安装配置自己的asciinema-server"></a>安装配置自己的<code>asciinema-server</code></h3><blockquote><p>安装之前先安装docker-ce， 测试发现docker-12版本不能正常使用</p></blockquote><p><strong>1. 安装配置</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/asciinema/asciinema-server.git</span><br><span class="line"><span class="built_in">cd</span> asciinema-server</span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">cp .env.production.sample .env.production</span><br><span class="line">vim .env.production</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置url相关</span></span><br><span class="line">URL_SCHEME=http</span><br><span class="line">URL_HOST=asciinema.example.com</span><br><span class="line">URL_PORT=80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置密钥</span></span><br><span class="line">secret=$(docker-compose run --rm web mix phx.gen.secret)</span><br><span class="line">SECRET_KEY_BASE=<span class="variable">$secret</span></span><br></pre></td></tr></table></figure></p><p><strong>2. 初始化</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d postgres</span><br><span class="line">docker-compose run --rm web setup</span><br></pre></td></tr></table></figure></p><p><strong>3. 启动</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line">docker ps -f <span class="string">'name=asciinema_'</span></span><br></pre></td></tr></table></figure></p><p><strong>4. 浏览器访问测试</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置hosts</span></span><br><span class="line">11.11.11.111 asciinema.example.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器访问</span></span><br><span class="line">http://asciinema.example.com/</span><br></pre></td></tr></table></figure></p><p><strong>5. 配置客户端</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置host</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'11.11.11.111 asciinema.example.com'</span> &gt;&gt; /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># ~/.config/asciinema/config</span></span><br><span class="line">[api]</span><br><span class="line">url = http://asciinema.example.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用环境变量</span></span><br><span class="line">ASCIINEMA_API_URL=http://asciinema.example.com asciinema rec</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意</span></span><br><span class="line"><span class="comment"># 如果没有token配置项会无法上传，可以先直接执行asciinema rec生成配置文件后</span></span><br><span class="line"><span class="comment"># 再添加url的配置项</span></span><br></pre></td></tr></table></figure></p><p><strong>6. 测试使用</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asciinema rec</span><br></pre></td></tr></table></figure></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://github.com/asciinema/asciinema/blob/master/README.md" target="_blank" rel="noopener">https://github.com/asciinema/asciinema/blob/master/README.md</a></li><li><a href="https://github.com/asciinema/asciinema-server/blob/master/docs/INSTALL.md" target="_blank" rel="noopener">https://github.com/asciinema/asciinema-server/blob/master/docs/INSTALL.md</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7配置使用代理</title>
      <link href="/posts/13/"/>
      <url>/posts/13/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p> 本文档主要介绍如何在centos7上使用代理，访问墙外的网站。<br> <code>shadowsocks</code>实现sock5代理，<code>privoxy</code>把sock5代理转换为http代理。<br><a id="more"></a></p><h3 id="安装shadowsocks"><a href="#安装shadowsocks" class="headerlink" title="安装shadowsocks"></a>安装<code>shadowsocks</code></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo su - root</span><br><span class="line">yum -y install python-pip</span><br><span class="line">pip install shadowsocks</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">mkdir /etc/shadowsocks</span><br><span class="line">cat &gt;/etc/shadowsocks/shadowsocks.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"47.52.xx.xx"</span>,</span><br><span class="line">    <span class="string">"server_port"</span>:52113,</span><br><span class="line">    <span class="string">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>:1080,</span><br><span class="line">    <span class="string">"password"</span>:<span class="string">"xxxxxx"</span>,</span><br><span class="line">    <span class="string">"timeout"</span>:300,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="string">"fast_open"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"workers"</span>: 1</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动脚本</span></span><br><span class="line">cat &gt;/etc/systemd/system/shadowsocks.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks</span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStart=/usr/bin/sslocal -c /etc/shadowsocks/shadowsocks.json</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动并加入开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> shadowsocks.service</span><br><span class="line">systemctl start shadowsocks.service</span><br><span class="line">systemctl status shadowsocks.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">curl --socks5 127.0.0.1:1080 ip.cn</span><br></pre></td></tr></table></figure><h3 id="安装privoxy"><a href="#安装privoxy" class="headerlink" title="安装privoxy"></a>安装<code>privoxy</code></h3><blockquote><p>另一种选择<code>polipo</code></p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install privoxy</span><br></pre></td></tr></table></figure><blockquote><p>以下两种模式选择一种</p></blockquote><p><strong>简单全局模式配置</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'forward-socks5t / 127.0.0.1:1080 . #转发到本地端口'</span> &gt;&gt; /etc/privoxy/config</span><br></pre></td></tr></table></figure></p><p><strong>PAC模式配置（推荐）</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载生成privoxy-action配置的脚本</span></span><br><span class="line">curl -skL https://raw.github.com/zfl9/gfwlist2privoxy/master/gfwlist2privoxy -o gfwlist2privoxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置启动</span></span><br><span class="line"><span class="comment"># '127.0.0.1:1080' 为你的sock5代理地址</span></span><br><span class="line">bash gfwlist2privoxy <span class="string">'127.0.0.1:1080'</span></span><br><span class="line">cp -af gfwlist.action /etc/privoxy/</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'actionsfile gfwlist.action'</span> &gt;&gt; /etc/privoxy/config</span><br></pre></td></tr></table></figure></p><h4 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动并加入开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> privoxy.service</span><br><span class="line">systemctl start privoxy.service</span><br><span class="line">systemctl status privoxy.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># export http_proxy=http://127.0.0.1:8118</span></span><br><span class="line"><span class="comment"># export https_proxy=http://127.0.0.1:8118</span></span><br><span class="line"><span class="comment"># export all_proxy=http://127.0.0.1:8118</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入环境变量中</span></span><br><span class="line">cat &gt;/etc/profile.d/proxy.sh&lt;&lt;EOF</span><br><span class="line"><span class="built_in">alias</span> proxy=<span class="string">'export all_proxy=http://127.0.0.1:8118'</span></span><br><span class="line"><span class="built_in">alias</span> unproxy=<span class="string">'unset all_proxy'</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">. /etc/profile.d/proxy.sh</span><br><span class="line"><span class="comment"># 使用代理</span></span><br><span class="line">proxy</span><br><span class="line">curl www.google.com</span><br><span class="line">curl ip.cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不使用代理</span></span><br><span class="line">unproxy</span><br><span class="line">curl ip.cn</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码整洁之道</title>
      <link href="/posts/12/"/>
      <url>/posts/12/</url>
      
        <content type="html"><![CDATA[<p><img src="/posts/12/代码整洁之道.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> 代码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装kubernetes-v1.7 Volumes和Persistent Volumes</title>
      <link href="/posts/11/"/>
      <url>/posts/11/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Volumes用来存储要持久保留的数据，不想重启容器后就消失。POD中容器之间共享数据。<br>PersistentVolume（PV）和 PersistentVolumeClaim（PVC）是kubernetes提供的</p><p>两种API资源，用于抽象存储细节。管理员关注于如何通过pv提供存储功能而无需<br>关注用户如何使用，同样的用户只需要挂载PVC到容器中而不需要关注存储卷采用<br>何种技术实现。PVC和PV的关系跟pod和node关系类似，前者消耗后者的资源。PVC可以向PV申<br>请指定大小的存储资源并设置访问模式。<br><a id="more"></a></p><blockquote><p>基本使用<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: counter</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: count</span><br><span class="line">    image: busybox</span><br><span class="line">    args:</span><br><span class="line">    - /bin/sh</span><br><span class="line">    - -c</span><br><span class="line">    - &gt;</span><br><span class="line">      i=0;</span><br><span class="line">      <span class="keyword">while</span> <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$i</span>: <span class="variable">$(date)</span>"</span> &gt;&gt; /var/<span class="built_in">log</span>/1.log;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$(date)</span> INFO <span class="variable">$i</span>"</span> &gt;&gt; /var/<span class="built_in">log</span>/2.log;</span><br><span class="line">        i=$((i+1));</span><br><span class="line">        sleep 1;</span><br><span class="line">      <span class="keyword">done</span></span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: varlog</span><br><span class="line">      mountPath: /var/<span class="built_in">log</span></span><br><span class="line">  - name: count-log-1</span><br><span class="line">    image: busybox</span><br><span class="line">    args: [/bin/sh, -c, <span class="string">'tail -n+1 -f /var/log/1.log'</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: varlog</span><br><span class="line">      mountPath: /var/<span class="built_in">log</span></span><br><span class="line">  - name: count-log-2</span><br><span class="line">    image: busybox</span><br><span class="line">    args: [/bin/sh, -c, <span class="string">'tail -n+1 -f /var/log/2.log'</span>]</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: varlog</span><br><span class="line">      mountPath: /var/<span class="built_in">log</span></span><br><span class="line">  volumes:</span><br><span class="line">  - name: varlog</span><br><span class="line">    emptyDir: &#123;&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="安装配置glusterfs"><a href="#安装配置glusterfs" class="headerlink" title="安装配置glusterfs"></a>安装配置glusterfs</h3><p><strong>1. 安装glusterfs</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先安装 gluster 源</span></span><br><span class="line">yum install centos-release-gluster -y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 glusterfs 组件</span></span><br><span class="line">yum install -y glusterfs glusterfs-server glusterfs-fuse \</span><br><span class="line">glusterfs-rdma glusterfs-geo-replication glusterfs-devel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 glusterfs</span></span><br><span class="line">systemctl start glusterd.service</span><br><span class="line">systemctl <span class="built_in">enable</span> glusterd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status glusterd.service</span><br></pre></td></tr></table></figure></p><p><strong>2. 配置集群</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 hosts</span></span><br><span class="line">192.168.12.211 lab1</span><br><span class="line">192.168.12.212 lab2</span><br><span class="line">192.168.12.213 lab3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建存储目录</span></span><br><span class="line">mkdir -pv /data/gfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加节点到 集群</span></span><br><span class="line"><span class="comment"># 执行操作的本机不需要probe 本机</span></span><br><span class="line">gluster peer probe lab2</span><br><span class="line">gluster peer probe lab3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群状态</span></span><br><span class="line">gluster peer status</span><br></pre></td></tr></table></figure></p><p><strong>3. 配置 volume</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建分布卷</span></span><br><span class="line">gluster volume create k8s-volume transport tcp \</span><br><span class="line">lab1:/data/gfs \</span><br><span class="line">lab2:/data/gfs \</span><br><span class="line">lab3:/data/gfs force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看volume状态</span></span><br><span class="line">gluster volume info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 分布卷</span></span><br><span class="line">gluster volume start k8s-volume</span><br></pre></td></tr></table></figure></p><h3 id="Kubernetes中配置glusterfs"><a href="#Kubernetes中配置glusterfs" class="headerlink" title="Kubernetes中配置glusterfs"></a>Kubernetes中配置glusterfs</h3><p><strong>1. kubernetes安装客户端</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在所有 node 节点安装</span></span><br><span class="line">yum install centos-release-gluster -y</span><br><span class="line">yum install -y glusterfs glusterfs-fuse</span><br></pre></td></tr></table></figure></p><p><strong>2. 配置 hosts</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.12.211 lab1</span><br><span class="line">192.168.12.212 lab2</span><br><span class="line">192.168.12.213 lab3</span><br></pre></td></tr></table></figure></p><p><strong>3. 配置 endpoints</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">curl -O https://raw.githubusercontent.com/kubernetes/kubernetes/master/examples/volumes/glusterfs/glusterfs-endpoints.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 glusters 集群节点ip每一个 addresses 为一个 ip 组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl apply -f glusterfs-endpoints.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get ep</span><br></pre></td></tr></table></figure></p><p><strong>4. 配置 service</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/kubernetes/kubernetes/master/examples/volumes/glusterfs/glusterfs-service.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 port 的刚刚上一步中修改的 port</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl apply -f glusterfs-service.json</span><br><span class="line">kubectl get svc</span><br></pre></td></tr></table></figure></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><strong>1. 创建测试 pod</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">curl -O https://raw.githubusercontent.com/kubernetes/kubernetes/master/examples/volumes/glusterfs/glusterfs-pod.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 volumes 下的 path 为上面创建的 k8s-volume</span></span><br><span class="line"><span class="string">"path"</span>: <span class="string">"k8s-volume"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl apply -f glusterfs-pod.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl describe pods/glusterfs</span><br><span class="line"></span><br><span class="line"><span class="comment">#登陆 node 物理机，使用 df 可查看挂载目录</span></span><br><span class="line">df -h</span><br></pre></td></tr></table></figure></p><h3 id="PV和PVC"><a href="#PV和PVC" class="headerlink" title="PV和PVC"></a>PV和PVC</h3><p><strong>1. 配置PV</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建pv</span></span><br><span class="line">cat &gt;glusterfs-pv.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  name: gluster-dev-volume</span><br><span class="line">spec:</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 8Gi</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  glusterfs:</span><br><span class="line">    endpoints: <span class="string">"glusterfs-cluster"</span></span><br><span class="line">    path: <span class="string">"k8s-volume"</span></span><br><span class="line">    readOnly: <span class="literal">false</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl apply -f glusterfs-pv.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 pv</span></span><br><span class="line">kubectl get pv</span><br></pre></td></tr></table></figure></p><p><strong>2. 配置PVC</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;glusterfs-pvc.yaml&lt;&lt;EOF</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: glusterfs-nginx</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 8Gi</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 pvc</span></span><br><span class="line">kubectl apply -f glusterfs-pvc.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 pvc</span></span><br><span class="line">kubectl get pv</span><br><span class="line">kubectl get pvc</span><br></pre></td></tr></table></figure></p><p><strong>3. 创建 nginx deployment 挂载 volume</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;nginx-deployment.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-dm</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: nginx</span><br><span class="line">          image: nginx:alpine</span><br><span class="line">          imagePullPolicy: IfNotPresent</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: 80</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: gluster-dev-volume</span><br><span class="line">              mountPath: <span class="string">"/usr/share/nginx/html"</span></span><br><span class="line">      volumes:</span><br><span class="line">      - name: gluster-dev-volume</span><br><span class="line">        persistentVolumeClaim:</span><br><span class="line">          claimName: glusterfs-nginx</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl apply -f nginx-deployment.yaml</span><br><span class="line">kubectl expose deployment nginx-dm --name=nginx-dm-svc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 deployment</span></span><br><span class="line">kubectl get pods |grep nginx-dm</span><br></pre></td></tr></table></figure></p><p><strong>4. 测试</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看挂载</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it nginx-dm-2194008866-szfl2 -- df -h | grep k8s-volume</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件 测试</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it nginx-dm-2194008866-szfl2 -- touch /usr/share/nginx/html/index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it nginx-dm-2194008866-szfl2 -- ls -lt /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure></p><h3 id="StorageClass"><a href="#StorageClass" class="headerlink" title="StorageClass"></a>StorageClass</h3><p><a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#storageclasses" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/storage/persistent-volumes/#storageclasses</a></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://kubernetes.io/docs/concepts/storage/volumes/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/storage/volumes/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装kubernetes-v1.7插件</title>
      <link href="/posts/10/"/>
      <url>/posts/10/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本教程紧接 centos7安装kubernetes-v1.7 请参考。</p></blockquote><h4 id="安装和配置-kubedns-插件"><a href="#安装和配置-kubedns-插件" class="headerlink" title="安装和配置 kubedns 插件"></a>安装和配置 kubedns 插件</h4><p><strong>1. 拉取镜像</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在所有node节点上操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull</span></span><br><span class="line">docker pull jicki/k8s-dns-sidecar-amd64:1.14.4</span><br><span class="line">docker pull jicki/k8s-dns-kube-dns-amd64:1.14.4</span><br><span class="line">docker pull jicki/k8s-dns-dnsmasq-nanny-amd64:1.14.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># tag</span></span><br><span class="line">docker tag jicki/k8s-dns-sidecar-amd64:1.14.4 gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.4</span><br><span class="line">docker tag jicki/k8s-dns-kube-dns-amd64:1.14.4 gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.4</span><br><span class="line">docker tag jicki/k8s-dns-dnsmasq-nanny-amd64:1.14.4 gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.4</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><strong>2. 修改配置ymal</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">mkdir /server/software/k8s/dns</span><br><span class="line"><span class="built_in">cd</span> /server/software/k8s/dns</span><br><span class="line"></span><br><span class="line"><span class="comment"># config map</span></span><br><span class="line">cat &gt;kubedns-cm.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-dns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    addonmanager.kubernetes.io/mode: EnsureExists</span><br><span class="line">data:</span><br><span class="line">  upstreamNameservers: |</span><br><span class="line">      [<span class="string">"114.114.114.114"</span>, <span class="string">"8.8.8.8"</span>]</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># service account</span></span><br><span class="line">cat &gt;kubedns-sa.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-dns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># controller</span></span><br><span class="line">cat &gt;kubedns-controller.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-dns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-dns</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment"># replicas: not specified here:</span></span><br><span class="line">  <span class="comment"># 1. In order to make Addon Manager do not reconcile this replicas parameter.</span></span><br><span class="line">  <span class="comment"># 2. Default is 1.</span></span><br><span class="line">  <span class="comment"># 3. Will be tuned in real time if DNS horizontal auto-scaling is turned on.</span></span><br><span class="line">  strategy:</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxSurge: 10%</span><br><span class="line">      maxUnavailable: 0</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: kube-dns</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: kube-dns</span><br><span class="line">      annotations:</span><br><span class="line">        scheduler.alpha.kubernetes.io/critical-pod: <span class="string">''</span></span><br><span class="line">    spec:</span><br><span class="line">      tolerations:</span><br><span class="line">      - key: <span class="string">"CriticalAddonsOnly"</span></span><br><span class="line">        operator: <span class="string">"Exists"</span></span><br><span class="line">      volumes:</span><br><span class="line">      - name: kube-dns-config</span><br><span class="line">        configMap:</span><br><span class="line">          name: kube-dns</span><br><span class="line">          optional: <span class="literal">true</span></span><br><span class="line">      containers:</span><br><span class="line">      - name: kubedns</span><br><span class="line">        image: gcr.io/google_containers/k8s-dns-kube-dns-amd64:1.14.4</span><br><span class="line">        resources:</span><br><span class="line">          <span class="comment"># <span class="doctag">TODO:</span> Set memory limits when we've profiled the container for large</span></span><br><span class="line">          <span class="comment"># clusters, then set request = limit to keep this container in</span></span><br><span class="line">          <span class="comment"># guaranteed class. Currently, this container falls into the</span></span><br><span class="line">          <span class="comment"># "burstable" category so the kubelet doesn't backoff from restarting it.</span></span><br><span class="line">          limits:</span><br><span class="line">            memory: 170Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 70Mi</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /healthcheck/kubedns</span><br><span class="line">            port: 10054</span><br><span class="line">            scheme: HTTP</span><br><span class="line">          initialDelaySeconds: 60</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">          successThreshold: 1</span><br><span class="line">          failureThreshold: 5</span><br><span class="line">        readinessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /readiness</span><br><span class="line">            port: 8081</span><br><span class="line">            scheme: HTTP</span><br><span class="line">          <span class="comment"># we poll on pod startup for the Kubernetes master service and</span></span><br><span class="line">          <span class="comment"># only setup the /readiness HTTP server once that's available.</span></span><br><span class="line">          initialDelaySeconds: 3</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">        args:</span><br><span class="line">        - --domain=cluster.local.</span><br><span class="line">        - --dns-port=10053</span><br><span class="line">        - --config-dir=/kube-dns-config</span><br><span class="line">        - --v=2</span><br><span class="line">        <span class="comment">#__PILLAR__FEDERATIONS__DOMAIN__MAP__</span></span><br><span class="line">        env:</span><br><span class="line">        - name: PROMETHEUS_PORT</span><br><span class="line">          value: <span class="string">"10055"</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 10053</span><br><span class="line">          name: dns-local</span><br><span class="line">          protocol: UDP</span><br><span class="line">        - containerPort: 10053</span><br><span class="line">          name: dns-tcp-local</span><br><span class="line">          protocol: TCP</span><br><span class="line">        - containerPort: 10055</span><br><span class="line">          name: metrics</span><br><span class="line">          protocol: TCP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: kube-dns-config</span><br><span class="line">          mountPath: /kube-dns-config</span><br><span class="line">      - name: dnsmasq</span><br><span class="line">        image: gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.4</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /healthcheck/dnsmasq</span><br><span class="line">            port: 10054</span><br><span class="line">            scheme: HTTP</span><br><span class="line">          initialDelaySeconds: 60</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">          successThreshold: 1</span><br><span class="line">          failureThreshold: 5</span><br><span class="line">        args:</span><br><span class="line">        - -v=2</span><br><span class="line">        - -logtostderr</span><br><span class="line">        - -configDir=/etc/k8s/dns/dnsmasq-nanny</span><br><span class="line">        - -restartDnsmasq=<span class="literal">true</span></span><br><span class="line">        - --</span><br><span class="line">        - -k</span><br><span class="line">        - --cache-size=1000</span><br><span class="line">        - --<span class="built_in">log</span>-facility=-</span><br><span class="line">        - --server=/cluster.local./127.0.0.1<span class="comment">#10053</span></span><br><span class="line">        - --server=/<span class="keyword">in</span>-addr.arpa/127.0.0.1<span class="comment">#10053</span></span><br><span class="line">        - --server=/ip6.arpa/127.0.0.1<span class="comment">#10053</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 53</span><br><span class="line">          name: dns</span><br><span class="line">          protocol: UDP</span><br><span class="line">        - containerPort: 53</span><br><span class="line">          name: dns-tcp</span><br><span class="line">          protocol: TCP</span><br><span class="line">        <span class="comment"># see: https://github.com/kubernetes/kubernetes/issues/29055 for details</span></span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 150m</span><br><span class="line">            memory: 20Mi</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: kube-dns-config</span><br><span class="line">          mountPath: /etc/k8s/dns/dnsmasq-nanny</span><br><span class="line">      - name: sidecar</span><br><span class="line">        image: gcr.io/google_containers/k8s-dns-sidecar-amd64:1.14.4</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /metrics</span><br><span class="line">            port: 10054</span><br><span class="line">            scheme: HTTP</span><br><span class="line">          initialDelaySeconds: 60</span><br><span class="line">          timeoutSeconds: 5</span><br><span class="line">          successThreshold: 1</span><br><span class="line">          failureThreshold: 5</span><br><span class="line">        args:</span><br><span class="line">        - --v=2</span><br><span class="line">        - --logtostderr</span><br><span class="line">        - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local.,5,A</span><br><span class="line">        - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local.,5,A</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 10054</span><br><span class="line">          name: metrics</span><br><span class="line">          protocol: TCP</span><br><span class="line">        resources:</span><br><span class="line">          requests:</span><br><span class="line">            memory: 20Mi</span><br><span class="line">            cpu: 10m</span><br><span class="line">      dnsPolicy: Default  <span class="comment"># Don't use cluster DNS.</span></span><br><span class="line">      serviceAccountName: kube-dns</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># service</span></span><br><span class="line">cat &gt;kubedns-svc.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: kube-dns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kube-dns</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">    kubernetes.io/name: <span class="string">"KubeDNS"</span></span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kube-dns</span><br><span class="line">  clusterIP: 10.254.0.2</span><br><span class="line">  ports:</span><br><span class="line">  - name: dns</span><br><span class="line">    port: 53</span><br><span class="line">    protocol: UDP</span><br><span class="line">  - name: dns-tcp</span><br><span class="line">    port: 53</span><br><span class="line">    protocol: TCP</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p><strong>3. 系统预定义的 RoleBinding</strong><br>预定义的 RoleBinding system:kube-dns 将 kube-system 命名空间的 kubedns<br>ServiceAccount 与 system:kube-dns Role 绑定， 该 Role 具有访问 kubeapiserver<br>DNS 相关 API 的权限；</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get clusterrolebindings system:kube-dns -o yaml</span><br></pre></td></tr></table></figure><p><strong>4. 创建 kube-dns</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /server/software/k8s/dns</span><br><span class="line">kubectl create -f .</span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get deploy -n kube-system</span><br><span class="line">kubectl get svc -n kube-system</span><br></pre></td></tr></table></figure></p><p><strong>5. 测试DNS</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建deploy</span></span><br><span class="line">cat &gt;my-nginx.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: my-nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        run: my-nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: my-nginx</span><br><span class="line">        image: nginx:1.9</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">EOF</span><br><span class="line">kubectl create -f my-nginx.yaml</span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl get deploy</span><br><span class="line">kubectl expose deploy my-nginx</span><br><span class="line">kubectl get services --all-namespaces |grep my-nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">kubectl run dns-test --rm -ti --image busybox /bin/sh</span><br><span class="line">nslookup kubernetes</span><br><span class="line">cat /etc/resolv.conf</span><br><span class="line">ping my-nginx</span><br><span class="line">ping kubernetes</span><br><span class="line">wget -q my-nginx -O -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除测试相关的pod</span></span><br><span class="line">kubectl delete -f my-nginx.yaml</span><br></pre></td></tr></table></figure></p><blockquote><p>可以自行指定特殊的域名使用指定的dns服务器 ，也可以自行指定上游服务器。参考<br><a href="https://kubernetes.io/docs/tasks/administer-cluster/dns-custom-nameservers/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/administer-cluster/dns-custom-nameservers/</a></p></blockquote><h4 id="安装dashboard插件"><a href="#安装dashboard插件" class="headerlink" title="安装dashboard插件"></a>安装dashboard插件</h4><p><strong>1. 拉取镜像</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull jicki/kubernetes-dashboard-amd64:v1.6.1</span><br><span class="line">docker tag jicki/kubernetes-dashboard-amd64:v1.6.1 gcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.1</span><br></pre></td></tr></table></figure></p><p><strong>2. 配置yaml文件</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv /server/software/k8s/dashboard</span><br><span class="line"><span class="built_in">cd</span> /server/software/k8s/dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment"># Controller</span></span><br><span class="line">cat &gt;dashboard-controller.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: kubernetes-dashboard</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: kubernetes-dashboard</span><br><span class="line">      annotations:</span><br><span class="line">        scheduler.alpha.kubernetes.io/critical-pod: <span class="string">''</span></span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: dashboard</span><br><span class="line">      containers:</span><br><span class="line">      - name: kubernetes-dashboard</span><br><span class="line">        image: gcr.io/google_containers/kubernetes-dashboard-amd64:v1.6.1</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 50Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 50Mi</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9090</span><br><span class="line">        livenessProbe:</span><br><span class="line">          httpGet:</span><br><span class="line">            path: /</span><br><span class="line">            port: 9090</span><br><span class="line">          initialDelaySeconds: 30</span><br><span class="line">          timeoutSeconds: 30</span><br><span class="line">      tolerations:</span><br><span class="line">      - key: <span class="string">"CriticalAddonsOnly"</span></span><br><span class="line">        operator: <span class="string">"Exists"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># service</span></span><br><span class="line">cat &gt;dashboard-service.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    targetPort: 9090</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># rbac</span></span><br><span class="line">cat &gt;dashboard-rbac.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: dashboard</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: dashboard</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: dashboard</span><br><span class="line">    namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><blockquote><ul><li>增加了一个dashboard-rbac.yaml文件，定义一个名为 dashboard 的 ServiceAccount，<br>然后将它和 Cluster Role view 绑定。</li><li>指定端口类型为 NodePort，这样外界可以通过地址 nodeIP:nodePort 访问 dashboard；</li></ul></blockquote><p><strong>3. 创建dashboard</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f  .</span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get deploy -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看nodePort</span></span><br><span class="line">kubectl get services kubernetes-dashboard -n kube-system</span><br></pre></td></tr></table></figure></p><p><strong>4. 测试访问</strong></p><ul><li>暴露了 NodePort，可以使用 <a href="http://NodeIP:nodePort" target="_blank" rel="noopener">http://NodeIP:nodePort</a> 地址访问 dashboard；<br><a href="http://192.168.12.212:31680" target="_blank" rel="noopener">http://192.168.12.212:31680</a></li><li><p>通过 kube-apiserver 访问 dashboard；</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取地址信息</span></span><br><span class="line">kubectl cluster-info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">https://192.168.12.211:6443/api/v1/namespaces/kube-system/services/kubernetes-dashboard/proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可能会遇到的问题</span></span><br><span class="line">https://github.com/opsnull/follow-me-install-kubernetes-cluster/issues/5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出证书</span></span><br><span class="line">openssl pkcs12 -<span class="built_in">export</span> -<span class="keyword">in</span> admin.pem  -out admin.p12 -inkey admin-key.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入证书</span></span><br><span class="line"><span class="comment"># 将生成的admin.p12证书导入的你的电脑，导出的时候记住你设置的密码，导入的时候还要用到。</span></span><br><span class="line"><span class="comment"># 密码可以设置为空，直接回车即可。</span></span><br></pre></td></tr></table></figure></li><li><p>通过 kubectl proxy 访问 dashboard</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建</span></span><br><span class="line">kubectl proxy --address=<span class="string">'192.168.12.211'</span> --port=8086 --accept-hosts=<span class="string">'^*$'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">http://192.168.12.211:8086/ui</span><br></pre></td></tr></table></figure></li></ul><h4 id="配置和安装-Heapster"><a href="#配置和安装-Heapster" class="headerlink" title="配置和安装 Heapster"></a>配置和安装 Heapster</h4><p><strong>1. 拉取镜像</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker pull daocloud.io/will835559313/k8s:master-f7ff86e</span><br><span class="line">docker tag daocloud.io/will835559313/k8s:master-f7ff86e gcr.io/google_containers/heapster-amd64:v1.3.0</span><br><span class="line"></span><br><span class="line">docker pull daocloud.io/will835559313/k8s:master-545d95d</span><br><span class="line">docker tag daocloud.io/will835559313/k8s:master-545d95d gcr.io/google_containers/heapster-grafana-amd64:v4.0.2</span><br><span class="line"></span><br><span class="line">docker pull daocloud.io/will835559313/k8s:master-f694b85</span><br><span class="line">docker tag daocloud.io/will835559313/k8s:master-f694b85 gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1</span><br></pre></td></tr></table></figure></p><p><strong>2. 配置yaml</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv /server/software/k8s/heapster</span><br><span class="line"><span class="built_in">cd</span> /server/software/k8s/heapster</span><br><span class="line"></span><br><span class="line"><span class="comment"># influxdb</span></span><br><span class="line"><span class="comment"># ConfigMap的配置主要为了开启 admin UI 插件</span></span><br><span class="line"><span class="comment"># 可以根据需求来删除此配置。</span></span><br><span class="line">cat &gt;influxdb.yaml&lt;&lt;EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: influxdb-config</span><br><span class="line">  namespace: kube-system</span><br><span class="line">data:</span><br><span class="line">  config.toml: |</span><br><span class="line">    reporting-disabled = <span class="literal">true</span></span><br><span class="line">    <span class="built_in">bind</span>-address = <span class="string">":8088"</span></span><br><span class="line">    [meta]</span><br><span class="line">      dir = <span class="string">"/data/meta"</span></span><br><span class="line">      retention-autocreate = <span class="literal">true</span></span><br><span class="line">      logging-enabled = <span class="literal">true</span></span><br><span class="line">    [data]</span><br><span class="line">      dir = <span class="string">"/data/data"</span></span><br><span class="line">      wal-dir = <span class="string">"/data/wal"</span></span><br><span class="line">      query-log-enabled = <span class="literal">true</span></span><br><span class="line">      cache-max-memory-size = 1073741824</span><br><span class="line">      cache-snapshot-memory-size = 26214400</span><br><span class="line">      cache-snapshot-write-cold-duration = <span class="string">"10m0s"</span></span><br><span class="line">      compact-full-write-cold-duration = <span class="string">"4h0m0s"</span></span><br><span class="line">      max-series-per-database = 1000000</span><br><span class="line">      max-values-per-tag = 100000</span><br><span class="line">      trace-logging-enabled = <span class="literal">false</span></span><br><span class="line">    [coordinator]</span><br><span class="line">      write-timeout = <span class="string">"10s"</span></span><br><span class="line">      max-concurrent-queries = 0</span><br><span class="line">      query-timeout = <span class="string">"0s"</span></span><br><span class="line">      <span class="built_in">log</span>-queries-after = <span class="string">"0s"</span></span><br><span class="line">      max-select-point = 0</span><br><span class="line">      max-select-series = 0</span><br><span class="line">      max-select-buckets = 0</span><br><span class="line">    [retention]</span><br><span class="line">      enabled = <span class="literal">true</span></span><br><span class="line">      check-interval = <span class="string">"30m0s"</span></span><br><span class="line">    [admin]</span><br><span class="line">      enabled = <span class="literal">true</span></span><br><span class="line">      <span class="built_in">bind</span>-address = <span class="string">":8083"</span></span><br><span class="line">      https-enabled = <span class="literal">false</span></span><br><span class="line">      https-certificate = <span class="string">"/etc/ssl/influxdb.pem"</span></span><br><span class="line">    [shard-precreation]</span><br><span class="line">      enabled = <span class="literal">true</span></span><br><span class="line">      check-interval = <span class="string">"10m0s"</span></span><br><span class="line">      advance-period = <span class="string">"30m0s"</span></span><br><span class="line">    [monitor]</span><br><span class="line">      store-enabled = <span class="literal">true</span></span><br><span class="line">      store-database = <span class="string">"_internal"</span></span><br><span class="line">      store-interval = <span class="string">"10s"</span></span><br><span class="line">    [subscriber]</span><br><span class="line">      enabled = <span class="literal">true</span></span><br><span class="line">      http-timeout = <span class="string">"30s"</span></span><br><span class="line">      insecure-skip-verify = <span class="literal">false</span></span><br><span class="line">      ca-certs = <span class="string">""</span></span><br><span class="line">      write-concurrency = 40</span><br><span class="line">      write-buffer-size = 1000</span><br><span class="line">    [http]</span><br><span class="line">      enabled = <span class="literal">true</span></span><br><span class="line">      <span class="built_in">bind</span>-address = <span class="string">":8086"</span></span><br><span class="line">      auth-enabled = <span class="literal">false</span></span><br><span class="line">      <span class="built_in">log</span>-enabled = <span class="literal">true</span></span><br><span class="line">      write-tracing = <span class="literal">false</span></span><br><span class="line">      pprof-enabled = <span class="literal">false</span></span><br><span class="line">      https-enabled = <span class="literal">false</span></span><br><span class="line">      https-certificate = <span class="string">"/etc/ssl/influxdb.pem"</span></span><br><span class="line">      https-private-key = <span class="string">""</span></span><br><span class="line">      max-row-limit = 10000</span><br><span class="line">      max-connection-limit = 0</span><br><span class="line">      shared-secret = <span class="string">""</span></span><br><span class="line">      realm = <span class="string">"InfluxDB"</span></span><br><span class="line">      unix-socket-enabled = <span class="literal">false</span></span><br><span class="line">      <span class="built_in">bind</span>-socket = <span class="string">"/var/run/influxdb.sock"</span></span><br><span class="line">    [[graphite]]</span><br><span class="line">      enabled = <span class="literal">false</span></span><br><span class="line">      <span class="built_in">bind</span>-address = <span class="string">":2003"</span></span><br><span class="line">      database = <span class="string">"graphite"</span></span><br><span class="line">      retention-policy = <span class="string">""</span></span><br><span class="line">      protocol = <span class="string">"tcp"</span></span><br><span class="line">      batch-size = 5000</span><br><span class="line">      batch-pending = 10</span><br><span class="line">      batch-timeout = <span class="string">"1s"</span></span><br><span class="line">      consistency-level = <span class="string">"one"</span></span><br><span class="line">      separator = <span class="string">"."</span></span><br><span class="line">      udp-read-buffer = 0</span><br><span class="line">    [[collectd]]</span><br><span class="line">      enabled = <span class="literal">false</span></span><br><span class="line">      <span class="built_in">bind</span>-address = <span class="string">":25826"</span></span><br><span class="line">      database = <span class="string">"collectd"</span></span><br><span class="line">      retention-policy = <span class="string">""</span></span><br><span class="line">      batch-size = 5000</span><br><span class="line">      batch-pending = 10</span><br><span class="line">      batch-timeout = <span class="string">"10s"</span></span><br><span class="line">      <span class="built_in">read</span>-buffer = 0</span><br><span class="line">      typesdb = <span class="string">"/usr/share/collectd/types.db"</span></span><br><span class="line">    [[opentsdb]]</span><br><span class="line">      enabled = <span class="literal">false</span></span><br><span class="line">      <span class="built_in">bind</span>-address = <span class="string">":4242"</span></span><br><span class="line">      database = <span class="string">"opentsdb"</span></span><br><span class="line">      retention-policy = <span class="string">""</span></span><br><span class="line">      consistency-level = <span class="string">"one"</span></span><br><span class="line">      tls-enabled = <span class="literal">false</span></span><br><span class="line">      certificate = <span class="string">"/etc/ssl/influxdb.pem"</span></span><br><span class="line">      batch-size = 1000</span><br><span class="line">      batch-pending = 5</span><br><span class="line">      batch-timeout = <span class="string">"1s"</span></span><br><span class="line">      <span class="built_in">log</span>-point-errors = <span class="literal">true</span></span><br><span class="line">    [[udp]]</span><br><span class="line">      enabled = <span class="literal">false</span></span><br><span class="line">      <span class="built_in">bind</span>-address = <span class="string">":8089"</span></span><br><span class="line">      database = <span class="string">"udp"</span></span><br><span class="line">      retention-policy = <span class="string">""</span></span><br><span class="line">      batch-size = 5000</span><br><span class="line">      batch-pending = 10</span><br><span class="line">      <span class="built_in">read</span>-buffer = 0</span><br><span class="line">      batch-timeout = <span class="string">"1s"</span></span><br><span class="line">      precision = <span class="string">""</span></span><br><span class="line">    [continuous_queries]</span><br><span class="line">      <span class="built_in">log</span>-enabled = <span class="literal">true</span></span><br><span class="line">      enabled = <span class="literal">true</span></span><br><span class="line">      run-interval = <span class="string">"1s"</span></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: monitoring-influxdb</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        task: monitoring</span><br><span class="line">        k8s-app: influxdb</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: influxdb</span><br><span class="line">        image: gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: /data</span><br><span class="line">          name: influxdb-storage</span><br><span class="line">        - mountPath: /etc/</span><br><span class="line">          name: influxdb-config</span><br><span class="line">      volumes:</span><br><span class="line">      - name: influxdb-storage</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">      - name: influxdb-config</span><br><span class="line">        configMap:</span><br><span class="line">          name: influxdb-config</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    task: monitoring</span><br><span class="line">    <span class="comment"># For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)</span></span><br><span class="line">    <span class="comment"># If you are NOT using this as an addon, you should comment out this line.</span></span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">'true'</span></span><br><span class="line">    kubernetes.io/name: monitoring-influxdb</span><br><span class="line">  name: monitoring-influxdb</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - port: 8086</span><br><span class="line">    targetPort: 8086</span><br><span class="line">    name: http</span><br><span class="line">  - port: 8083</span><br><span class="line">    targetPort: 8083</span><br><span class="line">    name: admin</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: influxdb</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># grafana</span></span><br><span class="line">cat &gt;grafana.yaml&lt;&lt;EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: monitoring-grafana</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        task: monitoring</span><br><span class="line">        k8s-app: grafana</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: grafana</span><br><span class="line">        image: gcr.io/google_containers/heapster-grafana-amd64:v4.0.2</span><br><span class="line">        ports:</span><br><span class="line">          - containerPort: 3000</span><br><span class="line">            protocol: TCP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: /var</span><br><span class="line">          name: grafana-storage</span><br><span class="line">        env:</span><br><span class="line">        - name: INFLUXDB_HOST</span><br><span class="line">          value: monitoring-influxdb</span><br><span class="line">        - name: GRAFANA_PORT</span><br><span class="line">          value: <span class="string">"3000"</span></span><br><span class="line">          <span class="comment"># The following env variables are required to make Grafana accessible via</span></span><br><span class="line">          <span class="comment"># the kubernetes api-server proxy. On production clusters, we recommend</span></span><br><span class="line">          <span class="comment"># removing these env variables, setup auth for grafana, and expose the grafana</span></span><br><span class="line">          <span class="comment"># service using a LoadBalancer or a public IP.</span></span><br><span class="line">        - name: GF_AUTH_BASIC_ENABLED</span><br><span class="line">          value: <span class="string">"false"</span></span><br><span class="line">        - name: GF_AUTH_ANONYMOUS_ENABLED</span><br><span class="line">          value: <span class="string">"true"</span></span><br><span class="line">        - name: GF_AUTH_ANONYMOUS_ORG_ROLE</span><br><span class="line">          value: Admin</span><br><span class="line">        - name: GF_SERVER_ROOT_URL</span><br><span class="line">          <span class="comment"># If you're only using the API Server proxy, set this value instead:</span></span><br><span class="line">          value: /api/v1/proxy/namespaces/kube-system/services/monitoring-grafana/</span><br><span class="line">          <span class="comment">#value: /</span></span><br><span class="line">      volumes:</span><br><span class="line">      - name: grafana-storage</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    <span class="comment"># For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)</span></span><br><span class="line">    <span class="comment"># If you are NOT using this as an addon, you should comment out this line.</span></span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">'true'</span></span><br><span class="line">    kubernetes.io/name: monitoring-grafana</span><br><span class="line">  name: monitoring-grafana</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  <span class="comment"># In a production setup, we recommend accessing Grafana through an external Loadbalancer</span></span><br><span class="line">  <span class="comment"># or through a public IP.</span></span><br><span class="line">  <span class="comment"># type: LoadBalancer</span></span><br><span class="line">  <span class="comment"># You could also use NodePort to expose the service at a randomly-generated port</span></span><br><span class="line">  ports:</span><br><span class="line">  - port : 80</span><br><span class="line">    targetPort: 3000</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: grafana</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># heapster</span></span><br><span class="line">cat &gt;heapster.yaml&lt;&lt;EOF</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: heapster</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: heapster</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: heapster</span><br><span class="line">    namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: heapster</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        task: monitoring</span><br><span class="line">        k8s-app: heapster</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: heapster</span><br><span class="line">      containers:</span><br><span class="line">      - name: heapster</span><br><span class="line">        image: gcr.io/google_containers/heapster-amd64:v1.3.0</span><br><span class="line">        imagePullPolicy: IfNotPresent</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - /heapster</span><br><span class="line">        - --<span class="built_in">source</span>=kubernetes:https://kubernetes.default</span><br><span class="line">        - --sink=influxdb:http://monitoring-influxdb.kube-system.svc:8086</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    task: monitoring</span><br><span class="line">    <span class="comment"># For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)</span></span><br><span class="line">    <span class="comment"># If you are NOT using this as an addon, you should comment out this line.</span></span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">'true'</span></span><br><span class="line">    kubernetes.io/name: Heapster</span><br><span class="line">  name: heapster</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    targetPort: 8082</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: heapster</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p><strong>3. 创建</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f .</span><br><span class="line"></span><br><span class="line">kubectl get deploy -n kube-system</span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get svc -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问dashboard查有无监控图表</span></span><br></pre></td></tr></table></figure></p><p><strong>4. 访问 grafana</strong></p><ul><li><p>通过 kube-apiserver 访问</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl cluster-info</span><br><span class="line"><span class="comment"># https://192.168.12.211:6443/api/v1/namespaces/kube-system/services/monitoring-grafana/proxy</span></span><br></pre></td></tr></table></figure></li><li><p>通过 kubectl proxy 访问</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl proxy --address=<span class="string">'192.168.12.211'</span> --port=8086 --accept-hosts=<span class="string">'^*$'</span></span><br><span class="line"><span class="comment"># http://192.168.12.211:8086/api/v1/proxy/namespaces/kube-system/services/monitoring-grafana</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>5. 访问 influxdb admin UI</strong></p><ul><li><p>通过NodePort</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get svc -n kube-system|grep influxdb</span><br><span class="line"><span class="comment"># http://192.168.12.212:31083/</span></span><br></pre></td></tr></table></figure></li><li><p>通过api-server</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http://192.168.12.211:8080/api/v1/proxy/namespaces/kube-system/services/monitoring-influxdb:8083/</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>如果后续使用 kube-apiserver 或者 kubectl proxy 访问 grafana dashboard，则必须将 GF_SERVER_ROOT_URL 设置为/api/v1/proxy/namespaces/kube-system/services/monitoring-grafana/，否则后续访问grafana时访问时提示找不到<a href="http://192.168.12.211:8086/api/v1/proxy/namespaces/kube-system/services/monitoring-grafana/api/dashboards/home" target="_blank" rel="noopener">http://192.168.12.211:8086/api/v1/proxy/namespaces/kube-system/services/monitoring-grafana/api/dashboards/home</a> 页面；<br>heapster1.4版本会有问题，造成grafana无法成功启动，建议使用1.3版本</p></blockquote><h4 id="配置和安装-EFK"><a href="#配置和安装-EFK" class="headerlink" title="配置和安装 EFK"></a>配置和安装 EFK</h4><p><strong>1. 拉取镜像</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker pull daocloud.io/will835559313/k8s:master-6ccfe3d</span><br><span class="line">docker tag daocloud.io/will835559313/k8s:master-6ccfe3d gcr.io/google_containers/kibana:v4.6.1-1</span><br><span class="line"></span><br><span class="line">docker pull daocloud.io/will835559313/k8s:master-425d70b</span><br><span class="line">docker tag daocloud.io/will835559313/k8s:master-425d70b gcr.io/google_containers/fluentd-elasticsearch:1.22</span><br><span class="line"></span><br><span class="line">docker pull daocloud.io/will835559313/k8s:master-1e3ccdf</span><br><span class="line">docker tag daocloud.io/will835559313/k8s:master-1e3ccdf gcr.io/google_containers/elasticsearch:v2.4.1-2</span><br></pre></td></tr></table></figure></p><p><strong>2. 修改yaml</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv /server/software/k8s/efk</span><br><span class="line"><span class="built_in">cd</span> /server/software/k8s/efk</span><br><span class="line"></span><br><span class="line"><span class="comment"># rbac</span></span><br><span class="line">cat &gt;efk-rbac.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: efk</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: efk</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: efk</span><br><span class="line">    namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># es</span></span><br><span class="line">cat &gt;es.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ReplicationController</span><br><span class="line">metadata:</span><br><span class="line">  name: elasticsearch-logging-v1</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: elasticsearch-logging</span><br><span class="line">    version: v1</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: elasticsearch-logging</span><br><span class="line">    version: v1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: elasticsearch-logging</span><br><span class="line">        version: v1</span><br><span class="line">        kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: efk</span><br><span class="line">      containers:</span><br><span class="line">      - image: gcr.io/google_containers/elasticsearch:v2.4.1-2</span><br><span class="line">        name: elasticsearch-logging</span><br><span class="line">        resources:</span><br><span class="line">          <span class="comment"># need more cpu upon initialization, therefore burstable class</span></span><br><span class="line">          limits:</span><br><span class="line">            cpu: 1000m</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9200</span><br><span class="line">          name: db</span><br><span class="line">          protocol: TCP</span><br><span class="line">        - containerPort: 9300</span><br><span class="line">          name: transport</span><br><span class="line">          protocol: TCP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: es-persistent-storage</span><br><span class="line">          mountPath: /data</span><br><span class="line">        env:</span><br><span class="line">        - name: <span class="string">"NAMESPACE"</span></span><br><span class="line">          valueFrom:</span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.namespace</span><br><span class="line">      volumes:</span><br><span class="line">      - name: es-persistent-storage</span><br><span class="line">        emptyDir: &#123;&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: elasticsearch-logging</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: elasticsearch-logging</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">    kubernetes.io/name: <span class="string">"Elasticsearch"</span></span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 9200</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: db</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: elasticsearch-logging</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># kibana</span></span><br><span class="line">cat &gt;kibana.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: kibana-logging</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kibana-logging</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: kibana-logging</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: kibana-logging</span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: efk</span><br><span class="line">      containers:</span><br><span class="line">      - name: kibana-logging</span><br><span class="line">        image: gcr.io/google_containers/kibana:v4.6.1-1</span><br><span class="line">        resources:</span><br><span class="line">          <span class="comment"># keep request = limit to keep this container in guaranteed class</span></span><br><span class="line">          limits:</span><br><span class="line">            cpu: 100m</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">        env:</span><br><span class="line">          - name: <span class="string">"ELASTICSEARCH_URL"</span></span><br><span class="line">            value: <span class="string">"http://elasticsearch-logging:9200"</span></span><br><span class="line">          - name: <span class="string">"KIBANA_BASE_URL"</span></span><br><span class="line">            value: <span class="string">"/api/v1/proxy/namespaces/kube-system/services/kibana-logging"</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 5601</span><br><span class="line">          name: ui</span><br><span class="line">          protocol: TCP</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: kibana-logging</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kibana-logging</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">    kubernetes.io/name: <span class="string">"Kibana"</span></span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 5601</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: ui</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kibana-logging</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># flentd</span></span><br><span class="line">cat &gt;fluentd-es-ds.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: fluentd-es-v1.22</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: fluentd-es</span><br><span class="line">    kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">    addonmanager.kubernetes.io/mode: Reconcile</span><br><span class="line">    version: v1.22</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: fluentd-es</span><br><span class="line">        kubernetes.io/cluster-service: <span class="string">"true"</span></span><br><span class="line">        version: v1.22</span><br><span class="line">      <span class="comment"># This annotation ensures that fluentd does not get evicted if the node</span></span><br><span class="line">      <span class="comment"># supports critical pod annotation based priority scheme.</span></span><br><span class="line">      <span class="comment"># Note that this does not guarantee admission on the nodes (#40573).</span></span><br><span class="line">      annotations:</span><br><span class="line">        scheduler.alpha.kubernetes.io/critical-pod: <span class="string">''</span></span><br><span class="line">    spec:</span><br><span class="line">      serviceAccountName: efk</span><br><span class="line">      containers:</span><br><span class="line">      - name: fluentd-es</span><br><span class="line">        image: gcr.io/google_containers/fluentd-elasticsearch:1.22</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">          - <span class="string">'/bin/sh'</span></span><br><span class="line">          - <span class="string">'-c'</span></span><br><span class="line">          - <span class="string">'/usr/sbin/td-agent 2&gt;&amp;1 &gt;&gt; /var/log/fluentd.log'</span></span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            memory: 200Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 200Mi</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: varlog</span><br><span class="line">          mountPath: /var/<span class="built_in">log</span></span><br><span class="line">        - name: varlibdockercontainers</span><br><span class="line">          mountPath: /var/lib/docker/containers</span><br><span class="line">          readOnly: <span class="literal">true</span></span><br><span class="line">      nodeSelector:</span><br><span class="line">        beta.kubernetes.io/fluentd-ds-ready: <span class="string">"true"</span></span><br><span class="line">      tolerations:</span><br><span class="line">      - key : <span class="string">"node.alpha.kubernetes.io/ismaster"</span></span><br><span class="line">        effect: <span class="string">"NoSchedule"</span></span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      volumes:</span><br><span class="line">      - name: varlog</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /var/<span class="built_in">log</span></span><br><span class="line">      - name: varlibdockercontainers</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /var/lib/docker/containers</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p><strong>3. 给 Node 设置标签</strong></p><blockquote><p>定义 DaemonSet fluentd-es-v1.22 时设置了 nodeSelector beta.kubernetes.io/fluentd-ds-ready=true ，所以需要在期望运行 fluentd 的 Node 上设置该标签；</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line">kubectl label nodes 192.168.12.212 beta.kubernetes.io/fluentd-ds-ready=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>4. 创建</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f .</span><br><span class="line">kubectl get deploy -n kube-system</span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get svc -n kube-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># kibana Pod 第一次启动时会用**较长时间(10-20分钟)**来优化和 Cache 状态页面，</span></span><br><span class="line"><span class="comment"># 可以 tailf 该 Pod 的日志观察进度：</span></span><br><span class="line">kubectl logs -f kibana-logging-269483651-c2tl0 -n kube-system</span><br></pre></td></tr></table></figure></p><p><strong>5. 访问</strong></p><ul><li><p>通过 kube-apiserver 访问</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl cluster-info</span><br><span class="line"><span class="comment"># https://192.168.12.211:6443/api/v1/namespaces/kube-system/services/kibana-logging/proxy</span></span><br></pre></td></tr></table></figure></li><li><p>通过 kubectl proxy 访问</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl proxy --address=<span class="string">'192.168.12.211'</span> --port=8086 --accept-hosts=<span class="string">'^*$'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># http://192.168.12.211:8086/api/v1/proxy/namespaces/kube-system/services/kibana-logging</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>可能遇到的问题<br>如果你在这里发现Create按钮是灰色的无法点击，且Time-filed name中没有选项，fluentd要读取/var/log/containers/目录下的log日志，这些日志是从/var/lib/docker/containers/${CONTAINER_ID}/${CONTAINER_ID}-json.log链接过来的，查看你的docker配置，—log-dirver需要设置为json-file格式，默认的可能是journald，参考docker logging。</p></blockquote><h4 id="安装配置-traefik-ingress"><a href="#安装配置-traefik-ingress" class="headerlink" title="安装配置 traefik ingress"></a>安装配置 traefik ingress</h4><p><strong>1. 简介</strong></p><ul><li><p>理解Ingress</p><p>简单的说，ingress就是从kubernetes集群外访问集群的入口，将用户的URL请求转<br>发到不同的service上。Ingress相当于nginx、apache等负载均衡方向代理服务器，<br>其中还包括规则定义，即URL的路由信息，路由信息得的刷新由Ingress controller<br>来提供。</p></li><li><p>理解Ingress Controller</p><p>Ingress Controller 实质上可以理解为是个监视器，Ingress Controller 通过不断地跟<br>kubernetes API 打交道，实时的感知后端 service、pod 等变化，比如新增和减少<br>pod，service 增加与减少等；当得到这些变化信息后，Ingress Controller 再结合下<br>文的 Ingress 生成配置，然后更新反向代理负载均衡器，并刷新其配置，达到服务<br>发现的作用。</p></li></ul><p><strong>2. 配置yaml文件</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">mkdir /server/software/k8s/traefik</span><br><span class="line"><span class="built_in">cd</span> /server/software/k8s/traefik</span><br><span class="line"></span><br><span class="line"><span class="comment"># rbac</span></span><br><span class="line">cat &gt;ingress-rbac.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1beta1</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress</span><br><span class="line">subjects:</span><br><span class="line">  - kind: ServiceAccount</span><br><span class="line">    name: ingress</span><br><span class="line">    namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># ingress</span></span><br><span class="line">cat &gt;ingress.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-ingress</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: traefik.nginx.io</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: my-nginx</span><br><span class="line">          servicePort: 80</span><br><span class="line">  - host: traefik.frontend.io</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: frontend</span><br><span class="line">          servicePort: 80</span><br><span class="line">  - host: rolling-update-test.traefik.io</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: rolling-update-test</span><br><span class="line">          servicePort: 9090</span><br><span class="line">  - host: k8s-app-monitor-agent.jimmysong.io</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: k8s-app-monitor-agent</span><br><span class="line">          servicePort: 8080</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># traefik</span></span><br><span class="line">cat &gt;traefik.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-ingress-lb</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: traefik-ingress-lb</span><br><span class="line">spec:</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: traefik-ingress-lb</span><br><span class="line">        name: traefik-ingress-lb</span><br><span class="line">    spec:</span><br><span class="line">      terminationGracePeriodSeconds: 60</span><br><span class="line">      hostNetwork: <span class="literal">true</span></span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      serviceAccountName: ingress</span><br><span class="line">      containers:</span><br><span class="line">      - image: traefik</span><br><span class="line">        name: traefik-ingress-lb</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 200m</span><br><span class="line">            memory: 30Mi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 100m</span><br><span class="line">            memory: 20Mi</span><br><span class="line">        ports:</span><br><span class="line">        - name: http</span><br><span class="line">          containerPort: 80</span><br><span class="line">          hostPort: 80</span><br><span class="line">        - name: admin</span><br><span class="line">          containerPort: 8580</span><br><span class="line">          hostPort: 8580</span><br><span class="line">        args:</span><br><span class="line">        - --web</span><br><span class="line">        - --web.address=:8580</span><br><span class="line">        - --kubernetes</span><br><span class="line">      nodeSelector:</span><br><span class="line">        edgenode: <span class="string">"true"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># ui</span></span><br><span class="line">cat &gt;ui.yaml&lt;&lt;EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-web-ui</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: traefik-ingress-lb</span><br><span class="line">  ports:</span><br><span class="line">  - name: web</span><br><span class="line">    port: 80</span><br><span class="line">    targetPort: 8580</span><br><span class="line">---</span><br><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: traefik-web-ui</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: traefik-ui.local</span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - path: /</span><br><span class="line">        backend:</span><br><span class="line">          serviceName: traefik-web-ui</span><br><span class="line">          servicePort: web</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p><strong>3. 创建</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 node 的 label</span></span><br><span class="line">kubectl get nodes</span><br><span class="line">kubectl label nodes 192.168.12.212 edgenode=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">kubectl create -f .</span><br><span class="line">kubectl get pods -n kube-system</span><br><span class="line">kubectl get ds -n kube-system</span><br><span class="line">kubectl get svc -n kube-system</span><br></pre></td></tr></table></figure></p><p><strong>4. 访问</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 管理页面</span></span><br><span class="line">http://192.168.12.212:8580/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试 nginx</span></span><br><span class="line"><span class="comment"># 配置hosts</span></span><br><span class="line"><span class="comment"># 192.168.12.212 traefik.nginx.io</span></span><br><span class="line">curl traefik.nginx.io</span><br></pre></td></tr></table></figure></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://www.kubernetes.org.cn/1870.html" target="_blank" rel="noopener">https://www.kubernetes.org.cn/1870.html</a></li><li><a href="https://github.com/rootsongjc/kubernetes-handbook" target="_blank" rel="noopener">https://github.com/rootsongjc/kubernetes-handbook</a></li><li><a href="https://github.com/opsnull/follow-me-install-kubernetes-cluster" target="_blank" rel="noopener">https://github.com/opsnull/follow-me-install-kubernetes-cluster</a></li><li><a href="http://www.cnblogs.com/ericnie/p/6965091.html" target="_blank" rel="noopener">http://www.cnblogs.com/ericnie/p/6965091.html</a></li><li><a href="https://docs.traefik.io/user-guide/kubernetes/" target="_blank" rel="noopener">https://docs.traefik.io/user-guide/kubernetes/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装kubernetes-v1.7安装配置calico网络组件</title>
      <link href="/posts/9/"/>
      <url>/posts/9/</url>
      
        <content type="html"><![CDATA[<h3 id="安装条件"><a href="#安装条件" class="headerlink" title="安装条件"></a>安装条件</h3><ul><li><p>kube-apiserver 必须开启参数 <code>--runtime-config=extensions/v1beta1/networkpolicies=true</code></p><blockquote><ul><li>v1.6以及以前的版本需要在apiserver开启 extensions/v1beta1/networkpolicies</li><li>v1.7+版本Network Policy已经GA，API版本为 networking.k8s.io/v1</li></ul></blockquote></li><li><p>kubelet 配置使用cni网络插件 <code>--network-plugin=cni</code></p></li><li>kube-proxy 必须使用iptables模式 <code>--proxy-mode=iptables</code>，默认就是这个参数</li><li>kube-proxy 不能设置 <code>--masquerade-all</code></li><li>kubernetes &gt; v1.3.0</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong>1. 配置rbac</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /server/software/k8s/calico</span><br><span class="line"><span class="built_in">cd</span> /server/software/k8s/calico</span><br><span class="line">wget http://docs.projectcalico.org/v2.4/getting-started/kubernetes/installation/rbac.yaml</span><br><span class="line">kubectl apply -f rbac.yaml</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><strong>2. 拉取镜像</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker pull calico/node:v2.4.0</span><br><span class="line">docker pull calico/cni:v1.10.0</span><br><span class="line">docker pull calico/kube-policy-controller:v0.7.0</span><br><span class="line"></span><br><span class="line">docker tag calico/node:v2.4.0 quay.io/calico/node:v2.4.0</span><br><span class="line">docker tag calico/cni:v1.10.0 quay.io/calico/cni:v1.10.0</span><br><span class="line">docker tag calico/kube-policy-controller:v0.7.0 quay.io/calico/kube-policy-controller:v0.7.0</span><br></pre></td></tr></table></figure></p><p><strong>3. 启动</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载配置文件</span></span><br><span class="line">wget http://docs.projectcalico.org/v2.4/getting-started/kubernetes/installation/hosted/calico.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改etcd相关的配置</span></span><br><span class="line">etcd_endpoints: <span class="string">"https://192.168.12.211:2379,https://192.168.12.212:2379,https://192.168.12.213:2379"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于使用了tls需要配置如下位置</span></span><br><span class="line">etcd_ca: <span class="string">"/calico-secrets/etcd-ca"</span></span><br><span class="line">etcd_cert: <span class="string">"/calico-secrets/etcd-cert"</span></span><br><span class="line">etcd_key: <span class="string">"/calico-secrets/etcd-key"</span></span><br><span class="line">...</span><br><span class="line">etcd-key: xxxxxxxxxx</span><br><span class="line">etcd-cert: xxxxxxxxxxx</span><br><span class="line">etcd-ca: xxxxxxxxxxxx</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面的内容使用如下方式获取</span></span><br><span class="line">base64 /etc/kubernetes/ssl/kubernetes-key.pem | tr -d <span class="string">'\n'</span></span><br><span class="line">base64 /etc/kubernetes/ssl/kubernetes.pem | tr -d <span class="string">'\n'</span></span><br><span class="line">base64 /etc/kubernetes/ssl/ca.pem | tr -d <span class="string">'\n'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果pod不能正常上网，还可以指定网卡。</span></span><br><span class="line"><span class="comment"># 在配置node的containers段的env配置如下环境变量</span></span><br><span class="line">- name: IP_AUTODETECTION_METHOD</span><br><span class="line">  value: <span class="string">"IP_AUTODETECTION_METHOD=can-reach=www.baidu.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者配置如下形式</span></span><br><span class="line">- name: IP_AUTODETECTION_METHOD</span><br><span class="line">  value: <span class="string">"IP_AUTODETECTION_METHOD=interface=eth0"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">kubectl apply -f calico.yaml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods -n kube-system</span><br></pre></td></tr></table></figure></p><p><strong>4. 测试</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动多个容器查看，看是否能ping通</span></span><br><span class="line">kubectl run calico-test-1 --rm -ti --image busybox /bin/sh</span><br><span class="line">kubectl run calico-test-2 --rm -ti --image busybox /bin/sh</span><br><span class="line">kubectl run calico-test-3 --rm -ti --image busybox /bin/sh</span><br></pre></td></tr></table></figure></p><h3 id="Network-policy-测试"><a href="#Network-policy-测试" class="headerlink" title="Network policy 测试"></a>Network policy 测试</h3><p>默认网络是全部连通的，POD之间可以随意访问。</p><p><strong>1. 创建 nginx deploy</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl run nginx --image=nginx --replicas=2</span><br><span class="line">kubectl expose deployment nginx --port=80</span><br><span class="line">kubectl get svc,pod</span><br></pre></td></tr></table></figure></p><p><strong>2. 测试</strong><br>测试应该通过<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10.254.132.113 为上面获取到的 nginx 的集群 IP</span></span><br><span class="line">kubectl run busybox --rm -ti --image=busybox /bin/sh</span><br><span class="line">wget --spider --timeout=1 10.254.132.113</span><br></pre></td></tr></table></figure></p><p><strong>3. 限制连接</strong><br>限制连接，只有设置了<code>label access: true</code>才能访问到 nginx 服务<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;nginx-policy.yaml&lt;&lt;EOF</span><br><span class="line">kind: NetworkPolicy</span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">metadata:</span><br><span class="line">  name: access-nginx</span><br><span class="line">spec:</span><br><span class="line">  podSelector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      run: nginx</span><br><span class="line">  ingress:</span><br><span class="line">  - from:</span><br><span class="line">    - podSelector:</span><br><span class="line">        matchLabels:</span><br><span class="line">          access: <span class="string">"true"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">kubectl create -f nginx-policy.yaml</span><br></pre></td></tr></table></figure></p><p><strong>4. 测试</strong><br>测试应该不能通过<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl run busybox --rm -ti --image=busybox /bin/sh</span><br><span class="line">wget --spider --timeout=1 10.254.132.113</span><br></pre></td></tr></table></figure></p><p><strong>5. 设置label测试</strong><br>测试应该通过<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl run busybox --rm -ti --labels=<span class="string">"access=true"</span> --image=busybox /bin/sh</span><br><span class="line">wget --spider --timeout=1 10.254.132.113</span><br></pre></td></tr></table></figure></p><p><strong>6. 清理</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete deploy nginx</span><br><span class="line">kubectl delete svc nginx</span><br></pre></td></tr></table></figure></p><blockquote><p>配置参考文档<br><a href="http://docs.projectcalico.org/v2.4/getting-started/kubernetes/installation/hosted/index#configuration-options" target="_blank" rel="noopener">http://docs.projectcalico.org/v2.4/getting-started/kubernetes/installation/hosted/index#configuration-options</a></p></blockquote><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="http://docs.projectcalico.org/v2.4/getting-started/kubernetes/installation/" target="_blank" rel="noopener">http://docs.projectcalico.org/v2.4/getting-started/kubernetes/installation/</a></li><li><a href="http://docs.projectcalico.org/v2.4/getting-started/kubernetes/installation/hosted/hosted" target="_blank" rel="noopener">http://docs.projectcalico.org/v2.4/getting-started/kubernetes/installation/hosted/hosted</a></li><li><a href="http://docs.projectcalico.org/v2.4/getting-started/kubernetes/installation/hosted/index#configuration-options" target="_blank" rel="noopener">http://docs.projectcalico.org/v2.4/getting-started/kubernetes/installation/hosted/index#configuration-options</a></li><li><a href="http://docs.projectcalico.org/v2.4/reference/node/configuration" target="_blank" rel="noopener">http://docs.projectcalico.org/v2.4/reference/node/configuration</a></li><li><a href="https://zhuanlan.zhihu.com/p/27699958" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27699958</a></li><li><a href="https://kubernetes.io/docs/tasks/administer-cluster/declare-network-policy/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/administer-cluster/declare-network-policy/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> calico </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装kubernetes-v1.7 master 高可用配置</title>
      <link href="/posts/8/"/>
      <url>/posts/8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本教程紧接 centos7安装kubernetes-v1.7 请参考。<br>所有master节点均安装 kube-apiserver,kube-scheduler,kube-controller-manager组件。<br>为了方便，本教程使用docker相关组件。</p></blockquote><h3 id="配置-haproxy"><a href="#配置-haproxy" class="headerlink" title="配置 haproxy"></a>配置 haproxy</h3><p><strong>1. 拉取镜像</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull haproxy:1.7.8-alpine</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><strong>2. 配置</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/haproxy</span><br><span class="line">cat &gt;/etc/haproxy/haproxy.cfg&lt;&lt;EOF</span><br><span class="line">global</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 info</span><br><span class="line">  maxconn 50000</span><br><span class="line">  uid 99</span><br><span class="line">  gid 99</span><br><span class="line">  <span class="comment">#daemon</span></span><br><span class="line">  nbproc 1</span><br><span class="line">  pidfile haproxy.pid</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 info</span><br><span class="line">  maxconn 50000</span><br><span class="line">  retries 3</span><br><span class="line">  timeout connect 5s</span><br><span class="line">  timeout client 30s</span><br><span class="line">  timeout server 30s</span><br><span class="line">  timeout check 2s</span><br><span class="line"></span><br><span class="line">listen admin_stats</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:1080</span><br><span class="line">  <span class="built_in">log</span> 127.0.0.1 local0 err</span><br><span class="line">  stats refresh 30s</span><br><span class="line">  stats uri     /haproxy-status</span><br><span class="line">  stats realm   Haproxy\ Statistics</span><br><span class="line">  stats auth    will:will</span><br><span class="line">  stats hide-version</span><br><span class="line">  stats admin <span class="keyword">if</span> TRUE</span><br><span class="line"></span><br><span class="line">frontend k8s-https</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:6443</span><br><span class="line">  mode tcp</span><br><span class="line">  <span class="comment">#maxconn 50000</span></span><br><span class="line">  default_backend k8s-https</span><br><span class="line"></span><br><span class="line">frontend k8s-http</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:8080</span><br><span class="line">  mode tcp</span><br><span class="line">  <span class="comment">#maxconn 50000</span></span><br><span class="line">  default_backend k8s-http</span><br><span class="line"></span><br><span class="line">backend k8s-https</span><br><span class="line">  mode tcp</span><br><span class="line">  balance roundrobin</span><br><span class="line">  server lab1 192.168.12.211:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">  server lab2 192.168.12.212:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">  server lab3 192.168.12.213:6443 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line"></span><br><span class="line">backend k8s-http</span><br><span class="line">  mode tcp</span><br><span class="line">  balance roundrobin</span><br><span class="line">  server lab1 192.168.12.211:8080 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">  server lab2 192.168.12.212:8080 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">  server lab3 192.168.12.213:8080 weight 1 maxconn 1000 check inter 2000 rise 2 fall 3</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p><strong>3. 启动</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name my-haproxy \</span><br><span class="line">-v /etc/haproxy:/usr/<span class="built_in">local</span>/etc/haproxy:ro \</span><br><span class="line">-p 6445:6443 \</span><br><span class="line">-p 8090:8080 \</span><br><span class="line">-p 1080:1080 \</span><br><span class="line">--restart always \</span><br><span class="line">haproxy:1.7.8-alpine</span><br></pre></td></tr></table></figure></p><p><strong>4. 查看日志</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs my-haproxy</span><br></pre></td></tr></table></figure></p><h3 id="配置-keepalived"><a href="#配置-keepalived" class="headerlink" title="配置 keepalived"></a>配置 keepalived</h3><p><strong>1. 拉取镜像</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#docker pull osixia/keepalived:1.3.5-1</span></span><br><span class="line">docker pull oberthur/docker-keepalived</span><br></pre></td></tr></table></figure></p><p><strong>2. 配置</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本次使用的镜像不需要配置</span></span><br><span class="line">cat &gt;/etc/keepalived/keepalived.conf&lt;&lt;EOF</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p><strong>3. 启动</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep ip_vs</span><br><span class="line">modprobe ip_vs</span><br><span class="line"></span><br><span class="line"><span class="comment"># master</span></span><br><span class="line">docker run --net=host --<span class="built_in">cap</span>-add=NET_ADMIN -e VIP=192.168.12.215 \</span><br><span class="line">-e VROUTERID=112 -e STATE=BACKUP -e INTERFACE=eth1 -e PRIORITY=100 \</span><br><span class="line">-e AUTHPASS=blah \</span><br><span class="line">--name keepalived0 \</span><br><span class="line">--restart always \</span><br><span class="line">-d oberthur/docker-keepalived</span><br><span class="line"></span><br><span class="line"><span class="comment"># backup</span></span><br><span class="line">docker run --net=host --<span class="built_in">cap</span>-add=NET_ADMIN -e VIP=192.168.12.215 \</span><br><span class="line">-e VROUTERID=112 -e STATE=BACKUP -e INTERFACE=eth1 -e PRIORITY=100 \</span><br><span class="line">-e AUTHPASS=blah \</span><br><span class="line">--name keepalived0 \</span><br><span class="line">--restart always \</span><br><span class="line">-d oberthur/docker-keepalived</span><br></pre></td></tr></table></figure></p><blockquote><p>此时会配置 192.168.12.215 到其中一台机器</p></blockquote><h3 id="配置k8s的注意事项"><a href="#配置k8s的注意事项" class="headerlink" title="配置k8s的注意事项"></a>配置k8s的注意事项</h3><ul><li>把api的地址指向负载均衡的地址 <code>192.168.12.215</code></li><li>在创建kubernetes.pem的时候要把这个 VIP 加入其中</li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>关闭相应的组件查看日志。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">journalctl -f -u kube-controller-manager</span><br><span class="line">journalctl -f -u kube-scheduler</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装配置kubernetes-v1.7</title>
      <link href="/posts/7/"/>
      <url>/posts/7/</url>
      
        <content type="html"><![CDATA[<h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><p>安装kubernetes-v1.7并使用TLS认证，请提前安装好docker环境。本教程使用docker-12.3<br>安装时需要下载的文件都放在<code>/server/software/k8s目录下</code></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="创建-kubernetes-各组件-TLS-加密通信的证书和秘钥"><a href="#创建-kubernetes-各组件-TLS-加密通信的证书和秘钥" class="headerlink" title="创建 kubernetes 各组件 TLS 加密通信的证书和秘钥"></a>创建 kubernetes 各组件 TLS 加密通信的证书和秘钥</h4><p><strong>1. 安装 CFSSL</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv /server/software/k8s</span><br><span class="line"><span class="built_in">cd</span> /server/software/k8s</span><br><span class="line"></span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</span><br><span class="line">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mv cfssl-certinfo_linux-amd64 /usr/<span class="built_in">local</span>/bin/cfssl-certinfo</span><br><span class="line">mv cfssl_linux-amd64 /usr/<span class="built_in">local</span>/bin/cfssl</span><br><span class="line">mv cfssljson_linux-amd64 /usr/<span class="built_in">local</span>/bin/cfssljson</span><br><span class="line"></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/cfssl*</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><strong>2. 创建 CA</strong></p><p>生成配置文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">mkdir /root/ssl</span><br><span class="line"><span class="built_in">cd</span> /root/ssl</span><br><span class="line"><span class="comment">#cfssl print-defaults config &gt; config.json</span></span><br><span class="line"><span class="comment">#cfssl print-defaults csr &gt; csr.json</span></span><br><span class="line">cat &gt;ca-config.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"signing"</span>: &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">      <span class="string">"expiry"</span>: <span class="string">"8760h"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"profiles"</span>: &#123;</span><br><span class="line">      <span class="string">"kubernetes"</span>: &#123;</span><br><span class="line">        <span class="string">"usages"</span>: [</span><br><span class="line">            <span class="string">"signing"</span>,</span><br><span class="line">            <span class="string">"key encipherment"</span>,</span><br><span class="line">            <span class="string">"server auth"</span>,</span><br><span class="line">            <span class="string">"client auth"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"expiry"</span>: <span class="string">"8760h"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;ca-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><blockquote><ul><li>“CN”：Common Name，kube-apiserver 从证书中提取该字段作为请求的用户名 (User Name)；浏览器使用该字段验证网站是否合法；</li><li>“O”：Organization，kube-apiserver 从证书中提取该字段作为请求用户所属的组 (Group)；</li></ul></blockquote><p>生成 CA 证书和私钥<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span><br><span class="line">ls ca*</span><br></pre></td></tr></table></figure></p><p><strong>3. 创建 kubernetes 证书</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置</span></span><br><span class="line">cat &gt;kubernetes-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">    <span class="string">"hosts"</span>: [</span><br><span class="line">      <span class="string">"127.0.0.1"</span>,</span><br><span class="line">      <span class="string">"192.168.12.211"</span>,</span><br><span class="line">      <span class="string">"192.168.12.212"</span>,</span><br><span class="line">      <span class="string">"192.168.12.213"</span>,</span><br><span class="line">      <span class="string">"10.254.0.1"</span>,</span><br><span class="line">      <span class="string">"kubernetes"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default.svc"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default.svc.cluster"</span>,</span><br><span class="line">      <span class="string">"kubernetes.default.svc.cluster.local"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"key"</span>: &#123;</span><br><span class="line">        <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">        <span class="string">"size"</span>: 2048</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"names"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">            <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">            <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">            <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成</span></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \</span><br><span class="line">-profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes</span><br><span class="line">ls kubernetes*</span><br></pre></td></tr></table></figure><blockquote><p>如果 hosts 字段不为空则需要指定授权使用该证书的 IP 或域名列表，由于该证书后续被 etcd<br>集群和 kubernetes master集群使用，所以上面分别指定了 etcd 集群、kubernetes master<br>集群的主机 IP 和 kubernetes 服务的服务 IP（一般是kue-apiserver 指定的<br>service-cluster-ip-range 网段的第一个IP，如 10.254.0.1。<br>如果配置高可用，注意把负载均衡的VIP加入其中。</p></blockquote><p><strong>4. 创建 admin 证书</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置</span></span><br><span class="line">cat &gt;admin-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"admin"</span>,</span><br><span class="line">  <span class="string">"hosts"</span>: [],</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"system:masters"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成</span></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \</span><br><span class="line">-profile=kubernetes admin-csr.json | cfssljson -bare admin</span><br><span class="line">ls admin*</span><br></pre></td></tr></table></figure></p><blockquote><ul><li>后续 kube-apiserver 使用 RBAC 对客户端(如 kubelet、kube-proxy、Pod)请求进行授权；</li><li>kube-apiserver 预定义了一些 RBAC 使用的 RoleBindings，如 cluster-admin 将<br>Group system:masters 与 Rolecluster-admin 绑定，该 Role 授予了调用kube-apiserver<br>的所有 API的权限；</li><li>OU 指定该证书的 Group 为 system:masters，kubelet 使用该证书访问 kube-apiserver<br>时 ，由于证书被 CA 签名，所以认证通过，同时由于证书用户组为经过预授权的 system:masters，<br>所以被授予访问所有 API 的权限；</li></ul></blockquote><p><strong>5. 创建 kube-proxy 证书</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置</span></span><br><span class="line">cat &gt;kube-proxy-csr.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"CN"</span>: <span class="string">"system:kube-proxy"</span>,</span><br><span class="line">  <span class="string">"hosts"</span>: [],</span><br><span class="line">  <span class="string">"key"</span>: &#123;</span><br><span class="line">    <span class="string">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="string">"size"</span>: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="string">"ST"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"L"</span>: <span class="string">"BeiJing"</span>,</span><br><span class="line">      <span class="string">"O"</span>: <span class="string">"k8s"</span>,</span><br><span class="line">      <span class="string">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成</span></span><br><span class="line">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \</span><br><span class="line">-profile=kubernetes  kube-proxy-csr.json | cfssljson -bare kube-proxy</span><br><span class="line">ls kube-proxy*</span><br></pre></td></tr></table></figure></p><blockquote><ul><li>CN 指定该证书的 User 为 system:kube-proxy；</li><li>kube-apiserver 预定义的 RoleBinding cluster-admin 将User system:kube-proxy<br>与 Role system:node-proxier 绑定，该 Role 授予了调用 kube-apiserver Proxy<br>相关 API 的权限；</li></ul></blockquote><p><strong>6. 校验证书</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfssl-certinfo -cert kubernetes.pem</span><br></pre></td></tr></table></figure></p><p><strong>7. 分发证书</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制证书</span></span><br><span class="line">mkdir -p /etc/kubernetes/ssl</span><br><span class="line">cp *.pem /etc/kubernetes/ssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy到其他机器</span></span><br><span class="line">ssh lab2 <span class="string">'mkdir -pv /etc/kubernetes'</span></span><br><span class="line">scp -r /etc/kubernetes/ssl lab2:/etc/kubernetes/ssl</span><br></pre></td></tr></table></figure></p><h4 id="创建-kubeconfig-文件"><a href="#创建-kubeconfig-文件" class="headerlink" title="创建 kubeconfig 文件"></a>创建 kubeconfig 文件</h4><blockquote><p>这一步骤的操作只需要在master节点上操作，然后把配置文件分发到其他node节点即可。</p></blockquote><p><strong>1. 安装 kubectl</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /server/software/k8s</span><br><span class="line">wget https://storage.googleapis.com/kubernetes-release/release/v1.7.2/bin/linux/amd64/kubectl</span><br><span class="line">chmod +x kubectl</span><br><span class="line">mv kubectl /usr/local/bin</span><br><span class="line">kubectl version</span><br></pre></td></tr></table></figure></p><p><strong>2. 创建 TLS Bootstrapping Token</strong></p><p>kubelet、kube-proxy 等 Node 机器上的进程与 Master 机器的 kube-apiserver 进程通信时<br>需要认证和授权；kubernetes 1.4 开始支持由 kube-apiserver 为客户端生成 TLS 证书的<br>TLS Bootstrapping 功能，这样就不需要为每个客户端生成证书了；该功能当前仅支持为 kubelet<br>生成证书。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> BOOTSTRAP_TOKEN=$(head -c 16 /dev/urandom | od -An -t x | tr -d <span class="string">' '</span>)</span><br><span class="line">cat &gt; token.csv &lt;&lt;EOF</span><br><span class="line"><span class="variable">$&#123;BOOTSTRAP_TOKEN&#125;</span>,kubelet-bootstrap,10001,<span class="string">"system:kubelet-bootstrap"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment">#将token.csv发到所有机器Master的 /etc/kubernetes/ 目录</span></span><br><span class="line">cp token.csv /etc/kubernetes</span><br><span class="line">scp token.csv lab2:/etc/kubernetes</span><br></pre></td></tr></table></figure><p><strong>3. 创建 kubelet bootstrapping kubeconfig 文件</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/kubernetes</span><br><span class="line"><span class="built_in">export</span> KUBE_APISERVER=<span class="string">"https://192.168.12.211:6443"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置集群参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置客户端认证参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials kubelet-bootstrap \</span><br><span class="line">  --token=<span class="variable">$&#123;BOOTSTRAP_TOKEN&#125;</span> \</span><br><span class="line">  --kubeconfig=bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置上下文参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-context default \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=kubelet-bootstrap \</span><br><span class="line">  --kubeconfig=bootstrap.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认上下文</span></span><br><span class="line">kubectl config use-context default --kubeconfig=bootstrap.kubeconfig</span><br></pre></td></tr></table></figure></p><p><strong>4. 创建 kube-proxy kubeconfig 文件</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> KUBE_APISERVER=<span class="string">"https://192.168.12.211:6443"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置集群参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span> \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置客户端认证参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials kube-proxy \</span><br><span class="line">  --client-certificate=/etc/kubernetes/ssl/kube-proxy.pem \</span><br><span class="line">  --client-key=/etc/kubernetes/ssl/kube-proxy-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置上下文参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-context default \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=kube-proxy \</span><br><span class="line">  --kubeconfig=kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认上下文</span></span><br><span class="line">kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig</span><br></pre></td></tr></table></figure></p><p><strong>5. 分发 kubeconfig 文件</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp bootstrap.kubeconfig kube-proxy.kubeconfig /etc/kubernetes/</span><br><span class="line">scp bootstrap.kubeconfig kube-proxy.kubeconfig lab2:/etc/kubernetes/</span><br></pre></td></tr></table></figure></p><h4 id="创建高可用-etcd-集群"><a href="#创建高可用-etcd-集群" class="headerlink" title="创建高可用 etcd 集群"></a>创建高可用 etcd 集群</h4><blockquote><ul><li>本次实验使用lab1,lab2,lab3组成etcd集成，lab1为k8s-master节点，<br>lab2,lab3为k8s-node节点。</li><li>在集群启动的时候尽量一起启动。因为ca里配置是使用的ip，所有在这里<br>也全要使用ip地址。否则会无法识别ca，报错，无法成功创建集群。</li></ul></blockquote><p><strong>1. 安装</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /server/software/k8s</span><br><span class="line">wget https://github.com/coreos/etcd/releases/download/v3.2.4/etcd-v3.2.4-linux-amd64.tar.gz</span><br><span class="line">tar xf etcd-v3.2.4-linux-amd64.tar.gz</span><br><span class="line">cd etcd-v3.2.4-linux-amd64 &amp;&amp; cp etcd etcdctl /usr/local/bin</span><br><span class="line">etcdctl -v</span><br></pre></td></tr></table></figure></p><p><strong>2. 创建 etcd 的 systemd unit 文件</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ETCD_NAME=lab1</span><br><span class="line"><span class="built_in">export</span> INTERNAL_IP=$(hostname -i)</span><br><span class="line">mkdir -pv /data/etcd</span><br><span class="line">cat &gt; etcd.service &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Server</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">Documentation=https://github.com/coreos</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">WorkingDirectory=/data/etcd</span><br><span class="line">EnvironmentFile=-/etc/etcd/etcd.conf</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/etcd \\</span><br><span class="line">  --name <span class="variable">$&#123;ETCD_NAME&#125;</span> \\</span><br><span class="line">  --cert-file=/etc/kubernetes/ssl/kubernetes.pem \\</span><br><span class="line">  --key-file=/etc/kubernetes/ssl/kubernetes-key.pem \\</span><br><span class="line">  --peer-cert-file=/etc/kubernetes/ssl/kubernetes.pem \\</span><br><span class="line">  --peer-key-file=/etc/kubernetes/ssl/kubernetes-key.pem \\</span><br><span class="line">  --trusted-ca-file=/etc/kubernetes/ssl/ca.pem \\</span><br><span class="line">  --peer-trusted-ca-file=/etc/kubernetes/ssl/ca.pem \\</span><br><span class="line">  --initial-advertise-peer-urls https://<span class="variable">$&#123;INTERNAL_IP&#125;</span>:2380 \\</span><br><span class="line">  --listen-peer-urls https://<span class="variable">$&#123;INTERNAL_IP&#125;</span>:2380 \\</span><br><span class="line">  --listen-client-urls https://<span class="variable">$&#123;INTERNAL_IP&#125;</span>:2379,https://127.0.0.1:2379 \\</span><br><span class="line">  --advertise-client-urls https://<span class="variable">$&#123;INTERNAL_IP&#125;</span>:2379 \\</span><br><span class="line">  --initial-cluster-token my-etcd-token \\</span><br><span class="line">  --initial-cluster lab1=https://192.168.12.211:2380,lab2=https://192.168.12.212:2380,lab3=https://192.168.12.213:2380 \\</span><br><span class="line">  --initial-cluster-state new \\</span><br><span class="line">  --data-dir=/data/etcd</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p><strong>3. 启动</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mv etcd.service /etc/systemd/system/</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> etcd</span><br><span class="line">systemctl start etcd</span><br><span class="line">systemctl status etcd</span><br></pre></td></tr></table></figure></p><p><strong>4. 测试</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">etcdctl --endpoints <span class="string">"https://127.0.0.1:2379"</span> \</span><br><span class="line">  --ca-file=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --cert-file=/etc/kubernetes/ssl/kubernetes.pem \</span><br><span class="line">  --key-file=/etc/kubernetes/ssl/kubernetes-key.pem \</span><br><span class="line">  cluster-health</span><br></pre></td></tr></table></figure></p><h4 id="配置-kubectl-命令行工具"><a href="#配置-kubectl-命令行工具" class="headerlink" title="配置 kubectl 命令行工具"></a>配置 kubectl 命令行工具</h4><blockquote><p>只需要在需要连接api-server的client上配置。主要用来操作集群。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> KUBE_APISERVER=<span class="string">"https://192.168.12.211:6443"</span></span><br><span class="line"><span class="comment"># 设置集群参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/etc/kubernetes/ssl/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=<span class="variable">$&#123;KUBE_APISERVER&#125;</span></span><br><span class="line"><span class="comment"># 设置客户端认证参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-credentials admin \</span><br><span class="line">  --client-certificate=/etc/kubernetes/ssl/admin.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --client-key=/etc/kubernetes/ssl/admin-key.pem</span><br><span class="line"><span class="comment"># 设置上下文参数</span></span><br><span class="line">kubectl config <span class="built_in">set</span>-context kubernetes \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=admin</span><br><span class="line"><span class="comment"># 设置默认上下文</span></span><br><span class="line">kubectl config use-context kubernetes</span><br></pre></td></tr></table></figure><blockquote><p>生成的 kubeconfig 被保存到 ~/.kube/config 文件</p></blockquote><h4 id="部署高可用-kubernetes-master-集群"><a href="#部署高可用-kubernetes-master-集群" class="headerlink" title="部署高可用 kubernetes master 集群"></a>部署高可用 kubernetes master 集群</h4><blockquote><ul><li>kube-scheduler 、 kube-controller-manager 和 kube-apiserver 三者的功能紧密相关；<br>要部署在同台服务器。</li><li>同时只能有一个 kube-scheduler 、 kube-controller-manager 进程处于工作状态，<br>如果运行多个，则需要通过选举产生一个 leader；</li><li>多个master节点可以直接部署，多个master使用同一个etcd集成即可。然后把kube-apiserver<br>通过负载均衡与其他组件通信。这样就组成了高可用 master 集群。</li><li>具体可以参考<code>centos7安装kubernetes-v1.7 master 高可用配置</code>教程</li></ul></blockquote><p><strong>1. 下载安装</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /server/software/k8s</span><br><span class="line">wget https://storage.googleapis.com/kubernetes-release/release/v1.7.2/bin/linux/amd64/kube-apiserver</span><br><span class="line">wget https://storage.googleapis.com/kubernetes-release/release/v1.7.2/bin/linux/amd64/kube-controller-manager</span><br><span class="line">wget https://storage.googleapis.com/kubernetes-release/release/v1.7.2/bin/linux/amd64/kube-scheduler</span><br><span class="line">wget https://storage.googleapis.com/kubernetes-release/release/v1.7.2/bin/linux/amd64/kubectl</span><br><span class="line">wget https://storage.googleapis.com/kubernetes-release/release/v1.7.2/bin/linux/amd64/kubelet</span><br><span class="line">wget https://storage.googleapis.com/kubernetes-release/release/v1.7.2/bin/linux/amd64/kube-proxy</span><br><span class="line"></span><br><span class="line">chmod +x kube-apiserver kube-controller-manager kubectl kubelet kube-proxy kube-scheduler</span><br><span class="line">\cp kube-apiserver kube-controller-manager kubectl kubelet kube-proxy kube-scheduler /usr/<span class="built_in">local</span>/bin</span><br><span class="line">scp kube-apiserver kube-controller-manager kubectl kubelet kube-proxy kube-scheduler lab2:/usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure></p><p><strong>2. 配置和启动 kube-apiserver</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/usr/lib/systemd/system/kube-apiserver.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes API Service</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line">After=etcd.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/apiserver</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/kube-apiserver \\</span><br><span class="line">    \<span class="variable">$KUBE_LOGTOSTDERR</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_LOG_LEVEL</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_ETCD_SERVERS</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_API_ADDRESS</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_API_PORT</span> \\</span><br><span class="line">    \<span class="variable">$KUBELET_PORT</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_ALLOW_PRIV</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_SERVICE_ADDRESSES</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_ADMISSION_CONTROL</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_API_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">Type=notify</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 该配置文件同时被kube-apiserver、kube-controller-manager、</span></span><br><span class="line"><span class="comment"># kube-scheduler、kubelet、kube-proxy使用。</span></span><br><span class="line">cat &gt;/etc/kubernetes/config&lt;&lt;EOF</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># kubernetes system config</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following values are used to configure various aspects of all</span></span><br><span class="line"><span class="comment"># kubernetes services, including</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   kube-apiserver.service</span></span><br><span class="line"><span class="comment">#   kube-controller-manager.service</span></span><br><span class="line"><span class="comment">#   kube-scheduler.service</span></span><br><span class="line"><span class="comment">#   kubelet.service</span></span><br><span class="line"><span class="comment">#   kube-proxy.service</span></span><br><span class="line"><span class="comment"># logging to stderr means we get it in the systemd journal</span></span><br><span class="line">KUBE_LOGTOSTDERR=<span class="string">"--logtostderr=true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># journal message level, 0 is debug</span></span><br><span class="line">KUBE_LOG_LEVEL=<span class="string">"--v=0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Should this cluster be allowed to run privileged docker containers</span></span><br><span class="line">KUBE_ALLOW_PRIV=<span class="string">"--allow-privileged=true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># How the controller-manager, scheduler, and proxy find the apiserver</span></span><br><span class="line"><span class="comment">#KUBE_MASTER="--master=http://192.168.12.211:8080"</span></span><br><span class="line">KUBE_MASTER=<span class="string">"--master=http://192.168.12.211:8080"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;/etc/kubernetes/apiserver&lt;&lt;EOF</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">## kubernetes system config</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## The following values are used to configure the kube-apiserver</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## The address on the local server to listen to.</span></span><br><span class="line"><span class="comment">#KUBE_API_ADDRESS="--insecure-bind-address=192.168.12.211"</span></span><br><span class="line">KUBE_API_ADDRESS=<span class="string">"--advertise-address=192.168.12.211 --bind-address=192.168.12.211 --insecure-bind-address=192.168.12.211"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## The port on the local server to listen on.</span></span><br><span class="line"><span class="comment">#KUBE_API_PORT="--port=8080"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## Port minions listen on</span></span><br><span class="line"><span class="comment">#KUBELET_PORT="--kubelet-port=10250"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## Comma separated list of nodes in the etcd cluster</span></span><br><span class="line">KUBE_ETCD_SERVERS=<span class="string">"--etcd-servers=https://192.168.12.211:2379,192.168.12.212:2379,192.168.12.213:2379"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## Address range to use for services</span></span><br><span class="line">KUBE_SERVICE_ADDRESSES=<span class="string">"--service-cluster-ip-range=10.254.0.0/16"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## default admission control policies</span></span><br><span class="line">KUBE_ADMISSION_CONTROL=<span class="string">"--admission-control=ServiceAccount,NamespaceLifecycle,NamespaceExists,LimitRanger,ResourceQuota"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## Add your own!</span></span><br><span class="line">KUBE_API_ARGS=<span class="string">"--authorization-mode=RBAC --runtime-config=rbac.authorization.k8s.io/v1beta1 --kubelet-https=true --experimental-bootstrap-token-auth --token-auth-file=/etc/kubernetes/token.csv --service-node-port-range=30000-32767 --tls-cert-file=/etc/kubernetes/ssl/kubernetes.pem --tls-private-key-file=/etc/kubernetes/ssl/kubernetes-key.pem --client-ca-file=/etc/kubernetes/ssl/ca.pem --service-account-key-file=/etc/kubernetes/ssl/ca-key.pem --etcd-cafile=/etc/kubernetes/ssl/ca.pem --etcd-certfile=/etc/kubernetes/ssl/kubernetes.pem --etcd-keyfile=/etc/kubernetes/ssl/kubernetes-key.pem --enable-swagger-ui=true --apiserver-count=3 --audit-log-maxage=30 --audit-log-maxbackup=3 --audit-log-maxsize=100 --audit-log-path=/var/lib/audit.log --event-ttl=1h"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-apiserver</span><br><span class="line">systemctl start kube-apiserver</span><br><span class="line">systemctl status kube-apiserver</span><br></pre></td></tr></table></figure></p><p><strong>2. 配置和启动 kube-controller-manager</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/usr/lib/systemd/system/kube-controller-manager.service&lt;&lt;EOF</span><br><span class="line">Description=Kubernetes Controller Manager</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/controller-manager</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/kube-controller-manager \\</span><br><span class="line">    \<span class="variable">$KUBE_LOGTOSTDERR</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_LOG_LEVEL</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_MASTER</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_CONTROLLER_MANAGER_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;/etc/kubernetes/controller-manager&lt;&lt;EOF</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># The following values are used to configure the kubernetes controller-manager</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># defaults from config and apiserver should be adequate</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add your own!</span></span><br><span class="line">KUBE_CONTROLLER_MANAGER_ARGS=<span class="string">"--address=127.0.0.1 --service-cluster-ip-range=10.254.0.0/16 --cluster-name=kubernetes --cluster-signing-cert-file=/etc/kubernetes/ssl/ca.pem --cluster-signing-key-file=/etc/kubernetes/ssl/ca-key.pem  --service-account-private-key-file=/etc/kubernetes/ssl/ca-key.pem --root-ca-file=/etc/kubernetes/ssl/ca.pem --leader-elect=true"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-controller-manager</span><br><span class="line">systemctl start kube-controller-manager</span><br><span class="line">systemctl status kube-controller-manager</span><br></pre></td></tr></table></figure></p><p><strong>3. 配置和启动 kube-scheduler</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/usr/lib/systemd/system/kube-scheduler.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Scheduler Plugin</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/scheduler</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/kube-scheduler \\</span><br><span class="line">            \<span class="variable">$KUBE_LOGTOSTDERR</span> \\</span><br><span class="line">            \<span class="variable">$KUBE_LOG_LEVEL</span> \\</span><br><span class="line">            \<span class="variable">$KUBE_MASTER</span> \\</span><br><span class="line">            \<span class="variable">$KUBE_SCHEDULER_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;/etc/kubernetes/scheduler&lt;&lt;EOF</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># kubernetes scheduler config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># default config should be adequate</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add your own!</span></span><br><span class="line">KUBE_SCHEDULER_ARGS=<span class="string">"--leader-elect=true --address=127.0.0.1"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-scheduler</span><br><span class="line">systemctl start kube-scheduler</span><br><span class="line">systemctl status kube-scheduler</span><br></pre></td></tr></table></figure></p><p><strong>4. 验证节点</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get componentstatuses</span><br></pre></td></tr></table></figure></p><blockquote><p>以上3个组件在3个master节点安装运行就可以组成高可用。</p></blockquote><h4 id="部署kubernetes-node节点"><a href="#部署kubernetes-node节点" class="headerlink" title="部署kubernetes node节点"></a>部署kubernetes node节点</h4><p><strong>1. 安装配置Flanneld</strong></p><blockquote><p>本教程使用手动配置的方法，也可以使用官方的yml文件直接使用k8s部署。<br><a href="https://github.com/coreos/flannel/blob/master/Documentation/kube-flannel.yml" target="_blank" rel="noopener">https://github.com/coreos/flannel/blob/master/Documentation/kube-flannel.yml</a></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /server/software/k8s</span><br><span class="line">wget https://github.com/coreos/flannel/releases/download/v0.8.0/flannel-v0.8.0-linux-amd64.tar.gz</span><br><span class="line">tar xf flannel-v0.8.0-linux-amd64.tar.gz</span><br><span class="line">cp flanneld mk-docker-opts.sh /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">scp flanneld mk-docker-opts.sh lab2:/usr/<span class="built_in">local</span>/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">cat &gt;/usr/lib/systemd/system/flanneld.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Flanneld overlay address etcd agent</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=etcd.service</span><br><span class="line">Before=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=/etc/sysconfig/flanneld</span><br><span class="line">EnvironmentFile=-/etc/sysconfig/docker-network</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/flanneld \<span class="variable">$FLANNELD_ARGS</span></span><br><span class="line">ExecStartPost=/usr/<span class="built_in">local</span>/bin/mk-docker-opts.sh -k DOCKER_NETWORK_OPTIONS -d /run/flannel/docker</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">RequiredBy=docker.service</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;/etc/sysconfig/flanneld&lt;&lt;EOF</span><br><span class="line">FLANNELD_ARGS=<span class="string">'--etcd-endpoints=https://192.168.12.211:2379,https://192.168.12.212:2379,https://192.168.12.213:2379 --etcd-cafile=/etc/kubernetes/ssl/ca.pem --etcd-certfile=/etc/kubernetes/ssl/kubernetes.pem   --etcd-keyfile=/etc/kubernetes/ssl/kubernetes-key.pem --etcd-prefix=/k8s/network --iface=eth1'</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="comment"># 如果你要使用 host-gw 模式，可以直接将vxlan改成 host-gw 即可。</span></span><br><span class="line">etcdctl --endpoints <span class="string">"https://127.0.0.1:2379"</span>   \</span><br><span class="line">--ca-file=/etc/kubernetes/ssl/ca.pem   \</span><br><span class="line">--cert-file=/etc/kubernetes/ssl/kubernetes.pem   \</span><br><span class="line">--key-file=/etc/kubernetes/ssl/kubernetes-key.pem \</span><br><span class="line"><span class="built_in">set</span> /k8s/network/config <span class="string">'&#123;"Network":"10.1.0.0/16", "Backend": &#123;"Type": "vxlan"&#125;&#125;'</span></span><br><span class="line"><span class="comment">#set /k8s/network/config '&#123;"Network":"10.1.0.0/16", "Backend": &#123;"Type": "host-gw"&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> flanneld</span><br><span class="line">systemctl start flanneld</span><br><span class="line">systemctl status flanneld</span><br></pre></td></tr></table></figure><p><strong>3. 重启docker</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改docker配置</span></span><br><span class="line">mk-docker-opts.sh -k DOCKER_NETWORK_OPTIONS -d /run/flannel/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改docker启动文件</span></span><br><span class="line">cat &gt;/usr/lib/systemd/system/docker.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line"><span class="comment"># the default is not to use systemd for cgroups because the delegate issues still</span></span><br><span class="line"><span class="comment"># exists and systemd currently does not support the cgroup feature set required</span></span><br><span class="line"><span class="comment"># for containers run by docker</span></span><br><span class="line">EnvironmentFile=-/run/flannel/docker</span><br><span class="line">ExecStart=/usr/bin/dockerd \<span class="variable">$DOCKER_NETWORK_OPTIONS</span> --registry-mirror=https://tfhzn46h.mirror.aliyuncs.com</span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line"><span class="comment"># Having non-zero Limit*s causes performance problems due to accounting overhead</span></span><br><span class="line"><span class="comment"># in the kernel. We recommend using cgroups to do container-local accounting.</span></span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line"><span class="comment"># Uncomment TasksMax if your systemd version supports it.</span></span><br><span class="line"><span class="comment"># Only systemd 226 and above support this version.</span></span><br><span class="line"><span class="comment">#TasksMax=infinity</span></span><br><span class="line">TimeoutStartSec=0</span><br><span class="line"><span class="comment"># set delegate yes so that systemd does not reset the cgroups of docker containers</span></span><br><span class="line">Delegate=yes</span><br><span class="line"><span class="comment"># kill only the docker process, not all processes in the cgroup</span></span><br><span class="line">KillMode=process</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">systemctl status docker</span><br><span class="line">ps -ef | grep docker</span><br></pre></td></tr></table></figure></p><p><strong>4. 安装配置kubelet</strong></p><p>kubelet 启动时向 kube-apiserver 发送 TLS bootstrapping 请求，需要先将 bootstrap token 文件中的 kubelet-bootstrap 用户赋予 system:node-bootstrapper cluster 角色(role)， 然后 kubelet 才能有权限创建认证请求(certificate signing requests)：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --user=kubelet-bootstrap 是在 /etc/kubernetes/token.csv 文件中指定的用户名，同时也写入了/etc/kubernetes/bootstrap.kubeconfig 文件</span></span><br><span class="line"><span class="comment"># 此步骤在master上操作</span></span><br><span class="line"><span class="built_in">cd</span> /etc/kubernetes</span><br><span class="line">kubectl create clusterrolebinding kubelet-bootstrap \</span><br><span class="line">  --clusterrole=system:node-bootstrapper \</span><br><span class="line">  --user=kubelet-bootstrap</span><br><span class="line"></span><br><span class="line">cat &gt;/usr/lib/systemd/system/kubelet.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kubelet Server</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">WorkingDirectory=/data/kubelet</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/kubelet</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/kubelet \\</span><br><span class="line">            \<span class="variable">$KUBE_LOGTOSTDERR</span> \\</span><br><span class="line">            \<span class="variable">$KUBE_LOG_LEVEL</span> \\</span><br><span class="line">            \<span class="variable">$KUBELET_API_SERVER</span> \\</span><br><span class="line">            \<span class="variable">$KUBELET_ADDRESS</span> \\</span><br><span class="line">            \<span class="variable">$KUBELET_PORT</span> \\</span><br><span class="line">            \<span class="variable">$KUBELET_HOSTNAME</span> \\</span><br><span class="line">            \<span class="variable">$KUBE_ALLOW_PRIV</span> \\</span><br><span class="line">            \<span class="variable">$KUBELET_POD_INFRA_CONTAINER</span> \\</span><br><span class="line">            \<span class="variable">$KUBELET_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;/etc/kubernetes/config&lt;&lt;EOF</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># kubernetes system config</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following values are used to configure various aspects of all</span></span><br><span class="line"><span class="comment"># kubernetes services, including</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   kube-apiserver.service</span></span><br><span class="line"><span class="comment">#   kube-controller-manager.service</span></span><br><span class="line"><span class="comment">#   kube-scheduler.service</span></span><br><span class="line"><span class="comment">#   kubelet.service</span></span><br><span class="line"><span class="comment">#   kube-proxy.service</span></span><br><span class="line"><span class="comment"># logging to stderr means we get it in the systemd journal</span></span><br><span class="line">KUBE_LOGTOSTDERR=<span class="string">"--logtostderr=true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># journal message level, 0 is debug</span></span><br><span class="line">KUBE_LOG_LEVEL=<span class="string">"--v=0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Should this cluster be allowed to run privileged docker containers</span></span><br><span class="line">KUBE_ALLOW_PRIV=<span class="string">"--allow-privileged=true"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># How the controller-manager, scheduler, and proxy find the apiserver</span></span><br><span class="line"><span class="comment">#KUBE_MASTER="--master=http://192.168.12.211:8080"</span></span><br><span class="line">KUBE_MASTER=<span class="string">"--master=http://192.168.12.211:8080"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意修改相关ip</span></span><br><span class="line">cat &gt;/etc/kubernetes/kubelet&lt;&lt;EOF</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">## kubernetes kubelet (minion) config</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## The address for the info server to serve on (set to 0.0.0.0 or "" for all interfaces)</span></span><br><span class="line">KUBELET_ADDRESS=<span class="string">"--address=192.168.12.212"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## The port for the info server to serve on</span></span><br><span class="line"><span class="comment">#KUBELET_PORT="--port=10250"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## You may leave this blank to use the actual hostname</span></span><br><span class="line">KUBELET_HOSTNAME=<span class="string">"--hostname-override=192.168.12.212"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## location of the api-server</span></span><br><span class="line">KUBELET_API_SERVER=<span class="string">"--api-servers=http://192.168.12.211:8080"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## pod infrastructure container</span></span><br><span class="line"><span class="comment">#KUBELET_POD_INFRA_CONTAINER="--pod-infra-container-image=sz-pg-oam-docker-hub-001.tendcloud.com/library/pod-infrastructure:rhel7"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## Add your own!</span></span><br><span class="line">KUBELET_ARGS=<span class="string">"--cgroup-driver=cgroupfs --cluster-dns=10.254.0.2 --experimental-bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig --kubeconfig=/etc/kubernetes/kubelet.kubeconfig --require-kubeconfig --cert-dir=/etc/kubernetes/ssl --cluster-domain=cluster.local. --hairpin-mode promiscuous-bridge --serialize-image-pulls=false"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">mkdir -pv /data/kubelet</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br><span class="line">systemctl start kubelet</span><br><span class="line">systemctl status kubelet</span><br></pre></td></tr></table></figure><p><strong>5. 通过 kublet 的 TLS 证书请求</strong><br>kubelet 首次启动时向 kube-apiserver 发送证书签名请求，必须通过后 kubernetes 系统才会<br>将该 Node 加入到集群。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get csr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过</span></span><br><span class="line">kubectl certificate approve csr-2b308</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在node节点查看生成的文件</span></span><br><span class="line">ls -l /etc/kubernetes/kubelet.kubeconfig</span><br><span class="line">ls -l /etc/kubernetes/ssl/kubelet*</span><br></pre></td></tr></table></figure></p><p><strong>6. 配置 kube-proxy</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/usr/lib/systemd/system/kube-proxy.service&lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kube-Proxy Server</span><br><span class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/config</span><br><span class="line">EnvironmentFile=-/etc/kubernetes/proxy</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/bin/kube-proxy \\</span><br><span class="line">    \<span class="variable">$KUBE_LOGTOSTDERR</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_LOG_LEVEL</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_MASTER</span> \\</span><br><span class="line">    \<span class="variable">$KUBE_PROXY_ARGS</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">cat &gt;/etc/kubernetes/proxy&lt;&lt;EOF</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment"># kubernetes proxy config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># default config should be adequate</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add your own!</span></span><br><span class="line">KUBE_PROXY_ARGS=<span class="string">"--bind-address=192.168.12.212 --hostname-override=192.168.12.212 --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig --cluster-cidr=10.254.0.0/16"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> kube-proxy</span><br><span class="line">systemctl start kube-proxy</span><br><span class="line">systemctl status kube-proxy</span><br></pre></td></tr></table></figure></p><p><strong>7. 验证测试</strong><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取node</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动deployment</span></span><br><span class="line">kubectl run nginx --replicas=2 --labels=<span class="string">"run=load-balancer-example"</span> --image=nginx:1.9  --port=80</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露服务</span></span><br><span class="line">kubectl expose deployment nginx --<span class="built_in">type</span>=NodePort --name=example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">kubectl get pods</span><br><span class="line">kubectl describe svc example-service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">curl <span class="string">"10.254.142.220:80"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问NodePort</span></span><br><span class="line">http://192.168.12.212:31075/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">kubectl delete svc example-service</span><br><span class="line">kubectl delete deploy nginx</span><br></pre></td></tr></table></figure></p><blockquote><p>如果无法拉取镜像手动拉取<br>docker pull pigletfly/pause-amd64:3.0<br>docker tag pigletfly/pause-amd64:3.0 gcr.io/google_containers/pause-amd64:3.0</p></blockquote><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://www.kubernetes.org.cn/1870.html" target="_blank" rel="noopener">https://www.kubernetes.org.cn/1870.html</a></li><li><a href="https://github.com/rootsongjc/kubernetes-handbook" target="_blank" rel="noopener">https://github.com/rootsongjc/kubernetes-handbook</a></li><li><a href="https://github.com/opsnull/follow-me-install-kubernetes-cluster" target="_blank" rel="noopener">https://github.com/opsnull/follow-me-install-kubernetes-cluster</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang Web 框架 Echo 简单使用教程</title>
      <link href="/posts/6/"/>
      <url>/posts/6/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Echo是一个高性能，灵活可扩展，极简的 go web 框架。支持多种格式的响应如：json、xml、html等。<br>中间件众多，常用组件都能找到如：HTTPS、HTTP/2、WebSocket、JWT、Gzip、CORS、CSRF。天然支持<br>RESTful API 开发，使用其做API开发异常的方便，同时支持使用模板，方便MVC模式的开发。</p><h3 id="安装-Echo"><a href="#安装-Echo" class="headerlink" title="安装 Echo"></a>安装 Echo</h3><blockquote><p>如果没有翻墙，先配置如下的hosts<br>    <code>216.58.200.33 go.googlesource.com golang.org www.golang.org</code></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/labstack/<span class="built_in">echo</span></span><br><span class="line">go get github.com/labstack/<span class="built_in">echo</span>/middleware</span><br></pre></td></tr></table></figure><h3 id="Hello-World-测试"><a href="#Hello-World-测试" class="headerlink" title="Hello World 测试"></a>Hello World 测试</h3><p>写入如下内容到<code>hello.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">e := echo.New()</span><br><span class="line">e.GET(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.String(http.StatusOK, <span class="string">"Hello, World!"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">e.Logger.Fatal(e.Start(<span class="string">":1323"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>运行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run hello.go</span><br></pre></td></tr></table></figure></p><p>访问<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s http://127.0.0.1:1323/</span><br></pre></td></tr></table></figure></p><h3 id="JSON-格式输出响应内容"><a href="#JSON-格式输出响应内容" class="headerlink" title="JSON 格式输出响应内容"></a>JSON 格式输出响应内容</h3><p>写入如下内容到<code>json.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span> <span class="string">`json:"name" xml:"name" form:"name" query:"name"`</span></span><br><span class="line">Email <span class="keyword">string</span> <span class="string">`json:"email" xml:"email" form:"email" query:"email"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">e := echo.New()</span><br><span class="line">e.GET(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">u := <span class="built_in">new</span>(User)</span><br><span class="line">u.Name = <span class="string">"will"</span></span><br><span class="line">u.Email = <span class="string">"will@will.com"</span></span><br><span class="line"><span class="keyword">return</span> c.JSON(http.StatusOK, u)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">e.Logger.Fatal(e.Start(<span class="string">":1323"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run json.go</span><br></pre></td></tr></table></figure></p><p>访问<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s http://127.0.0.1:1323/</span><br></pre></td></tr></table></figure></p><p>更多输出内容格式（xml、json、file、html、string、attachment、redirect等）参考如下官方文档<br><a href="https://echo.labstack.com/guide/response" target="_blank" rel="noopener">https://echo.labstack.com/guide/response</a></p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由</span></span><br><span class="line">e.POST(<span class="string">"/users"</span>, saveUser)</span><br><span class="line">e.GET(<span class="string">"/users/:id"</span>, getUser)</span><br><span class="line">e.PUT(<span class="string">"/users/:id"</span>, updateUser)</span><br><span class="line">e.DELETE(<span class="string">"/users/:id"</span>, deleteUser)</span><br><span class="line"></span><br><span class="line"><span class="comment">// URI参数</span></span><br><span class="line"><span class="comment">// e.GET("/users/:id", getUser)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getUser</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="comment">// User ID from path `users/:id`</span></span><br><span class="line">  id := c.Param(<span class="string">"id"</span>)</span><br><span class="line"><span class="keyword">return</span> c.String(http.StatusOK, id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="URI查询参数"><a href="#URI查询参数" class="headerlink" title="URI查询参数"></a>URI查询参数</h3><p><code>/show?team=x-men&amp;member=wolverine</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//e.GET("/show", show)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// Get team and member from the query string</span></span><br><span class="line">team := c.QueryParam(<span class="string">"team"</span>)</span><br><span class="line">member := c.QueryParam(<span class="string">"member"</span>)</span><br><span class="line"><span class="keyword">return</span> c.String(http.StatusOK, <span class="string">"team:"</span> + team + <span class="string">", member:"</span> + member)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="从FORM接受参数"><a href="#从FORM接受参数" class="headerlink" title="从FORM接受参数"></a>从FORM接受参数</h3><p><code>POST /save</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// e.POST("/save", save)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">save</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// Get name and email</span></span><br><span class="line">name := c.FormValue(<span class="string">"name"</span>)</span><br><span class="line">email := c.FormValue(<span class="string">"email"</span>)</span><br><span class="line">avatar, err := c.FormFile(<span class="string">"avatar"</span>)</span><br><span class="line"><span class="keyword">return</span> c.String(http.StatusOK, <span class="string">"name:"</span> + name + <span class="string">", email:"</span> + email)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="REST-API-示例"><a href="#REST-API-示例" class="headerlink" title="REST API 示例"></a>REST API 示例</h3><p>写入如下内容到<code>rest.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Id    <span class="keyword">string</span> <span class="string">`json:"id" form:"id"`</span></span><br><span class="line">Name  <span class="keyword">string</span> <span class="string">`json:"name" form:"name"`</span></span><br><span class="line">Email <span class="keyword">string</span> <span class="string">`json:"email" form:"email"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveUser</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">u := <span class="built_in">new</span>(User)</span><br><span class="line">u.Name = c.FormValue(<span class="string">"name"</span>)</span><br><span class="line">u.Email = c.FormValue(<span class="string">"email"</span>)</span><br><span class="line">u.Id = <span class="string">"1"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> c.JSON(http.StatusCreated, u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getUser</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">u := <span class="built_in">new</span>(User)</span><br><span class="line">id := c.Param(<span class="string">"id"</span>)</span><br><span class="line">u.Name = <span class="string">"will"</span></span><br><span class="line">u.Email = <span class="string">"will@will.com"</span></span><br><span class="line">u.Id = id</span><br><span class="line"><span class="keyword">return</span> c.JSON(http.StatusOK, u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateUser</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">u := <span class="built_in">new</span>(User)</span><br><span class="line">id := c.Param(<span class="string">"id"</span>)</span><br><span class="line">u.Name = <span class="string">"will"</span></span><br><span class="line">u.Email = <span class="string">"will@will.com"</span></span><br><span class="line">u.Id = id</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> c.JSON(http.StatusOK, u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteUser</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">u := <span class="built_in">new</span>(User)</span><br><span class="line">id := c.Param(<span class="string">"id"</span>)</span><br><span class="line"><span class="built_in">println</span>(u)</span><br><span class="line"><span class="built_in">println</span>(id)</span><br><span class="line"><span class="keyword">return</span> c.NoContent(http.StatusNoContent)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">e := echo.New()</span><br><span class="line">e.POST(<span class="string">"/users"</span>, saveUser)</span><br><span class="line">e.GET(<span class="string">"/users/:id"</span>, getUser)</span><br><span class="line">e.PUT(<span class="string">"/users/:id"</span>, updateUser)</span><br><span class="line">e.DELETE(<span class="string">"/users/:id"</span>, deleteUser)</span><br><span class="line">e.Logger.Fatal(e.Start(<span class="string">":1323"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run rest.go</span><br></pre></td></tr></table></figure></p><p>测试访问<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GET</span></span><br><span class="line">curl -s -i http://127.0.0.1:1323/users/1</span><br><span class="line"></span><br><span class="line"><span class="comment"># POST</span></span><br><span class="line">curl -s -i -F <span class="string">"name=Joe"</span> -F <span class="string">"email=joe@labstack.com"</span> http://127.0.0.1:1323/users</span><br><span class="line"></span><br><span class="line"><span class="comment"># PUT</span></span><br><span class="line"> curl -s -i -X PUT -F <span class="string">"name=Joe"</span> -F <span class="string">"email=joe@labstack.com"</span> http://127.0.0.1:1323/users/1</span><br><span class="line"></span><br><span class="line"><span class="comment"># DELETE</span></span><br><span class="line"> curl -s -i -X DELETE  http://127.0.0.1:1323/users/1</span><br></pre></td></tr></table></figure></p><p>官方参考文档<br><a href="https://echo.labstack.com/cookbook/crud" target="_blank" rel="noopener">https://echo.labstack.com/cookbook/crud</a></p><h3 id="使用中间件"><a href="#使用中间件" class="headerlink" title="使用中间件"></a>使用中间件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入中间件模块</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/labstack/echo/middleware"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局中间件</span></span><br><span class="line">e.Use(middleware.Logger())</span><br><span class="line">e.Use(middleware.Recover())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组级中间件（只对以/admin开头的URI使用设置的中间件）</span></span><br><span class="line">g := e.Group(<span class="string">"/admin"</span>)</span><br><span class="line">g.Use(middleware.BasicAuth(<span class="function"><span class="keyword">func</span><span class="params">(username, password <span class="keyword">string</span>, c echo.Context)</span> <span class="params">(error, <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> username == <span class="string">"joe"</span> &amp;&amp; password == <span class="string">"secret"</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由级中间件（只对单个URI使用设置的中间件）</span></span><br><span class="line">track := <span class="function"><span class="keyword">func</span><span class="params">(next echo.HandlerFunc)</span> <span class="title">echo</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"request to /users"</span>)</span><br><span class="line"><span class="keyword">return</span> next(c)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">e.GET(<span class="string">"/users"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.String(http.StatusOK, <span class="string">"/users"</span>)</span><br><span class="line">&#125;, track)</span><br></pre></td></tr></table></figure><h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问URI：/static/js/main.js 会寻找文件 assets/js/main.js</span></span><br><span class="line">e := echo.New()</span><br><span class="line">e.Static(<span class="string">"/static"</span>, <span class="string">"assets"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问URI：/js/main.js 会寻找文件 assets/js/main.js</span></span><br><span class="line">e := echo.New()</span><br><span class="line">e.Static(<span class="string">"/"</span>, <span class="string">"assets"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// / ---&gt; public/index.html</span></span><br><span class="line">e.File(<span class="string">"/"</span>, <span class="string">"public/index.html"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// /favicon.ico ---&gt; images/favicon.ico</span></span><br><span class="line">e.File(<span class="string">"/favicon.ico"</span>, <span class="string">"images/favicon.ico"</span>)</span><br></pre></td></tr></table></figure><h3 id="使用模板"><a href="#使用模板" class="headerlink" title="使用模板"></a>使用模板</h3><p>创建模板文件夹<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv public/views</span><br></pre></td></tr></table></figure></p><p>添加模板文件<code>public/views/hello.html</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;define &quot;hello&quot;&#125;&#125;Hello, &#123;&#123;.&#125;&#125;!&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>写入如下内容到<code>template.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"html/template"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Template <span class="keyword">struct</span> &#123;</span><br><span class="line">templates *template.Template</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 echo.Renderer 接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Template)</span> <span class="title">Render</span><span class="params">(w io.Writer, name <span class="keyword">string</span>, data <span class="keyword">interface</span>&#123;&#125;, c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> t.templates.ExecuteTemplate(w, name, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hello</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.Render(http.StatusOK, <span class="string">"hello"</span>, <span class="string">"Will"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t := &amp;Template&#123;</span><br><span class="line">templates: template.Must(template.ParseGlob(<span class="string">"public/views/*.html"</span>)),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">e := echo.New()</span><br><span class="line">e.Renderer = t</span><br><span class="line">e.GET(<span class="string">"/hello"</span>, Hello)</span><br><span class="line">e.Logger.Fatal(e.Start(<span class="string">":1323"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用测试组件"><a href="#使用测试组件" class="headerlink" title="使用测试组件"></a>使用测试组件</h3><p>写入如下内容到<code>handler.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> (</span><br><span class="line">User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span> <span class="string">`json:"name" form:"name"`</span></span><br><span class="line">Email <span class="keyword">string</span> <span class="string">`json:"email" form:"email"`</span></span><br><span class="line">&#125;</span><br><span class="line">handler <span class="keyword">struct</span> &#123;</span><br><span class="line">db <span class="keyword">map</span>[<span class="keyword">string</span>]*User</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *handler)</span> <span class="title">createUser</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">u := <span class="built_in">new</span>(User)</span><br><span class="line"><span class="keyword">if</span> err := c.Bind(u); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c.JSON(http.StatusCreated, u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *handler)</span> <span class="title">getUser</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">email := c.Param(<span class="string">"email"</span>)</span><br><span class="line">user := h.db[email]</span><br><span class="line"><span class="keyword">if</span> user == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> echo.NewHTTPError(http.StatusNotFound, <span class="string">"user not found"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c.JSON(http.StatusOK, user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>写入如下内容到<code>handler_test.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/http/httptest"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/labstack/echo"</span></span><br><span class="line"><span class="string">"github.com/stretchr/testify/assert"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">mockDB = <span class="keyword">map</span>[<span class="keyword">string</span>]*User&#123;</span><br><span class="line"><span class="string">"jon@labstack.com"</span>: &amp;User&#123;<span class="string">"Jon Snow"</span>, <span class="string">"jon@labstack.com"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">userJSON = <span class="string">`&#123;"name":"Jon Snow","email":"jon@labstack.com"&#125;`</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCreateUser</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">// Setup</span></span><br><span class="line">e := echo.New()</span><br><span class="line">req := httptest.NewRequest(echo.POST, <span class="string">"/"</span>, strings.NewReader(userJSON))</span><br><span class="line">req.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)</span><br><span class="line">rec := httptest.NewRecorder()</span><br><span class="line">c := e.NewContext(req, rec)</span><br><span class="line">h := &amp;handler&#123;mockDB&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Assertions</span></span><br><span class="line"><span class="keyword">if</span> assert.NoError(t, h.createUser(c)) &#123;</span><br><span class="line">assert.Equal(t, http.StatusCreated, rec.Code)</span><br><span class="line">assert.Equal(t, userJSON, rec.Body.String())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetUser</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">// Setup</span></span><br><span class="line">e := echo.New()</span><br><span class="line">req := httptest.NewRequest(echo.GET, <span class="string">"/"</span>, <span class="literal">nil</span>)</span><br><span class="line">rec := httptest.NewRecorder()</span><br><span class="line">c := e.NewContext(req, rec)</span><br><span class="line">c.SetPath(<span class="string">"/users/:email"</span>)</span><br><span class="line">c.SetParamNames(<span class="string">"email"</span>)</span><br><span class="line">c.SetParamValues(<span class="string">"jon@labstack.com"</span>)</span><br><span class="line">h := &amp;handler&#123;mockDB&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Assertions</span></span><br><span class="line"><span class="keyword">if</span> assert.NoError(t, h.getUser(c)) &#123;</span><br><span class="line">assert.Equal(t, http.StatusOK, rec.Code)</span><br><span class="line">assert.Equal(t, userJSON, rec.Body.String())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行测试<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/stretchr/testify/assert</span><br><span class="line">go <span class="built_in">test</span></span><br></pre></td></tr></table></figure></p><p>更多用法<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Form</span></span><br><span class="line">f := <span class="built_in">make</span>(url.Values)</span><br><span class="line">f.Set(<span class="string">"name"</span>, <span class="string">"Jon Snow"</span>)</span><br><span class="line">f.Set(<span class="string">"email"</span>, <span class="string">"jon@labstack.com"</span>)</span><br><span class="line">req := httptest.NewRequest(echo.POST, <span class="string">"/"</span>, strings.NewReader(f.Encode()))</span><br><span class="line">req.Header.Set(echo.HandlerContentType, echo.MIMEApplicationForm)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置URI参数</span></span><br><span class="line">c.SetParamNames(<span class="string">"id"</span>, <span class="string">"email"</span>)</span><br><span class="line">c.SetParamValues(<span class="string">"1"</span>, <span class="string">"jon@labstack.com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置查询参数</span></span><br><span class="line">q := <span class="built_in">make</span>(url.Values)</span><br><span class="line">q.Set(<span class="string">"email"</span>, <span class="string">"jon@labstack.com"</span>)</span><br><span class="line">req := http.NewRequest(echo.POST, <span class="string">"/?"</span>+q.Encode(), <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure></p><h3 id="使用cookie"><a href="#使用cookie" class="headerlink" title="使用cookie"></a>使用cookie</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建cookie</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeCookie</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">cookie := <span class="built_in">new</span>(http.Cookie)</span><br><span class="line">cookie.Name = <span class="string">"username"</span></span><br><span class="line">cookie.Value = <span class="string">"jon"</span></span><br><span class="line">cookie.Expires = time.Now().Add(<span class="number">24</span> * time.Hour)</span><br><span class="line">c.SetCookie(cookie)</span><br><span class="line"><span class="keyword">return</span> c.String(http.StatusOK, <span class="string">"write a cookie"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取单个cookie</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readCookie</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">cookie, err := c.Cookie(<span class="string">"username"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(cookie.Name)</span><br><span class="line">fmt.Println(cookie.Value)</span><br><span class="line"><span class="keyword">return</span> c.String(http.StatusOK, <span class="string">"read a cookie"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取所有cookie</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readAllCookies</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, cookie := <span class="keyword">range</span> c.Cookies() &#123;</span><br><span class="line">fmt.Println(cookie.Name)</span><br><span class="line">fmt.Println(cookie.Value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c.String(http.StatusOK, <span class="string">"read all cookie"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://echo.labstack.com/guide" target="_blank" rel="noopener">https://echo.labstack.com/guide</a></li><li><a href="https://echo.labstack.com/cookbook" target="_blank" rel="noopener">https://echo.labstack.com/cookbook</a></li><li><a href="https://echo.labstack.com/middleware" target="_blank" rel="noopener">https://echo.labstack.com/middleware</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web开发 </category>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> Web开发 </tag>
            
            <tag> Echo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go常用Web框架简介</title>
      <link href="/posts/5/"/>
      <url>/posts/5/</url>
      
        <content type="html"><![CDATA[<h3 id="常用web框架"><a href="#常用web框架" class="headerlink" title="常用web框架"></a>常用web框架</h3><ul><li><p>echo<br>  高性能，可扩展，极简 go Web 框架。</p><p>  中间件多，性能高，REST支持，HTTPS支持，HTTP/2支持，WebSocket支持。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/labstack/echo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">e := echo.New()</span><br><span class="line">e.GET(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.String(http.StatusOK, <span class="string">"Hello, World!"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">e.Logger.Fatal(e.Start(<span class="string">":1323"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>gin<br>  类martini，高性能 go Web 框架。</p><p>  性能高，REST支持，HTTPS支持。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"gopkg.in/gin-gonic/gin.v1"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">"/ping"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">"message"</span>: <span class="string">"pong"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run() <span class="comment">// listen and serve on 0.0.0.0:8080</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><p>iris<br>  最高性能 go Web 框架。</p><p>  中间件多，性能高，REST支持。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/kataras/iris"</span></span><br><span class="line"><span class="string">"github.com/kataras/iris/context"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">app := iris.New()</span><br><span class="line">app.Handle(<span class="string">"GET"</span>, <span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">ctx.HTML(<span class="string">"&lt;b&gt; Hello world! &lt;/b&gt;"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.Run(iris.Addr(<span class="string">":8080"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>revel<br>  高生产力，全功能 go Web 框架。</p><p>  功能完整，MVC构架。</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">revel new myapp</span><br><span class="line">revel run myapp</span><br></pre></td></tr></table></figure></li><li><p>martini<br>  Martini是一个强大为了编写模块化Web应用而生的GO语言框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/go-martini/martini"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  m := martini.Classic()</span><br><span class="line">  m.Get(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello world!"</span></span><br><span class="line">  &#125;)</span><br><span class="line">  m.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>go-json-rest<br>  易于构建RESTful JSON APIs的go Web框架。</p><p>  中间件多，REST支持，HTTPS支持，WebSocket支持。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/ant0ine/go-json-rest/rest"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    api := rest.NewApi()</span><br><span class="line">    api.Use(rest.DefaultDevStack...)</span><br><span class="line">    api.SetApp(rest.AppSimple(<span class="function"><span class="keyword">func</span><span class="params">(w rest.ResponseWriter, r *rest.Request)</span></span> &#123;</span><br><span class="line">        w.WriteJson(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"Body"</span>: <span class="string">"Hello World!"</span>&#125;)</span><br><span class="line">    &#125;))</span><br><span class="line">    log.Fatal(http.ListenAndServe(<span class="string">":8080"</span>, api.MakeHandler()))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>utron<br>  轻量级MVC的 go Web 框架。</p></li><li><p>macaron<br>  高生产力 go Web 框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"gopkg.in/macaron.v1"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := macaron.Classic()</span><br><span class="line">m.Get(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello world!"</span></span><br><span class="line">&#125;)</span><br><span class="line">m.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>buffalo<br>  快速的 go Web 开发框架。</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">buffalo new coke</span><br><span class="line">buffalo dev</span><br></pre></td></tr></table></figure></li><li><p>go-tigertonic<br>  json web 服务开发框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">ID     <span class="keyword">string</span>      <span class="string">`json:"id"`</span></span><br><span class="line">Stuff  <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:"stuff"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">ID     <span class="keyword">string</span>      <span class="string">`json:"id"`</span></span><br><span class="line">Stuff  <span class="keyword">interface</span>&#123;&#125; <span class="string">`json:"stuff"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myHandler</span><span class="params">(u *url.URL, h http.Header, *MyRequest)</span> <span class="params">(<span class="keyword">int</span>, http.Header, *MyResponse, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> http.StatusOK, <span class="literal">nil</span>, &amp;MyResponse&#123;<span class="string">"ID"</span>, <span class="string">"STUFF"</span>&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mux := tigertonic.NewTrieServeMux()</span><br><span class="line">mux.Handle(<span class="string">"POST"</span>, <span class="string">"/stuff"</span>, tigertonic.Timed(tigertonic.Marshaled(myHandler), <span class="string">"myHandler"</span>, <span class="literal">nil</span>))</span><br><span class="line">tigertonic.NewServer(<span class="string">":8000"</span>, tigertonic.Logged(mux, <span class="literal">nil</span>)).ListenAndServe()</span><br></pre></td></tr></table></figure></li><li><p>faygo<br>  快速方便的高性能 go Web 开发框架，特别是开发API。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="comment">// "mime/multipart"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">    <span class="string">"github.com/henrylee2cn/faygo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Index <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id        <span class="keyword">int</span>      <span class="string">`param:"&lt;in:path&gt; &lt;required&gt; &lt;desc:ID&gt; &lt;range: 0:10&gt;"`</span></span><br><span class="line">    Title     <span class="keyword">string</span>   <span class="string">`param:"&lt;in:query&gt; &lt;nonzero&gt;"`</span></span><br><span class="line">    Paragraph []<span class="keyword">string</span> <span class="string">`param:"&lt;in:query&gt; &lt;name:p&gt; &lt;len: 1:10&gt; &lt;regexp: ^[\\w]*$&gt;"`</span></span><br><span class="line">    Cookie    <span class="keyword">string</span>   <span class="string">`param:"&lt;in:cookie&gt; &lt;name:faygoID&gt;"`</span></span><br><span class="line">    <span class="comment">// Picture         *multipart.FileHeader `param:"&lt;in:formData&gt; &lt;name:pic&gt; &lt;maxmb:30&gt;"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *Index)</span> <span class="title">Serve</span><span class="params">(ctx *faygo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ctx.CookieParam(<span class="string">"faygoID"</span>) == <span class="string">""</span> &#123;</span><br><span class="line">        ctx.SetCookie(<span class="string">"faygoID"</span>, time.Now().String())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ctx.JSON(<span class="number">200</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    app := faygo.New(<span class="string">"myapp"</span>, <span class="string">"0.1"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register the route in a chain style</span></span><br><span class="line">    app.GET(<span class="string">"/index/:id"</span>, <span class="built_in">new</span>(Index))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Register the route in a tree style</span></span><br><span class="line">    <span class="comment">// app.Route(</span></span><br><span class="line">    <span class="comment">//     app.NewGET("/index/:id", new(Index)),</span></span><br><span class="line">    <span class="comment">// )</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start the service</span></span><br><span class="line">    faygo.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>tango<br>  微内核，可插拔，高性能 go Web 开发框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"errors"</span></span><br><span class="line">    <span class="string">"github.com/lunny/tango"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Action <span class="keyword">struct</span> &#123;</span><br><span class="line">    tango.JSON</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Action)</span> <span class="title">Get</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="literal">true</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">            <span class="string">"say"</span>: <span class="string">"Hello tango!"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> errors.New(<span class="string">"something error"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := tango.Classic()</span><br><span class="line">    t.Get(<span class="string">"/"</span>, <span class="built_in">new</span>(Action))</span><br><span class="line">    t.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>traffic<br>  受 Sinatra 启发的多正则匹配的 go Web 框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"net/http"</span></span><br><span class="line">  <span class="string">"github.com/pilu/traffic"</span></span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rootHandler</span><span class="params">(w traffic.ResponseWriter, r *traffic.Request)</span></span> &#123;</span><br><span class="line">  fmt.Fprint(w, <span class="string">"Hello World\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pageHandler</span><span class="params">(w traffic.ResponseWriter, r *traffic.Request)</span></span> &#123;</span><br><span class="line">  params := r.URL.Query()</span><br><span class="line">  fmt.Fprintf(w, <span class="string">"Category ID: %s\n"</span>, params.Get(<span class="string">"category_id"</span>))</span><br><span class="line">  fmt.Fprintf(w, <span class="string">"Page ID: %s\n"</span>, params.Get(<span class="string">"id"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  router := traffic.New()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Routes</span></span><br><span class="line">  router.Get(<span class="string">"/"</span>, rootHandler)</span><br><span class="line">  router.Get(<span class="string">"/categories/:category_id/pages/:id"</span>, pageHandler)</span><br><span class="line"></span><br><span class="line">  router.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>rest-layer<br>  让创建 REST API 更简单的 go Web 框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/rs/rest-layer-mem"</span></span><br><span class="line"><span class="string">"github.com/rs/rest-layer/resource"</span></span><br><span class="line"><span class="string">"github.com/rs/rest-layer/rest"</span></span><br><span class="line"><span class="string">"github.com/rs/rest-layer/schema"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// Define a user resource schema</span></span><br><span class="line">user = schema.Schema&#123;</span><br><span class="line">Description: <span class="string">`The user object`</span>,</span><br><span class="line">Fields: schema.Fields&#123;</span><br><span class="line"><span class="string">"id"</span>: &#123;</span><br><span class="line">Required: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// When a field is read-only, on default values or hooks can</span></span><br><span class="line"><span class="comment">// set their value. The client can't change it.</span></span><br><span class="line">ReadOnly: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// This is a field hook called when a new user is created.</span></span><br><span class="line"><span class="comment">// The schema.NewID hook is a provided hook to generate a</span></span><br><span class="line"><span class="comment">// unique id when no value is provided.</span></span><br><span class="line">OnInit: schema.NewID,</span><br><span class="line"><span class="comment">// The Filterable and Sortable allows usage of filter and sort</span></span><br><span class="line"><span class="comment">// on this field in requests.</span></span><br><span class="line">Filterable: <span class="literal">true</span>,</span><br><span class="line">Sortable:   <span class="literal">true</span>,</span><br><span class="line">Validator: &amp;schema.String&#123;</span><br><span class="line">Regexp: <span class="string">"^[0-9a-v]&#123;20&#125;$"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"created"</span>: &#123;</span><br><span class="line">Required:   <span class="literal">true</span>,</span><br><span class="line">ReadOnly:   <span class="literal">true</span>,</span><br><span class="line">Filterable: <span class="literal">true</span>,</span><br><span class="line">Sortable:   <span class="literal">true</span>,</span><br><span class="line">OnInit:     schema.Now,</span><br><span class="line">Validator:  &amp;schema.Time&#123;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"updated"</span>: &#123;</span><br><span class="line">Required:   <span class="literal">true</span>,</span><br><span class="line">ReadOnly:   <span class="literal">true</span>,</span><br><span class="line">Filterable: <span class="literal">true</span>,</span><br><span class="line">Sortable:   <span class="literal">true</span>,</span><br><span class="line">OnInit:     schema.Now,</span><br><span class="line"><span class="comment">// The OnUpdate hook is called when the item is edited. Here we use</span></span><br><span class="line"><span class="comment">// provided Now hook which just return the current time.</span></span><br><span class="line">OnUpdate:  schema.Now,</span><br><span class="line">Validator: &amp;schema.Time&#123;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// Define a name field as required with a string validator</span></span><br><span class="line"><span class="string">"name"</span>: &#123;</span><br><span class="line">Required:   <span class="literal">true</span>,</span><br><span class="line">Filterable: <span class="literal">true</span>,</span><br><span class="line">Validator: &amp;schema.String&#123;</span><br><span class="line">MaxLen: <span class="number">150</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define a post resource schema</span></span><br><span class="line">post = schema.Schema&#123;</span><br><span class="line">Description: <span class="string">`Represents a blog post`</span>,</span><br><span class="line">Fields: schema.Fields&#123;</span><br><span class="line"><span class="comment">// schema.*Field are shortcuts for common fields</span></span><br><span class="line"><span class="comment">// (identical to users' same fields)</span></span><br><span class="line"><span class="string">"id"</span>:      schema.IDField,</span><br><span class="line"><span class="string">"created"</span>: schema.CreatedField,</span><br><span class="line"><span class="string">"updated"</span>: schema.UpdatedField,</span><br><span class="line"><span class="comment">// Define a user field which references the user owning the post.</span></span><br><span class="line"><span class="comment">// See bellow, the content of this field is enforced by the fact</span></span><br><span class="line"><span class="comment">// that posts is a sub-resource of users.</span></span><br><span class="line"><span class="string">"user"</span>: &#123;</span><br><span class="line">Required:   <span class="literal">true</span>,</span><br><span class="line">Filterable: <span class="literal">true</span>,</span><br><span class="line">Validator: &amp;schema.Reference&#123;</span><br><span class="line">Path: <span class="string">"users"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"published"</span>: &#123;</span><br><span class="line">Required: <span class="literal">true</span>,</span><br><span class="line">Filterable: <span class="literal">true</span>,</span><br><span class="line">Default: <span class="literal">false</span>,</span><br><span class="line">Validator: &amp;schema.Bool&#123;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"title"</span>: &#123;</span><br><span class="line">Required: <span class="literal">true</span>,</span><br><span class="line">Validator: &amp;schema.String&#123;</span><br><span class="line">MaxLen: <span class="number">150</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"body"</span>: &#123;</span><br><span class="line"><span class="comment">// Dependency defines that body field can't be changed if</span></span><br><span class="line"><span class="comment">// the published field is not "false".</span></span><br><span class="line">Dependency: schema.Q(<span class="string">`&#123;"published": false&#125;`</span>),</span><br><span class="line">Validator: &amp;schema.String&#123;</span><br><span class="line">MaxLen: <span class="number">100000</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Create a REST API resource index</span></span><br><span class="line">index := resource.NewIndex()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add a resource on /users[/:user_id]</span></span><br><span class="line">users := index.Bind(<span class="string">"users"</span>, user, mem.NewHandler(), resource.Conf&#123;</span><br><span class="line"><span class="comment">// We allow all REST methods</span></span><br><span class="line"><span class="comment">// (rest.ReadWrite is a shortcut for []resource.Mode&#123;resource.Create,</span></span><br><span class="line">    <span class="comment">//  resource.Read, resource.Update, resource.Delete, resource,List&#125;)</span></span><br><span class="line">AllowedModes: resource.ReadWrite,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bind a sub resource on /users/:user_id/posts[/:post_id]</span></span><br><span class="line"><span class="comment">// and reference the user on each post using the "user" field of the posts resource.</span></span><br><span class="line">users.Bind(<span class="string">"posts"</span>, <span class="string">"user"</span>, post, mem.NewHandler(), resource.Conf&#123;</span><br><span class="line"><span class="comment">// Posts can only be read, created and deleted, not updated</span></span><br><span class="line">AllowedModes: []resource.Mode&#123;resource.Read, resource.List,</span><br><span class="line"> resource.Create, resource.Delete&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create API HTTP handler for the resource graph</span></span><br><span class="line">api, err := rest.NewHandler(index)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"Invalid API configuration: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bind the API under /api/ path</span></span><br><span class="line">http.Handle(<span class="string">"/api/"</span>, http.StripPrefix(<span class="string">"/api/"</span>, api))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Serve it</span></span><br><span class="line">log.Print(<span class="string">"Serving API on http://localhost:8080"</span>)</span><br><span class="line"><span class="keyword">if</span> err := http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>gongular<br>  让开发 API 简单的 go Web 框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> WelcomeMessage <span class="keyword">struct</span> &#123;</span><br><span class="line">  Message <span class="keyword">string</span></span><br><span class="line">  Date    time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g := gongular.NewRouter()</span><br><span class="line">g.GET(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gongular.Context)</span> <span class="title">WelcomeMessage</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> WelcomeMessage&#123;</span><br><span class="line">    Message: <span class="string">"Hello, you are coming from: "</span> + c.Request().RemoteAddr,</span><br><span class="line">    Date:    time.Now(),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>lessgo<br>  简单、稳定、高效、灵活的 go Web 开发框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/henrylee2cn/lessgo"</span></span><br><span class="line">    <span class="string">"github.com/henrylee2cn/lessgoext/swagger"</span></span><br><span class="line"></span><br><span class="line">    _ <span class="string">"github.com/henrylee2cn/lessgoext/dbservice/xorm"</span></span><br><span class="line">    <span class="comment">// _ "github.com/henrylee2cn/lessgoext/dbservice/gorm"</span></span><br><span class="line"></span><br><span class="line">    _ <span class="string">"github.com/henrylee2cn/lessgo_demo/middleware"</span></span><br><span class="line">    _ <span class="string">"github.com/henrylee2cn/lessgo_demo/router"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 开启自动api文档，通过config/apidoc_allow.myconfig进行配置</span></span><br><span class="line">    swagger.Reg()</span><br><span class="line">    <span class="comment">// 指定根目录URL</span></span><br><span class="line">    lessgo.SetHome(<span class="string">"/home"</span>)</span><br><span class="line">    <span class="comment">// 开启网络服务</span></span><br><span class="line">    lessgo.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>neo<br>  极其简单，快速，微内核的 go Web 框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/ivpusic/neo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    app := neo.App()</span><br><span class="line"></span><br><span class="line">    app.Get(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *neo.Ctx)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span>, ctx.Res.Text(<span class="string">"I am Neo Programmer"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    app.Start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>gondola<br>  快速开发 go Web 框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">"gnd.la/app"</span></span><br><span class="line">        <span class="string">"gnd.la/config"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">        App *app.App</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">        config.MustParse()</span><br><span class="line">        App = app.New()</span><br><span class="line">        App.HandleNamed(<span class="string">"^/$"</span>, MainHandler, <span class="string">"main"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>golf<br>  快速简单高性能轻量的 go Web 开发框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/dinever/golf"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mainHandler</span><span class="params">(ctx *golf.Context)</span></span> &#123;</span><br><span class="line">  ctx.Send(<span class="string">"Hello World!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pageHandler</span><span class="params">(ctx *golf.Context)</span></span> &#123;</span><br><span class="line">  ctx.Send(<span class="string">"Page: "</span> + ctx.Param(<span class="string">"page"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  app := golf.New()</span><br><span class="line">  app.Get(<span class="string">"/"</span>, mainHandler)</span><br><span class="line">  app.Get(<span class="string">"/p/:page/"</span>, pageHandler)</span><br><span class="line">  app.Run(<span class="string">":9000"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>go-relax<br>  专为 RESTful API 开发的 go Web 框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"github.com/codehack/go-relax"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Hello <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Hello)</span> <span class="title">Index</span><span class="params">(ctx *relax.Context)</span></span> &#123;</span><br><span class="line">   ctx.Respond(h)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   h := Hello(<span class="string">"hello world!"</span>)</span><br><span class="line">   svc := relax.NewService(<span class="string">"http://api.company.com/"</span>)</span><br><span class="line">   svc.Resource(&amp;h)</span><br><span class="line">   svc.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>gem<br>  高性能，易用，REST支持，HTTP/2支持的 go Web 框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"github.com/go-gem/gem"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(ctx *gem.Context)</span></span> &#123;</span><br><span class="line">    ctx.HTML(<span class="number">200</span>, <span class="string">"hello world"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Create server.</span></span><br><span class="line">    srv := gem.New(<span class="string">":8080"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create router.</span></span><br><span class="line">    router := gem.NewRouter()</span><br><span class="line">    <span class="comment">// Register handler</span></span><br><span class="line">    router.GET(<span class="string">"/"</span>, index)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start server.</span></span><br><span class="line">    log.Println(srv.ListenAndServe(router.Handler()))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>goat<br>  极简JSON API go Web 框架，REST支持。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"github.com/bahlo/goat"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">helloHandler</span><span class="params">(w http.ResponseWriter, r *http.Request, p goat.Params)</span></span> &#123;</span><br><span class="line">    goat.WriteJSON(w, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">        <span class="string">"hello"</span>: p[<span class="string">"name"</span>],</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := goat.New()</span><br><span class="line"></span><br><span class="line">    r.Get(<span class="string">"/hello/:name"</span>, <span class="string">"hello_url"</span>, helloHandler)</span><br><span class="line"></span><br><span class="line">    r.Run(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>rex<br>  现在化 go Web 开发框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"io"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"github.com/goanywhere/rex"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    app := rex.New()</span><br><span class="line">    app.Get(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        io.WriteString(w, <span class="string">"Hello World"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    app.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>air<br>  一个理想的 RESTful API go Web 开发框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/sheng/air"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := air.New()</span><br><span class="line">a.GET(<span class="string">"/"</span>, homeHandler)</span><br><span class="line">a.Serve()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">homeHandler</span><span class="params">(c *air.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.String(<span class="string">"Hello, 世界"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>yarf<br>  又一个 高性能 REST 开发框架。</p>  <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"github.com/yarf-framework/yarf"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define a simple resource</span></span><br><span class="line"><span class="keyword">type</span> Hello <span class="keyword">struct</span> &#123;</span><br><span class="line">    yarf.Resource</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implement the GET method</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Hello)</span> <span class="title">Get</span><span class="params">(c *yarf.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    c.Render(<span class="string">"Hello world!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run app server on http://localhost:8080</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    y := yarf.New()</span><br><span class="line"></span><br><span class="line">    y.Add(<span class="string">"/"</span>, <span class="built_in">new</span>(Hello))</span><br><span class="line"></span><br><span class="line">    y.Start(<span class="string">":8080"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="适合开发-REST-API-的框架"><a href="#适合开发-REST-API-的框架" class="headerlink" title="适合开发 REST API 的框架"></a>适合开发 REST API 的框架</h3><ul><li>github收藏较多的框架<ul><li>echo</li><li>gin</li><li>iris</li><li>go-json-rest</li><li>martini</li><li>macaron</li></ul></li><li>小众但可能好用的框架<ul><li>tango</li><li>neo</li><li>go-relax</li><li>gem</li><li>goat</li><li>air</li><li>yarf</li><li>faygo</li><li>traffic</li><li>rest-layer</li><li>gongular</li><li>lessgo</li><li>go-tigertonic</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web开发 </category>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> Web开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法总结</title>
      <link href="/posts/4/"/>
      <url>/posts/4/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Markdown 的目标是实现「易读易写」。Markdown 的语法全由一些符号所组成，这些符号经过精挑<br>细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown的列表看起来，<br>就是列表。Markdown 的区块引用看起来就真的像是引用一段文字。并且兼容 HTML 语法标签，可以<br>在markdown文件里直接使用HTML标签如: <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<br><code>&lt;del&gt;</code>。并且现在有很多工具可以把markdown文件转换为pdf、html等格式，非常便于阅读，<br>分享。</p><a id="more"></a><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h4><h5 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a><strong>段落和换行</strong></h5><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定<br>义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会<br>被视为空行）。普通段落不该用空格或制表符来缩进。</p><p>如果你确实想要依赖 Markdown 来插入 <code>&lt;br/&gt;</code> 标签的话，在插入处先按入两个以上的空格然后回车。</p><h5 id="标题"><a href="#标题" class="headerlink" title="标题"></a><strong>标题</strong></h5><p>在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 这是 H1 #</span><br><span class="line"></span><br><span class="line">## 这是 H2 ##</span><br><span class="line"></span><br><span class="line">### 这是 H3 ######</span><br></pre></td></tr></table></figure></p><h5 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a><strong>区块引用</strong></h5><p>Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是一个引用</span><br><span class="line">&gt; 这是上一个引用的接着部分</span><br><span class="line">&gt; 这是这个引用的最后部分</span><br></pre></td></tr></table></figure></p><blockquote><p>这是一个引用<br>这是上一个引用的接着部分<br>这是这个引用的最后部分</p></blockquote><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是一个引用</span><br><span class="line">这是上一个引用的接着部分</span><br><span class="line">这是这个引用的最后部分</span><br></pre></td></tr></table></figure></p><blockquote><p>这是一个引用<br>这是上一个引用的接着部分<br>这是这个引用的最后部分</p></blockquote><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是一个引用</span><br><span class="line">&gt; &gt; 这是一个引用里的引用</span><br><span class="line">&gt; 这是这个引用的最后部分</span><br></pre></td></tr></table></figure></p><blockquote><p>这是一个引用</p><blockquote><p>这是一个引用里的引用<br>这是这个引用的最后部分</p></blockquote></blockquote><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; #### 这是一个标题</span><br><span class="line">&gt; - 这是一个引用</span><br><span class="line">&gt; - 这是上一个引用的接着部分</span><br><span class="line">&gt; - 这是这个引用的最后部分</span><br></pre></td></tr></table></figure></p><blockquote><h4 id="这是一个标题"><a href="#这是一个标题" class="headerlink" title="这是一个标题"></a>这是一个标题</h4><ul><li>这是一个引用</li><li>这是上一个引用的接着部分</li><li>这是这个引用的最后部分</li></ul></blockquote><h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a><strong>列表</strong></h5><p>Markdown 支持有序列表和无序列表。<br>无序列表使用星号、加号或是减号作为列表标记：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">*   Red</span><br><span class="line">*   Green</span><br><span class="line">*   Blue</span><br><span class="line"></span><br><span class="line">+   Red</span><br><span class="line">+   Green</span><br><span class="line">+   Blue</span><br><span class="line"></span><br><span class="line">-   Red</span><br><span class="line">-   Green</span><br><span class="line">-   Blue</span><br><span class="line"></span><br><span class="line">1.  Bird</span><br><span class="line">2.  McHale</span><br><span class="line">3.  Parish</span><br></pre></td></tr></table></figure></p><ul><li>Red</li><li>Green</li><li>Blue</li></ul><ul><li>Red</li><li>Green</li><li>Blue</li></ul><ul><li>Red</li><li>Green</li><li>Blue</li></ul><ol><li>Bird</li><li>McHale</li><li>Parish</li></ol><p>内容用固定的缩进整理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">    viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">    Suspendisse id sem consectetuer libero luctus adipiscing</span><br></pre></td></tr></table></figure></p><ul><li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.<br>Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,<br>viverra nec, fringilla in, laoreet vitae, risus.</li><li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<br>Suspendisse id sem consectetuer libero luctus adipiscing</li></ul><p>偷懒的做法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure></p><ul><li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.<br>Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,<br>viverra nec, fringilla in, laoreet vitae, risus.</li><li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<br>Suspendisse id sem consectetuer libero luctus adipiscing.</li></ul><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1.  This is a list item with two paragraphs. Lorem ipsum dolor</span><br><span class="line">    sit amet, consectetuer adipiscing elit. Aliquam hendrerit</span><br><span class="line">    mi posuere lectus.</span><br><span class="line"></span><br><span class="line">    Vestibulum enim wisi, viverra nec, fringilla in, laoreet</span><br><span class="line">    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum</span><br><span class="line">    sit amet velit.</span><br><span class="line"></span><br><span class="line">2.  Suspendisse id sem consectetuer libero luctus adipiscing.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*   This is a list item with two paragraphs.</span><br><span class="line"></span><br><span class="line">    This is the second paragraph in the list item. You&apos;re</span><br><span class="line">only required to indent the first line. Lorem ipsum dolor</span><br><span class="line">sit amet, consectetuer adipiscing elit.</span><br><span class="line"></span><br><span class="line">*   Another item in the same list.</span><br></pre></td></tr></table></figure></p><ol><li><p>This is a list item with two paragraphs. Lorem ipsum dolor<br>sit amet, consectetuer adipiscing elit. Aliquam hendrerit<br>mi posuere lectus.</p><p>Vestibulum enim wisi, viverra nec, fringilla in, laoreet<br>vitae, risus. Donec sit amet nisl. Aliquam semper ipsum<br>sit amet velit.</p></li><li><p>Suspendisse id sem consectetuer libero luctus adipiscing.</p></li></ol><ul><li><p>This is a list item with two paragraphs.</p><p>This is the second paragraph in the list item. You’re<br>only required to indent the first line. Lorem ipsum dolor<br>sit amet, consectetuer adipiscing elit.</p></li><li><p>Another item in the same list.</p></li></ul><p>如果要在列表项目内放进引用，那 &gt; 就需要缩进：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*   A list item with a blockquote:</span><br><span class="line"></span><br><span class="line">    &gt; This is a blockquote</span><br><span class="line">    &gt; inside a list item.</span><br></pre></td></tr></table></figure></p><ul><li><p>A list item with a blockquote:</p><blockquote><p>This is a blockquote<br>inside a list item.</p></blockquote></li></ul><p>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*   一列表项包含一个列表区块：</span><br><span class="line"></span><br><span class="line">        &lt;代码写在这&gt;</span><br></pre></td></tr></table></figure></p><ul><li><p>一列表项包含一个列表区块：</p><pre><code>&lt;代码写在这&gt;</code></pre></li></ul><h5 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a><strong>代码区块</strong></h5><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是一个普通段落：</span><br><span class="line"></span><br><span class="line">    这是一个代码区块。</span><br></pre></td></tr></table></figure></p><p>这是一个普通段落：</p><pre><code>这是一个代码区块。</code></pre><p>代码也可以使用3个连续的反引号，后面还可以指明代码语言（部分编辑器支持，非官方语法）:</p><pre><code><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> hello</span><br></pre></td></tr></table></figure></code></pre><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> hello</span><br></pre></td></tr></table></figure><h5 id="表格支持"><a href="#表格支持" class="headerlink" title="表格支持"></a><strong>表格支持</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目        | 价格   |  数量  |</span><br><span class="line">| --------   | -----:  | :----:  |</span><br><span class="line">| 计算机     | \$1600 |   5     |</span><br><span class="line">| 手机        |   \$12   |   12   |</span><br><span class="line">| 管线        |    \$1    |  234  |</span><br></pre></td></tr></table></figure><table><thead><tr><th>项目</th><th style="text-align:right">价格</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td>计算机</td><td style="text-align:right">\$1600</td><td style="text-align:center">5</td></tr><tr><td>手机</td><td style="text-align:right">\$12</td><td style="text-align:center">12</td></tr><tr><td>管线</td><td style="text-align:right">\$1</td><td style="text-align:center">234</td></tr></tbody></table><h5 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a><strong>分隔线</strong></h5><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以<br>在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* * *</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br><span class="line"></span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure></p><hr><hr><hr><hr><hr><h4 id="区段元素"><a href="#区段元素" class="headerlink" title="区段元素"></a>区段元素</h4><h5 id="链接"><a href="#链接" class="headerlink" title="链接"></a><strong>链接</strong></h5><p>要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加<br>上链接的 title 文字（鼠标放在链接上时显示的文件），只要在网址后面，用双引号把 title<br>文字包起来即可，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This is [an example](http://example.com/ &quot;Title&quot;) inline link.</span><br><span class="line"></span><br><span class="line">[This link](http://example.net/) has no title attribute.</span><br></pre></td></tr></table></figure></p><p>This is <a href="http://example.com/" title="Title" target="_blank" rel="noopener">an example</a> inline link.</p><p><a href="http://example.net/" target="_blank" rel="noopener">This link</a> has no title attribute.</p><p>一个参考式链接的范例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I get 10 times more traffic from [Google] [1] than from</span><br><span class="line">[Yahoo] [2] or [MSN] [3].</span><br><span class="line"></span><br><span class="line">  [1]: http://google.com/        &quot;Google&quot;</span><br><span class="line">  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;</span><br><span class="line">  [3]: http://search.msn.com/    &quot;MSN Search&quot;</span><br></pre></td></tr></table></figure></p><p>I get 10 times more traffic from <a href="http://google.com/" title="Google" target="_blank" rel="noopener">Google</a> than from<br><a href="http://search.yahoo.com/" title="Yahoo Search" target="_blank" rel="noopener">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search" target="_blank" rel="noopener">MSN</a>.</p><p>改成用链接名称的方式写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I get 10 times more traffic from [Google][] than from</span><br><span class="line">[Yahoo][] or [MSN][].</span><br><span class="line"></span><br><span class="line">  [google]: http://google.com/        &quot;Google&quot;</span><br><span class="line">  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;</span><br><span class="line">  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;</span><br></pre></td></tr></table></figure></p><p>I get 10 times more traffic from <a href="http://google.com/" title="Google" target="_blank" rel="noopener">Google</a> than from<br><a href="http://search.yahoo.com/" title="Yahoo Search" target="_blank" rel="noopener">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search" target="_blank" rel="noopener">MSN</a>.</p><h5 id="强调"><a href="#强调" class="headerlink" title="强调"></a><strong>强调</strong></h5><p>Markdown 使用星号（<em>）和底线（_）作为标记强调字词的符号，被 </em> 或 _ 包围的字词会被转成<br>用 <code>&lt;em&gt;</code> 斜体标签包围，用两个 * 或 _ 包起来的话，则会被转成 <code>&lt;strong&gt;</code>加粗，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*single asterisks*</span><br><span class="line"></span><br><span class="line">_single underscores_</span><br><span class="line"></span><br><span class="line">**double asterisks**</span><br><span class="line"></span><br><span class="line">__double underscores__</span><br></pre></td></tr></table></figure></p><p><em>single asterisks</em></p><p><em>single underscores</em></p><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><p>如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。</p><p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\*this text is surrounded by literal asterisks\*</span><br></pre></td></tr></table></figure></p><p>*this text is surrounded by literal asterisks*</p><p>部分编辑器支持删除线</p><pre><code>~~这是一段错误的文本。~~</code></pre><p><del>这是一段错误的文本。</del></p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h5><p>如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Use the `printf()` function.</span><br></pre></td></tr></table></figure></p><p>Use the <code>printf()</code> function.</p><p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">``There is a literal backtick (`) here.``</span><br></pre></td></tr></table></figure></p><p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在<br>区段的一开始就插入反引号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A single backtick in a code span: `` ` ``</span><br><span class="line"></span><br><span class="line">A backtick-delimited string in a code span: `` `foo` ``</span><br></pre></td></tr></table></figure></p><p>A single backtick in a code span: <code>`</code></p><p>A backtick-delimited string in a code span: <code>`foo`</code></p><h5 id="图片"><a href="#图片" class="headerlink" title="图片"></a><strong>图片</strong></h5><p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。</p><p>行内式的图片语法看起来像是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![Alt text](http://ojz1mcltu.bkt.clouddn.com/animals-august2015.jpg)</span><br><span class="line"></span><br><span class="line">![Alt text](http://ojz1mcltu.bkt.clouddn.com/animals-august2015.jpg &quot;docker stack&quot;)</span><br></pre></td></tr></table></figure></p><p>参考式的图片语法则长得像这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![Alt text][id]</span><br><span class="line">[id]: http://ojz1mcltu.bkt.clouddn.com/animals-august2015.jpg  &quot;docker stack&quot;</span><br></pre></td></tr></table></figure></p><p>![Alt text][id]<br>[id]: <a href="http://ojz1mcltu.bkt.clouddn.com/animals-august2015.jpg" target="_blank" rel="noopener">http://ojz1mcltu.bkt.clouddn.com/animals-august2015.jpg</a>  “docker stack”</p><blockquote><p>Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p></blockquote><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><h5 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a><strong>自动链接</strong></h5><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来，<br>Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;http://example.com/&gt;</span><br><span class="line">&lt;address@example.com&gt;</span><br></pre></td></tr></table></figure></p><p><a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a><br><a href="mailto:&#x61;&#100;&#x64;&#x72;&#101;&#x73;&#115;&#x40;&#x65;&#120;&#97;&#109;&#x70;&#108;&#x65;&#x2e;&#x63;&#111;&#x6d;" target="_blank" rel="noopener">&#x61;&#100;&#x64;&#x72;&#101;&#x73;&#115;&#x40;&#x65;&#120;&#97;&#109;&#x70;&#108;&#x65;&#x2e;&#x63;&#111;&#x6d;</a></p><h5 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a><strong>反斜杠</strong></h5><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文<br>字旁边的方式来做出强调效果（但不用 <em> 标签），你可以在星号的前面加上反斜杠：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\*literal asterisks\*</span><br></pre></td></tr></table></figure></em></p><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre><code>\   反斜线`   反引号*   星号_   底线{}  花括号[]  方括号()  括弧#   井字号+   加号-   减号.   英文句点!   惊叹号</code></pre><h5 id="待办事宜-Todo-列表"><a href="#待办事宜-Todo-列表" class="headerlink" title="待办事宜 Todo 列表"></a><strong>待办事宜 Todo 列表</strong></h5><p>使用带有<code>[ ]</code>或<code>[x]</code>（未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表<br>嵌套以及混用Markdown语法，此语法非标准语法，不是所有markdown编辑器都支持。</p><pre><code>- [ ] **Cmd Markdown 开发**    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率    - [ ] 支持以 PDF 格式导出文稿    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)    - [x] 改进 LaTex 功能        - [x] 修复 LaTex 公式渲染问题        - [x] 新增 LaTex 公式编号功能</code></pre><ul><li>[ ] <strong>Cmd Markdown 开发</strong><ul><li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li><li>[ ] 支持以 PDF 格式导出文稿</li><li>[x] 新增Todo列表功能 <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments" target="_blank" rel="noopener">语法参考</a></li><li>[x] 改进 LaTex 功能<ul><li>[x] 修复 LaTex 公式渲染问题</li><li>[x] 新增 LaTex 公式编号功能 <a href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers" target="_blank" rel="noopener">语法参考</a></li></ul></li></ul></li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="http://www.appinn.com/markdown/" target="_blank" rel="noopener">http://www.appinn.com/markdown/</a></li><li><a href="https://www.zybuluo.com/mdeditor?url=https%3A%2F%2Fwww.zybuluo.com%2Fstatic%2Feditor%2Fmd-help.markdown" target="_blank" rel="noopener">https://www.zybuluo.com/mdeditor?url=https%3A%2F%2Fwww.zybuluo.com%2Fstatic%2Feditor%2Fmd-help.markdown</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 文档相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> doc </tag>
            
            <tag> markdown </tag>
            
            <tag> pdf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>REST接口设计规范总结</title>
      <link href="/posts/3/"/>
      <url>/posts/3/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Representational State Transfer 简称 REST 描述了一个架构样式的网络系统。REST 指的是<br>一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。</p><p>概念:</p><ul><li><p>资源（Resources） REST是”表现层状态转化”，其实它省略了主语。”表现层”其实指的是”资源”的”表现层”。<br>那么什么是资源呢？就是我们平常上网访问的一张图片、一个文档、一个视频等。这些资源我们通过URI来定位，也就是一个URI表示一个资源。</p></li><li><p>表现层（Representation）<br>资源是做一个具体的实体信息，他可以有多种的展现方式。而把实体展现出来就是表现层，例如一个txt文本信息，他可以输出成html、json、xml等格式，一个图片他可以jpg、png等方式展现，这个就是表现层的意思。<br>URI确定一个资源，但是如何确定它的具体表现形式呢？应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对”表现层”的描述。</p></li><li><p>状态转化（State Transfer）<br>访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，肯定涉及到数据和状态的变化。而HTTP协议是无状态的，那么这些状态肯定保存在服务器端，所以如果客户端想要通知服务器端改变数据和状态的变化，肯定要通过某种方式来通知它。</p></li></ul><h3 id="URI格式规范"><a href="#URI格式规范" class="headerlink" title="URI格式规范"></a>URI格式规范</h3><ul><li>URI中尽量使用连字符”-“代替下划线”_”的使用</li><li>URI中统一使用小写字母</li><li>URI中不要包含文件(脚本)的扩展名<a id="more"></a><h3 id="资源的原型"><a href="#资源的原型" class="headerlink" title="资源的原型"></a>资源的原型</h3></li><li>文档(Document)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">文档是资源的单一表现形式，可以理解为一个对象，或者数据库中的一条记录。在请求文档时，</span><br><span class="line">要么返回文档对应的数据，要么会返回一个指向另外一个资源(文档)的链接。</span><br><span class="line">以下是几个基于文档定义的URI例子：</span><br><span class="line">https://api.example.com/users/will</span><br><span class="line">https://api.example.com/posts/1</span><br><span class="line">https://api.example.com/posts/1/comments/1</span><br></pre></td></tr></table></figure><ul><li>集合(Collection)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">集合可以理解为是资源的一个容器(目录)，我们可以向里面添加资源(文档)。例如：</span><br><span class="line">https://api.example.com/users</span><br><span class="line">https://api.example.com/posts</span><br><span class="line">https://api.example.com/posts/1/comments</span><br></pre></td></tr></table></figure><ul><li>仓库(Store)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">仓库是客户端来管理的一个资源库，客户端可以向仓库中新增资源或者删除资源。</span><br><span class="line">客户端也可以批量获取到某个仓库下的所有资源。仓库中的资源对外的访问不会提供单独URI的，</span><br><span class="line">客户端在创建资源时候的URI除外。例如：</span><br><span class="line">PUT /users/1234/favorites/posts/1  </span><br><span class="line">上面的例子我们可以理解为，我们向一个id是1234的用户的仓库(收藏夹)中，</span><br><span class="line">添加了一个id为1的post资源。通俗点儿说：就是用户收藏了一个自己喜爱的id为1的文章。</span><br></pre></td></tr></table></figure><ul><li>控制器(Controller)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">控制器资源模型，可以执行一个方法，支持参数输入，结果返回。 是为了除了标准操作:</span><br><span class="line">增删改查(CRUD)以外的一些逻辑操作。控制器(方法)一般定义子URI中末尾，</span><br><span class="line">并且不会有子资源(控制器)。例如：</span><br><span class="line">向用户重发ID为245743的消息</span><br><span class="line">POST /alerts/245743/resend  </span><br><span class="line"></span><br><span class="line">发布ID为1的文章</span><br><span class="line">POST /posts/1/publish</span><br></pre></td></tr></table></figure><blockquote><p>把动作转换成资源</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">把动作转换成可以执行 CRUD 操作的资源， github 就是用了这种方法。</span><br><span class="line"></span><br><span class="line">比如“喜欢”一个 gist，就增加一个 /gists/:id/star 子资源，</span><br><span class="line">然后对其进行操作：“喜欢”使用 PUT /gists/:id/star，</span><br><span class="line">“取消喜欢”使用 DELETE /gists/:id/star</span><br><span class="line">或者使用 POST /gists/:id/unstar</span><br><span class="line"></span><br><span class="line">另外一个例子是 Fork，这也是一个动作，但是在 gist 下面增加 forks资源，</span><br><span class="line">就能把动作变成 CRUD 兼容的：POST /gists/:id/forks 可以执行用户 fork 的动作。</span><br></pre></td></tr></table></figure><h3 id="URI命名规范"><a href="#URI命名规范" class="headerlink" title="URI命名规范"></a>URI命名规范</h3><ul><li>文档(Document)类型的资源用名词(短语)单数命名</li><li>集合(Collection)类型的资源用名词(短语)复数命名</li><li>仓库(Store)类型的资源用名词(短语)复数命名</li><li>控制器(Controller)类型的资源用动词(短语)命名</li><li>URI中有些字段可以是变量，在实际使用中可以按需替换</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例如一个资源URI可以这样定义：</span><br><span class="line">https://api.example.com/posts/&#123;postId&#125;/comments/&#123;commentId&#125;</span><br><span class="line">postId,commentId 是变量(数字，字符串都类型都可以)。</span><br></pre></td></tr></table></figure><ul><li>CRUD的操作不要体现在URI中，HTTP协议中的操作符已经对CRUD做了映射。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CRUD是创建，读取，更新，删除这四个经典操作的简称  </span><br><span class="line">例如删除的操作用REST规范执行的话，应该是这个样子：</span><br><span class="line">DELETE /users/1234</span><br><span class="line"></span><br><span class="line">以下是几个错误的示例：</span><br><span class="line">GET /deleteUser?id=1234  </span><br><span class="line">GET /deleteUser/1234  </span><br><span class="line">DELETE /deleteUser/1234  </span><br><span class="line">POST /users/1234/delete</span><br></pre></td></tr></table></figure><h3 id="URI的query字段"><a href="#URI的query字段" class="headerlink" title="URI的query字段"></a>URI的query字段</h3><p>在REST中,query字段一般作为查询的参数补充，也可以帮助标示一个唯一的资源。但需要注意的是，<br>作为一个提供查询功能的URI，无论是否有query条件，我们都应该保证结果的唯一性，<br>一个URI对应的返回数据是不应该被改变的(在资源没有修改的情况下)。<br>HTTP中的缓存也可能缓存查询结果。</p><ul><li>Query参数可以作为Collection或Store类型资源的过滤条件来使用 例如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /users //返回所有用户列表  </span><br><span class="line">GET /users?role=admin //返回权限为admin的用户列表</span><br><span class="line">GET /search/users?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125; //根据多条件查询用户</span><br></pre></td></tr></table></figure><ul><li>Query参数可以作为Collection或Store资源列表分页标示使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">如果是一个简单的列表操作，可以这样设计：</span><br><span class="line">GET /users?pageSize=25&amp;pageStartIndex=50  </span><br><span class="line">如果是一个复杂的列表或查询操作的话，我们可以为资源设计一个Collection，</span><br><span class="line">因为复杂查询可能会涉及比较多的参数，建议使用Post的方式传入，例如这样：</span><br><span class="line">POST /users/search</span><br><span class="line"></span><br><span class="line">相关的分页信息还可以存放到 Link 头部，这样客户端可以直接得到诸如下一页、最后一页、上一页</span><br><span class="line">等内容的 url 地址</span><br><span class="line">Status: 200 OK</span><br><span class="line">Link: &lt;https://api.github.com/resource?page=2&gt;; rel=&quot;previous&quot;,</span><br><span class="line">      &lt;https://api.github.com/resource?page=2&gt;; rel=&quot;next&quot;,</span><br><span class="line">      &lt;https://api.github.com/resource?page=5&gt;; rel=&quot;last&quot;</span><br><span class="line">X-RateLimit-Limit: 20</span><br><span class="line">X-RateLimit-Remaining: 19</span><br></pre></td></tr></table></figure><h3 id="HTTP请求方法的使用"><a href="#HTTP请求方法的使用" class="headerlink" title="HTTP请求方法的使用"></a>HTTP请求方法的使用</h3><ul><li>GET方法用来获取资源</li><li>PUT方法可用来新增/更新Store类型的资源</li><li>PUT方法可用来更新一个资源的全部属性，使用时传递所有属性的值，即使有的值没有改变</li><li>PATCH方法更新资源的部分属性。因为 PATCH 比较新，而且规范比较复杂，所以真正实现的比较少，<br>一般都是用 POST 替代</li><li>POST方法可用来创建一个资源</li><li>POST方法可用来触发执行一个Controller类型资源</li><li>DELETE方法用于删除资源</li></ul><h3 id="HTTP响应状态码的使用"><a href="#HTTP响应状态码的使用" class="headerlink" title="HTTP响应状态码的使用"></a>HTTP响应状态码的使用</h3><ul><li>200 (“OK”) 用于一般性的成功返回</li><li>200 (“OK”) 不可用于请求错误返回</li><li>201 (“Created”) 资源被创建</li><li>202 (“Accepted”) 用于Controller控制类资源异步处理的返回，仅表示请求已经收到。<br>对于耗时比较久的处理，一般用异步处理来完成</li><li>204 (“No Content”) 此状态可能会出现在PUT、POST、DELETE的请求中，一般表示资源存在，<br>但消息体中不会返回任何资源相关的状态或信息。</li><li>301 (“Moved Permanently”) 资源的URI被转移，需要使用新的URI访问</li><li>302 (“Found”) 不推荐使用，此代码在HTTP1.1协议中被303/307替代。<br>我们目前对302的使用和最初HTTP1.0定义的语意是有出入的，应该只有在GET/HEAD方法下，<br>客户端才能根据Location执行自动跳转，而我们目前的客户端基本上是不会判断原请求方法的，<br>无条件的执行临时重定向</li><li>303 (“See Other”) 返回一个资源地址URI的引用，但不强制要求客户端获取该地址的状态(访问该地址)</li><li>304 (“Not Modified”) 有一些类似于204状态，服务器端的资源与客户端最近访问的资源版本一致，<br>并无修改，不返回资源消息体。可以用来降低服务端的压力</li><li>307 (“Temporary Redirect”) 目前URI不能提供当前请求的服务，临时性重定向到另外一个URI。<br>在HTTP1.1中307是用来替代早期HTTP1.0中使用不当的302</li><li>400 (“Bad Request”) 用于客户端一般性错误返回, 在其它4xx错误以外的错误，也可以使用400，<br>具体错误信息可以放在body中</li><li>401 (“Unauthorized”) 在访问一个需要验证的资源时，验证错误</li><li>403 (“Forbidden”) 一般用于非验证性资源访问被禁止，例如对于某些客户端只开放部分API的访问权限，<br>而另外一些API可能无法访问时，可以给予403状态</li><li>404 (“Not Found”) 找不到URI对应的资源</li><li>405 (“Method Not Allowed”) HTTP的方法不支持，例如某些只读资源，可能不支持POST/DELETE。<br>但405的响应header中必须声明该URI所支持的方法</li><li>406 (“Not Acceptable”) 客户端所请求的资源数据格式类型不被支持，<br>例如客户端请求数据格式为application/xml，但服务器端只支持application/json</li><li>409 (“Conflict”) 资源状态冲突，例如客户端尝试删除一个非空的Store资源</li><li>412 (“Precondition Failed”) 用于有条件的操作不被满足时</li><li>415 (“Unsupported Media Type”) 客户所支持的数据类型，服务端无法满足</li><li>429    (“Too Many Requests”)    客户端在规定的时间里发送了太多请求，在进行限流的时候会用到</li><li>500 (“Internal Server Error”) 服务器端的接口错误，此错误于客户端无关</li></ul><h3 id="HTTP-Headers"><a href="#HTTP-Headers" class="headerlink" title="HTTP Headers"></a>HTTP Headers</h3><ul><li>Content-Type 标示body的数据格式</li><li>Content-Length body 数据体的大小，客户端可以根据此标示检验读取到的数据是否完整，<br>也可以通过Header判断是否需要下载可能较大的数据体</li><li>Last-Modified 用于服务器端的响应，是一个资源最后被修改的时间戳，客户端(缓存)可以根据<br>此信息判断是否需要重新获取该资源</li><li>ETag 服务器端资源版本的标示，客户端(缓存)可以根据此信息判断是否需要重新获取该资源，<br>需要注意的是，ETag如果通过服务器随机生成，可能会存在多个主机对同一个资源产生不同ETag的问题</li><li>Store类型的资源要支持有条件的PUT请求</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">假设有两个客户端client#1/#2都向一个Store资源提交PUT请求，服务端是无法清楚的判断是要</span><br><span class="line">insert还是要update的，所以我们要在header中加入条件标示if-Match，If-Unmodified-Since</span><br><span class="line">来明确是本次调用API的意图。例如：</span><br><span class="line"></span><br><span class="line">client#1第一次向服务端发起一个请求 PUT /objects/2113 此时2113资源还不存在，那服务端会</span><br><span class="line">认为本次请求是一个insert操作，完成后，会返回 201 (“Created”)</span><br><span class="line"></span><br><span class="line">client#2再一次向服务端发起同一个请求 PUT /objects/2113 时，因2113资源已存在，服务端会</span><br><span class="line">返回 409 (“Conflict”)</span><br><span class="line"></span><br><span class="line">为了能让client#2的请求成功，或者说我们要清楚的表明本次操作是一次update操作，我们必须在</span><br><span class="line">header中加入一些条件标示，例如 if-Match。我们需要给出资源的ETag(if-Match:Etag)，来表</span><br><span class="line">明我们希望更新资源的版本，如果服务端版本一致，会返回200 (“OK”) 或者 204 (“No Content”)。</span><br><span class="line">如果服务端发现指定的版本与当前资源版本不一致，会返回 412 (“Precondition Failed”)</span><br></pre></td></tr></table></figure><ul><li>Location 在响应header中使用，一般为客户端感兴趣的资源URI,例如在成功创建一个资源后，我们<br>可以把新的资源URI放在Location中，如果是一个异步创建资源的请求，接口在响应202 (“Accepted”)<br>的同时可以给予客户端一个异步状态查询的地址</li><li>Cache-Control, Expires, Date 通过缓存机制提升接口响应性能,同时根据实际需要也可以禁止<br>客户端对接口请求做缓存。对于REST接口来说，如果某些接口实时性要求不高的情况下，我们可以使<br>用max-age来指定一个小的缓存时间，这样对客户端和服务器端双方都是有利的。一般来说只对GET<br>方法且返回200的情况下使用缓存，在某些情况下我们也可以对返回3xx或者4xx的情况下做缓存，可<br>以防范错误访问带来的负载。</li><li>我们可以自定义一些头信息，作为客户端和服务器间的通信使用，但不能改变HTTP方法的性质。自<br>定义头尽量简单明了，不要用body中的信息对其作补充说明。</li></ul><h3 id="API-地址和版本"><a href="#API-地址和版本" class="headerlink" title="API 地址和版本"></a>API 地址和版本</h3><p>在 url 中指定 API 的版本是个很好地做法。如果 API 变化比较大，可以把 API 设计为子域名，<br>比如 <a href="https://api.github.com/v3；也可以简单地把版本放在路径中，比如" target="_blank" rel="noopener">https://api.github.com/v3；也可以简单地把版本放在路径中，比如</a> <a href="https://example.com/api/v1。" target="_blank" rel="noopener">https://example.com/api/v1。</a><br>另一种做法是，将版本号放在HTTP头信息中。</p><h3 id="限流-rate-limit"><a href="#限流-rate-limit" class="headerlink" title="限流 rate limit"></a>限流 rate limit</h3><p>如果对访问的次数不加控制，很可能会造成 API 被滥用，甚至被 DDos 攻击。根据使用者不同的身<br>份对其进行限流，可以防止这些情况，减少服务器的压力。</p><p>对用户的请求限流之后，要有方法告诉用户它的请求使用情况，Github API 使用的三个相关的头部：</p><ul><li>X-RateLimit-Limit: 用户每个小时允许发送请求的最大值</li><li>X-RateLimit-Remaining：当前时间窗口剩下的可用请求数目</li><li>X-RateLimit-Rest: 时间窗口重置的时候，到这个时间点可用的请求数量就会变成 X-RateLimit-Limit 的值</li></ul><p>对于超过流量的请求，可以返回 429 Too many requests 状态码，并附带错误信息。</p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="http://cizixs.com/2016/12/12/restful-api-design-guide" target="_blank" rel="noopener">http://cizixs.com/2016/12/12/restful-api-design-guide</a></li><li><a href="http://wangwei.info/about-rest-api/" target="_blank" rel="noopener">http://wangwei.info/about-rest-api/</a></li><li><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/09/restful.html</a></li><li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></li><li><a href="https://zh.wikipedia.org/wiki/REST" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/REST</a></li><li><a href="https://developer.github.com/v3" target="_blank" rel="noopener">https://developer.github.com/v3</a></li><li><a href="http://novoland.github.io/%E8%AE%BE%E8%AE%A1/2015/08/17/Restful%20API%20%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83.html" target="_blank" rel="noopener">http://novoland.github.io/%E8%AE%BE%E8%AE%A1/2015/08/17/Restful%20API%20%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> REST </tag>
            
            <tag> API </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>codis3系列版本安装</title>
      <link href="/posts/2/"/>
      <url>/posts/2/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Codis 是 Wandoujia Infrastructure Team 开发的一个分布式 Redis 服务,<br>用户可以看成是一个无限内存的 Redis 服务, 有动态扩/缩容的能力. 对偏存储型的业务更实用,<br>如果你需要 SUBPUB 之类的指令, Codis 是不支持的. 时刻记住 Codis 是一个分布式存储的项目.<br>对于海量的 key, value不太大( &lt;= 1M ), 随着业务扩展缓存也要随之扩展的业务场景有特效.</p><p>Codis 3.x 由以下组件组成：</p><p>Codis Server：基于 redis-3.2.8  分支开发。增加了额外的数据结构，<br>以支持 slot 有关的操作以及数据迁移指令。具体的修改可以参考文档 redis 的修改。</p><p>Codis Proxy：客户端连接的 Redis 代理服务, 实现了 Redis 协议。 除部分命令不支持<br>以外(不支持的命令列表)，表现的和原生的 Redis 没有区别（就像 Twemproxy）。</p><ul><li>对于同一个业务集群而言，可以同时部署多个 codis-proxy 实例；</li><li>不同 codis-proxy 之间由 codis-dashboard 保证状态同步。</li></ul><p>Codis Dashboard：集群管理工具，支持 codis-proxy、codis-server 的添加、删除，<br>以及据迁移等操作。在集群状态发生改变时，codis-dashboard 维护集群下所有<br>codis-proxy 的状态的一致性。</p><ul><li>对于同一个业务集群而言，同一个时刻 codis-dashboard 只能有 0个或者1个；</li><li>所有对集群的修改都必须通过 codis-dashboard 完成。</li></ul><p>Codis Admin：集群管理的命令行工具。</p><ul><li>可用于控制 codis-proxy、codis-dashboard 状态以及访问外部存储。</li></ul><p>Codis FE：集群管理界面。</p><ul><li>多个集群实例共享可以共享同一个前端展示页面；</li><li>通过配置文件管理后端 codis-dashboard 列表，配置文件可自动更新。</li></ul><p>Codis HA：为集群提供高可用。</p><ul><li>依赖 codis-dashboard 实例，自动抓取集群各个组件的状态；</li><li>会根据当前集群状态自动生成主从切换策略，并在需要时通过 codis-dashboard 完成主从切换。</li></ul><p>Storage：为集群状态提供外部存储。</p><ul><li>提供 Namespace 概念，不同集群的会按照不同 product name 进行组织；</li><li>目前仅提供了 Zookeeper、Etcd、Fs 三种实现，但是提供了抽象的 interface 可自行扩展。</li></ul><a id="more"></a><h3 id="安装配置-zookeeper-单机启动，生产环境需要集群"><a href="#安装配置-zookeeper-单机启动，生产环境需要集群" class="headerlink" title="安装配置 zookeeper(单机启动，生产环境需要集群)"></a>安装配置 zookeeper(单机启动，生产环境需要集群)</h3><p>1.安装zookeeper<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk</span><br><span class="line"><span class="built_in">cd</span> /server/software</span><br><span class="line">wget http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.5.1-alpha/zookeeper-3.5.1-alpha.tar.gz</span><br><span class="line">tar xf zookeeper-3.5.1-alpha.tar.gz</span><br><span class="line">mv zookeeper-3.5.1-alpha zookeeper</span><br><span class="line">mv zookeeper /usr/<span class="built_in">local</span>/</span><br><span class="line">chown root.root /usr/<span class="built_in">local</span>/zookeeper -R</span><br></pre></td></tr></table></figure></p><p>2.配置zookeeper<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv /data/zookeeper/&#123;data,<span class="built_in">log</span>&#125;</span><br><span class="line">cat &gt;/usr/<span class="built_in">local</span>/zookeeper/conf/zoo.cfg&lt;&lt;EOF</span><br><span class="line">clientPort=2181</span><br><span class="line">maxClientCnxns=1024</span><br><span class="line"></span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=20</span><br><span class="line">syncLimit=10</span><br><span class="line"></span><br><span class="line">dataDir=/data/zookeeper/data</span><br><span class="line">dataLogDir=/data/zookeeper/<span class="built_in">log</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>3.启动zookeeper<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">/usr/<span class="built_in">local</span>/zookeeper/bin/zkServer.sh start</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看节点的状态</span></span><br><span class="line">/usr/<span class="built_in">local</span>/zookeeper/bin/zkServer.sh status</span><br></pre></td></tr></table></figure></p><h3 id="安装-codis"><a href="#安装-codis" class="headerlink" title="安装 codis"></a>安装 codis</h3><h4 id="下载二进制包"><a href="#下载二进制包" class="headerlink" title="下载二进制包"></a>下载二进制包</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /server/software</span><br><span class="line">wget https://github.com/CodisLabs/codis/releases/download/3.1.3/codis3.1.3-go1.7.4-linux.tar.gz</span><br><span class="line">tar xf codis3.1.3-go1.7.4-linux.tar.gz</span><br><span class="line"><span class="built_in">cd</span> codis3.1.3-go1.7.4-linux</span><br><span class="line">mkdir bin etc</span><br><span class="line">mv codis-* redis-* bin/</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">mv codis3.1.3-go1.7.4-linux /usr/<span class="built_in">local</span>/codis</span><br><span class="line">chown root.root /usr/<span class="built_in">local</span>/codis -R</span><br></pre></td></tr></table></figure><h4 id="启动-Codis-Dashboard"><a href="#启动-Codis-Dashboard" class="headerlink" title="启动 Codis Dashboard"></a>启动 Codis Dashboard</h4><ol><li>配置</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/codis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成默认的配置文件</span></span><br><span class="line">./bin/codis-dashboard --default-config &gt; etc/dashboard.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置参数</span></span><br></pre></td></tr></table></figure><ol start="2"><li>启动</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup ./bin/codis-dashboard --ncpu=4 --config=etc/dashboard.toml \</span><br><span class="line">    --<span class="built_in">log</span>=dashboard.log --<span class="built_in">log</span>-level=WARN &amp;</span><br></pre></td></tr></table></figure><h4 id="启动-Codis-Proxy"><a href="#启动-Codis-Proxy" class="headerlink" title="启动 Codis Proxy"></a>启动 Codis Proxy</h4><ol><li>配置</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/codis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成默认的配置文件</span></span><br><span class="line">./bin/codis-proxy --default-config &gt; etc/proxy.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置参数</span></span><br></pre></td></tr></table></figure><ol start="2"><li>启动</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup ./bin/codis-proxy --ncpu=4 --config=etc/proxy.toml \</span><br><span class="line">    --<span class="built_in">log</span>=proxy.log --<span class="built_in">log</span>-level=WARN &amp;</span><br></pre></td></tr></table></figure><h4 id="启动-Codis-Server"><a href="#启动-Codis-Server" class="headerlink" title="启动 Codis Server"></a>启动 Codis Server</h4><ol><li>配置</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">mkdir -pv /data/redis/6379</span><br><span class="line">cat &gt;/usr/<span class="built_in">local</span>/codis/etc/redis_6379.conf&lt;&lt;EOF</span><br><span class="line">daemonize yes</span><br><span class="line"><span class="built_in">bind</span> `ifconfig eth1 | grep <span class="string">"inet "</span>| head -n 1 | awk -F<span class="string">'[: ]+'</span> <span class="string">'&#123;print $3&#125;'</span>`</span><br><span class="line">port 6379</span><br><span class="line">timeout 300</span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">"/data/redis/6379/redis.log"</span></span><br><span class="line">databases 16</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"><span class="comment">#save 900 1</span></span><br><span class="line"><span class="comment">#save 300 10</span></span><br><span class="line"><span class="comment">#save 60 10000</span></span><br><span class="line">dir <span class="string">"/data/redis/6379"</span></span><br><span class="line">maxclients 10000</span><br><span class="line"><span class="comment">#下面两项一般配置使用</span></span><br><span class="line">maxmemory 1024MB</span><br><span class="line"><span class="comment">#内存不足时的清楚策略</span></span><br><span class="line">maxmemory-policy allkeys-lru</span><br><span class="line"><span class="comment">#开启日志记录，相当于MySQL的binlog</span></span><br><span class="line"><span class="comment">#appendonly yes  </span></span><br><span class="line"><span class="comment">#appendfilename "appendonly.aof"</span></span><br><span class="line"><span class="comment">#appendfsync everysec</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">mkdir -pv /data/redis/6380</span><br><span class="line">cat &gt;/usr/<span class="built_in">local</span>/codis/etc/redis_6380.conf&lt;&lt;EOF</span><br><span class="line">daemonize yes</span><br><span class="line"><span class="built_in">bind</span> `ifconfig eth1 | grep <span class="string">"inet "</span>| head -n 1 | awk -F<span class="string">'[: ]+'</span> <span class="string">'&#123;print $3&#125;'</span>`</span><br><span class="line">port 6380</span><br><span class="line">timeout 300</span><br><span class="line">loglevel notice</span><br><span class="line">logfile <span class="string">"/data/redis/6380/redis.log"</span></span><br><span class="line">databases 16</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"><span class="comment">#save 900 1</span></span><br><span class="line"><span class="comment">#save 300 10</span></span><br><span class="line"><span class="comment">#save 60 10000</span></span><br><span class="line">dir <span class="string">"/data/redis/6380"</span></span><br><span class="line">maxclients 10000</span><br><span class="line"><span class="comment">#下面两项一般配置使用</span></span><br><span class="line">maxmemory 1024MB</span><br><span class="line"><span class="comment">#内存不足时的清楚策略</span></span><br><span class="line">maxmemory-policy allkeys-lru</span><br><span class="line"><span class="comment">#开启日志记录，相当于MySQL的binlog</span></span><br><span class="line"><span class="comment">#appendonly yes  </span></span><br><span class="line"><span class="comment">#appendfilename "appendonly.aof"</span></span><br><span class="line"><span class="comment">#appendfsync everysec</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ol start="2"><li>启动</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">/usr/<span class="built_in">local</span>/codis/bin/codis-server /usr/<span class="built_in">local</span>/codis/etc/redis_6379.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/codis/bin/codis-server /usr/<span class="built_in">local</span>/codis/etc/redis_6380.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line">ps -ef | grep codis-server</span><br><span class="line">netstat -tunlp | grep 63</span><br></pre></td></tr></table></figure><h4 id="启动-Codis-FE（可选组件）"><a href="#启动-Codis-FE（可选组件）" class="headerlink" title="启动 Codis FE（可选组件）"></a>启动 Codis FE（可选组件）</h4><ol><li>配置</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/codis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置文件</span></span><br><span class="line">./bin/codis-admin --dashboard-list --zookeeper=lab1:2181 &gt; etc/codis.json</span><br></pre></td></tr></table></figure><ol start="2"><li>启动</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/codis</span><br><span class="line">nohup ./bin/codis-fe --ncpu=4 --<span class="built_in">log</span>=fe.log --<span class="built_in">log</span>-level=WARN \</span><br><span class="line">    --dashboard-list=etc/codis.json --assets-dir=/usr/<span class="built_in">local</span>/codis/assets \</span><br><span class="line">    --listen=192.168.12.211:8090 &amp;</span><br></pre></td></tr></table></figure><h4 id="启动-Codis-HA（可选组件）"><a href="#启动-Codis-HA（可选组件）" class="headerlink" title="启动 Codis HA（可选组件）"></a>启动 Codis HA（可选组件）</h4><ol><li>启动</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./bin/codis-ha --<span class="built_in">log</span>=ha.log --<span class="built_in">log</span>-level=WARN --dashboard=192.168.12.211:18080 &amp;</span><br></pre></td></tr></table></figure><h4 id="Codis-Admin（命令行工具）"><a href="#Codis-Admin（命令行工具）" class="headerlink" title="Codis Admin（命令行工具）"></a>Codis Admin（命令行工具）</h4><ol><li>codis-dashboard 异常退出的修复</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/codis-admin --remove-lock --product=codis-famulei --zookeeper=lab1:2181</span><br></pre></td></tr></table></figure><ol start="2"><li>codis-proxy 异常退出的修复</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确认 codis-proxy 进程已经退出（很重要）</span></span><br><span class="line">./bin/codis-admin --dashboard=127.0.0.1:18080 --remove-proxy --addr=127.0.0.1:11080 --force</span><br></pre></td></tr></table></figure><h4 id="添加启动配置的-codis-server"><a href="#添加启动配置的-codis-server" class="headerlink" title="添加启动配置的 codis-server"></a>添加启动配置的 codis-server</h4><ol><li>web页面方式添加</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问如下页面</span></span><br><span class="line">http://192.168.12.211:8090/</span><br></pre></td></tr></table></figure><p><img src="/posts/2/codis-add.jpg" alt=""></p><p>添加完成后还需要点击如下图标生成主从关系</p><p><img src="/posts/2/codis-ms.jpg" alt=""></p><ol start="2"><li>命令行添加</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加组</span></span><br><span class="line">./bin/codis-admin --dashboard=127.0.0.1:18080 --create-group --gid=2</span><br><span class="line">./bin/codis-admin --dashboard=127.0.0.1:18080 --create-group --gid=3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把 codis-server 添加到指定组</span></span><br><span class="line">./bin/codis-admin --dashboard=127.0.0.1:18080 --group-add --gid=2 --addr=192.168.12.212:6379</span><br><span class="line">./bin/codis-admin --dashboard=127.0.0.1:18080 --group-add --gid=2 --addr=192.168.12.212:6380</span><br><span class="line">./bin/codis-admin --dashboard=127.0.0.1:18080 --group-add --gid=3 --addr=192.168.12.213:6379</span><br><span class="line">./bin/codis-admin --dashboard=127.0.0.1:18080 --group-add --gid=3 --addr=192.168.12.213:6380</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置同步状态</span></span><br><span class="line">./bin/codis-admin --dashboard=127.0.0.1:18080 --sync-action  --create \</span><br><span class="line">--addr=192.168.12.212:6379</span><br><span class="line">./bin/codis-admin --dashboard=127.0.0.1:18080 --sync-action  --create \</span><br><span class="line">--addr=192.168.12.212:6380</span><br></pre></td></tr></table></figure><h4 id="分配-slots-到-group"><a href="#分配-slots-到-group" class="headerlink" title="分配 slots 到 group"></a>分配 slots 到 group</h4><ol><li>web页面方式添加</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问如下页面</span></span><br><span class="line">http://192.168.12.211:8090/</span><br></pre></td></tr></table></figure><p><img src="/posts/2/codis-slot.jpg" alt=""></p><p>也可以直接使用如下按键快速分配<br><img src="/posts/2/slot.png" alt=""></p><ol start="2"><li>命令行添加</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/codis-admin --dashboard=127.0.0.1:18080 --slot-action --create-range --beg=600 --end=1023 --gid=3</span><br></pre></td></tr></table></figure><h4 id="上线-proxy"><a href="#上线-proxy" class="headerlink" title="上线 proxy"></a>上线 proxy</h4><p>proxy启动之后需要上线才能使用</p><ol><li>web页面方式添加</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问如下页面</span></span><br><span class="line">http://192.168.12.211:8090/</span><br></pre></td></tr></table></figure><p><img src="/posts/2/codis-proxy.jpg" alt=""></p><ol start="2"><li>命令行添加</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/codis-admin --dashboard=127.0.0.1:18080 --online-proxy --addr=192.168.88.211:11080</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><li>基本测试</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/redis-cli -h 192.168.12.211 -p 19000</span><br></pre></td></tr></table></figure><ol start="2"><li>性能测试</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/redis-benchmark -h 192.168.12.211 -p 19000</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://github.com/CodisLabs/codis/blob/release3.1/doc/tutorial_zh.md" target="_blank" rel="noopener">https://github.com/CodisLabs/codis/blob/release3.1/doc/tutorial_zh.md</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codis </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pika安装配置</title>
      <link href="/posts/1/"/>
      <url>/posts/1/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Pika是一个可持久化的大容量redis存储服务，兼容string、hash、list、zset、<br>set的绝大接口(<a href="https://github.com/Qihoo360/pika/wiki/pika-%E6%94%AF%E6%8C%81%E7%9A%84redis%E6%8E%A5%E5%8F%A3%E5%8F%8A%E5%85%BC%E5%AE%B9%E6%83%85%E5%86%B5" target="_blank" rel="noopener">兼容详情</a>)，<br>解决redis由于存储数据量巨大而导致内存不够用的容量瓶颈，<br>并且可以像redis一样，通过slaveof命令进行主从备份，支持全同步和部分同步，<br>pika还可以用在twemproxy或者codis中来实现静态数据分片（pika已经可以支持codis的<br>动态迁移slot功能）<br><a id="more"></a></p><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">yum install -y snappy-devel bz2 libzip-dev libsnappy-dev libprotobuf-dev \</span><br><span class="line">libevent-dev protobuf-compiler libgoogle-glog-dev protobuf-devel \</span><br><span class="line">libevent-devel bzip2-devel libbz2-dev zlib-devel gcc-c++</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看gcc版本</span></span><br><span class="line">gcc -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不4.8需要先安装切换到4.8</span></span><br><span class="line">sudo rpm --import http://ftp.scientificlinux.org/linux/scientific/5x/x86_64/RPM-GPG-KEYs/RPM-GPG-KEY-cern</span><br><span class="line">sudo wget http://people.centos.org/tru/devtools-2/devtools-2.repo -O /etc/yum.repos.d/devtools-2.repo</span><br><span class="line">sudo yum install -y devtoolset-2-gcc devtoolset-2-binutils devtoolset-2-gcc-c++</span><br><span class="line">scl <span class="built_in">enable</span> devtoolset-2 bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载源码</span></span><br><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/Qihoo360/pika.git &amp;&amp; <span class="built_in">cd</span> pika</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make __REL=1 -j4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若编译过程中，提示有依赖的库没有安装，则有提示安装后再重新编译</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">cp -r output /usr/<span class="built_in">local</span>/pika</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置库</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'/usr/local/pika/lib'</span> &gt; /etc/ld.so.conf.d/pika.conf</span><br><span class="line">ldconfig -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">/usr/<span class="built_in">local</span>/pika/bin/pika -v</span><br></pre></td></tr></table></figure><h3 id="配置运行"><a href="#配置运行" class="headerlink" title="配置运行"></a>配置运行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置</span></span><br><span class="line">mkdir -pv /data/pika</span><br><span class="line">mv /usr/<span class="built_in">local</span>/pika/conf/pika.conf /usr/<span class="built_in">local</span>/pika/conf/pika.conf.ori</span><br><span class="line">cat &gt;/usr/<span class="built_in">local</span>/pika/conf/pika.conf&lt;&lt;EOF</span><br><span class="line">port : 9221</span><br><span class="line">thread-num : 1</span><br><span class="line">sync-thread-num : 6</span><br><span class="line">sync-buffer-size : 10</span><br><span class="line"><span class="built_in">log</span>-path : /data/pika/<span class="built_in">log</span>/</span><br><span class="line">loglevel : info</span><br><span class="line">db-path : /data/pika/db/</span><br><span class="line">write-buffer-size : 268435456</span><br><span class="line">timeout : 60</span><br><span class="line">requirepass :</span><br><span class="line">masterauth :</span><br><span class="line">userpass :</span><br><span class="line">userblacklist :</span><br><span class="line">dump-prefix :</span><br><span class="line">daemonize : yes</span><br><span class="line">dump-path : /data/pika/dump/</span><br><span class="line">pidfile : /data/pika/pika.pid</span><br><span class="line">maxclients : 20000</span><br><span class="line">target-file-size-base : 20971520</span><br><span class="line">expire-logs-days : 7</span><br><span class="line">expire-logs-nums : 10</span><br><span class="line">root-connection-num : 2</span><br><span class="line">slowlog-log-slower-than : 10000</span><br><span class="line">slave-read-only : 0</span><br><span class="line">db-sync-path : /data/pika/dbsync/</span><br><span class="line">db-sync-speed : -1</span><br><span class="line">binlog-file-size : 104857600</span><br><span class="line">compression : snappy</span><br><span class="line">max-background-flushes : 1</span><br><span class="line">max-background-compactions : 2</span><br><span class="line">max-cache-files : 5000</span><br><span class="line">max-bytes-for-level-multiplier : 10</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">/usr/<span class="built_in">local</span>/pika/bin/pika -c /usr/<span class="built_in">local</span>/pika/conf/pika.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测端口</span></span><br><span class="line">netstat -tunlp | grep 9221</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本测试</span></span><br><span class="line">yum install -y redis</span><br><span class="line">redis-cli -h 127.0.0.1 -p 9221</span><br><span class="line"><span class="built_in">set</span> will mgx</span><br><span class="line">get will</span><br><span class="line"></span><br><span class="line"><span class="comment"># 性能测试</span></span><br><span class="line">redis-benchmark -h 127.0.0.1 -p 9221 -n 1000000 -t <span class="built_in">set</span>,get \</span><br><span class="line">-r 10000000000 -c 120 -d 200</span><br></pre></td></tr></table></figure><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="https://github.com/Qihoo360/pika/blob/master/README_CN.md" target="_blank" rel="noopener">https://github.com/Qihoo360/pika/blob/master/README_CN.md</a></li><li><a href="https://github.com/Qihoo360/pika/wiki/pika-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">https://github.com/Qihoo360/pika/wiki/pika-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> NoSQL </tag>
            
            <tag> pika </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
